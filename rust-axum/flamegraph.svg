<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1626" onload="init(evt)" viewBox="0 0 1200 1626" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1626" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1615.00"> </text><svg id="frames" x="10" width="1180" total_samples="19998"><g><title>[unknown] (15 samples, 0.08%)</title><rect x="0.0100%" y="100" width="0.0750%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="15"/><text x="0.2600%" y="110.50"></text></g><g><title>[unknown] (15 samples, 0.08%)</title><rect x="0.0100%" y="116" width="0.0750%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="15"/><text x="0.2600%" y="126.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="0.0200%" y="132" width="0.0650%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="13"/><text x="0.2700%" y="142.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="0.0400%" y="148" width="0.0450%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="9"/><text x="0.2900%" y="158.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="0.0650%" y="164" width="0.0200%" height="15" fill="rgb(208,68,35)" fg:x="13" fg:w="4"/><text x="0.3150%" y="174.50"></text></g><g><title>__libc_start_call_main (3 samples, 0.02%)</title><rect x="0.0850%" y="100" width="0.0150%" height="15" fill="rgb(232,128,0)" fg:x="17" fg:w="3"/><text x="0.3350%" y="110.50"></text></g><g><title>main (3 samples, 0.02%)</title><rect x="0.0850%" y="116" width="0.0150%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="3"/><text x="0.3350%" y="126.50"></text></g><g><title>std::rt::lang_start_internal (3 samples, 0.02%)</title><rect x="0.0850%" y="132" width="0.0150%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="3"/><text x="0.3350%" y="142.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.02%)</title><rect x="0.0850%" y="148" width="0.0150%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="3"/><text x="0.3350%" y="158.50"></text></g><g><title>std::panicking::try (3 samples, 0.02%)</title><rect x="0.0850%" y="164" width="0.0150%" height="15" fill="rgb(220,122,19)" fg:x="17" fg:w="3"/><text x="0.3350%" y="174.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.02%)</title><rect x="0.0850%" y="180" width="0.0150%" height="15" fill="rgb(250,228,42)" fg:x="17" fg:w="3"/><text x="0.3350%" y="190.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (3 samples, 0.02%)</title><rect x="0.0850%" y="196" width="0.0150%" height="15" fill="rgb(240,193,28)" fg:x="17" fg:w="3"/><text x="0.3350%" y="206.50"></text></g><g><title>std::panic::catch_unwind (3 samples, 0.02%)</title><rect x="0.0850%" y="212" width="0.0150%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="3"/><text x="0.3350%" y="222.50"></text></g><g><title>std::panicking::try (3 samples, 0.02%)</title><rect x="0.0850%" y="228" width="0.0150%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="3"/><text x="0.3350%" y="238.50"></text></g><g><title>std::panicking::try::do_call (3 samples, 0.02%)</title><rect x="0.0850%" y="244" width="0.0150%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="3"/><text x="0.3350%" y="254.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 0.02%)</title><rect x="0.0850%" y="260" width="0.0150%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="3"/><text x="0.3350%" y="270.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (3 samples, 0.02%)</title><rect x="0.0850%" y="276" width="0.0150%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="3"/><text x="0.3350%" y="286.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 0.02%)</title><rect x="0.0850%" y="292" width="0.0150%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="3"/><text x="0.3350%" y="302.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.02%)</title><rect x="0.0850%" y="308" width="0.0150%" height="15" fill="rgb(221,200,47)" fg:x="17" fg:w="3"/><text x="0.3350%" y="318.50"></text></g><g><title>rust_axum::main (3 samples, 0.02%)</title><rect x="0.0850%" y="324" width="0.0150%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="3"/><text x="0.3350%" y="334.50"></text></g><g><title>tokio::runtime::builder::Builder::build (3 samples, 0.02%)</title><rect x="0.0850%" y="340" width="0.0150%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="3"/><text x="0.3350%" y="350.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (3 samples, 0.02%)</title><rect x="0.0850%" y="356" width="0.0150%" height="15" fill="rgb(235,183,28)" fg:x="17" fg:w="3"/><text x="0.3350%" y="366.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3 samples, 0.02%)</title><rect x="0.0850%" y="372" width="0.0150%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="3"/><text x="0.3350%" y="382.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3 samples, 0.02%)</title><rect x="0.0850%" y="388" width="0.0150%" height="15" fill="rgb(247,18,42)" fg:x="17" fg:w="3"/><text x="0.3350%" y="398.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (3 samples, 0.02%)</title><rect x="0.0850%" y="404" width="0.0150%" height="15" fill="rgb(241,131,45)" fg:x="17" fg:w="3"/><text x="0.3350%" y="414.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (3 samples, 0.02%)</title><rect x="0.0850%" y="420" width="0.0150%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="3"/><text x="0.3350%" y="430.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (3 samples, 0.02%)</title><rect x="0.0850%" y="436" width="0.0150%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="3"/><text x="0.3350%" y="446.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.02%)</title><rect x="0.0850%" y="452" width="0.0150%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="3"/><text x="0.3350%" y="462.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (3 samples, 0.02%)</title><rect x="0.0850%" y="468" width="0.0150%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="3"/><text x="0.3350%" y="478.50"></text></g><g><title>std::thread::Builder::spawn (3 samples, 0.02%)</title><rect x="0.0850%" y="484" width="0.0150%" height="15" fill="rgb(232,36,49)" fg:x="17" fg:w="3"/><text x="0.3350%" y="494.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (3 samples, 0.02%)</title><rect x="0.0850%" y="500" width="0.0150%" height="15" fill="rgb(209,103,24)" fg:x="17" fg:w="3"/><text x="0.3350%" y="510.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (3 samples, 0.02%)</title><rect x="0.0850%" y="516" width="0.0150%" height="15" fill="rgb(229,88,8)" fg:x="17" fg:w="3"/><text x="0.3350%" y="526.50"></text></g><g><title>std::sys::unix::thread::Thread::new (3 samples, 0.02%)</title><rect x="0.0850%" y="532" width="0.0150%" height="15" fill="rgb(213,181,19)" fg:x="17" fg:w="3"/><text x="0.3350%" y="542.50"></text></g><g><title>__pthread_create_2_1 (3 samples, 0.02%)</title><rect x="0.0850%" y="548" width="0.0150%" height="15" fill="rgb(254,191,54)" fg:x="17" fg:w="3"/><text x="0.3350%" y="558.50"></text></g><g><title>allocate_stack (3 samples, 0.02%)</title><rect x="0.0850%" y="564" width="0.0150%" height="15" fill="rgb(241,83,37)" fg:x="17" fg:w="3"/><text x="0.3350%" y="574.50"></text></g><g><title>&lt;hyper::server::server::Server&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="0.1050%" y="180" width="0.0200%" height="15" fill="rgb(233,36,39)" fg:x="21" fg:w="4"/><text x="0.3550%" y="190.50"></text></g><g><title>hyper::server::server::Server&lt;I,S,E&gt;::poll_watch (4 samples, 0.02%)</title><rect x="0.1050%" y="196" width="0.0200%" height="15" fill="rgb(226,3,54)" fg:x="21" fg:w="4"/><text x="0.3550%" y="206.50"></text></g><g><title>hyper::server::server::Server&lt;I,S,E&gt;::poll_next_ (4 samples, 0.02%)</title><rect x="0.1050%" y="212" width="0.0200%" height="15" fill="rgb(245,192,40)" fg:x="21" fg:w="4"/><text x="0.3550%" y="222.50"></text></g><g><title>&lt;hyper::server::tcp::AddrIncoming as hyper::server::accept::Accept&gt;::poll_accept (3 samples, 0.02%)</title><rect x="0.1100%" y="228" width="0.0150%" height="15" fill="rgb(238,167,29)" fg:x="22" fg:w="3"/><text x="0.3600%" y="238.50"></text></g><g><title>hyper::server::tcp::AddrIncoming::poll_next_ (3 samples, 0.02%)</title><rect x="0.1100%" y="244" width="0.0150%" height="15" fill="rgb(232,182,51)" fg:x="22" fg:w="3"/><text x="0.3600%" y="254.50"></text></g><g><title>tokio::net::tcp::listener::TcpListener::poll_accept (3 samples, 0.02%)</title><rect x="0.1100%" y="260" width="0.0150%" height="15" fill="rgb(231,60,39)" fg:x="22" fg:w="3"/><text x="0.3600%" y="270.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="0.1300%" y="500" width="0.0100%" height="15" fill="rgb(208,69,12)" fg:x="26" fg:w="2"/><text x="0.3800%" y="510.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (2 samples, 0.01%)</title><rect x="0.1300%" y="516" width="0.0100%" height="15" fill="rgb(235,93,37)" fg:x="26" fg:w="2"/><text x="0.3800%" y="526.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (2 samples, 0.01%)</title><rect x="0.1300%" y="532" width="0.0100%" height="15" fill="rgb(213,116,39)" fg:x="26" fg:w="2"/><text x="0.3800%" y="542.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (2 samples, 0.01%)</title><rect x="0.1300%" y="548" width="0.0100%" height="15" fill="rgb(222,207,29)" fg:x="26" fg:w="2"/><text x="0.3800%" y="558.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (2 samples, 0.01%)</title><rect x="0.1300%" y="564" width="0.0100%" height="15" fill="rgb(206,96,30)" fg:x="26" fg:w="2"/><text x="0.3800%" y="574.50"></text></g><g><title>once_cell::imp::initialize_or_wait (2 samples, 0.01%)</title><rect x="0.1300%" y="580" width="0.0100%" height="15" fill="rgb(218,138,4)" fg:x="26" fg:w="2"/><text x="0.3800%" y="590.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.01%)</title><rect x="0.1300%" y="596" width="0.0100%" height="15" fill="rgb(250,191,14)" fg:x="26" fg:w="2"/><text x="0.3800%" y="606.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1300%" y="612" width="0.0100%" height="15" fill="rgb(239,60,40)" fg:x="26" fg:w="2"/><text x="0.3800%" y="622.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1300%" y="628" width="0.0100%" height="15" fill="rgb(206,27,48)" fg:x="26" fg:w="2"/><text x="0.3800%" y="638.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1300%" y="644" width="0.0100%" height="15" fill="rgb(225,35,8)" fg:x="26" fg:w="2"/><text x="0.3800%" y="654.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="0.1300%" y="660" width="0.0100%" height="15" fill="rgb(250,213,24)" fg:x="26" fg:w="2"/><text x="0.3800%" y="670.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="0.1300%" y="676" width="0.0100%" height="15" fill="rgb(247,123,22)" fg:x="26" fg:w="2"/><text x="0.3800%" y="686.50"></text></g><g><title>tracing_subscriber::filter::env::directive::Directive::parse::DIRECTIVE_RE::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1300%" y="692" width="0.0100%" height="15" fill="rgb(231,138,38)" fg:x="26" fg:w="2"/><text x="0.3800%" y="702.50"></text></g><g><title>regex::regex::string::Regex::new (2 samples, 0.01%)</title><rect x="0.1300%" y="708" width="0.0100%" height="15" fill="rgb(231,145,46)" fg:x="26" fg:w="2"/><text x="0.3800%" y="718.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (2 samples, 0.01%)</title><rect x="0.1300%" y="724" width="0.0100%" height="15" fill="rgb(251,118,11)" fg:x="26" fg:w="2"/><text x="0.3800%" y="734.50"></text></g><g><title>regex::builders::Builder::build_one_string (2 samples, 0.01%)</title><rect x="0.1300%" y="740" width="0.0100%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="2"/><text x="0.3800%" y="750.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (2 samples, 0.01%)</title><rect x="0.1300%" y="756" width="0.0100%" height="15" fill="rgb(247,81,37)" fg:x="26" fg:w="2"/><text x="0.3800%" y="766.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (2 samples, 0.01%)</title><rect x="0.1300%" y="772" width="0.0100%" height="15" fill="rgb(209,12,38)" fg:x="26" fg:w="2"/><text x="0.3800%" y="782.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap_or_else (3 samples, 0.02%)</title><rect x="0.1300%" y="180" width="0.0150%" height="15" fill="rgb(227,1,9)" fg:x="26" fg:w="3"/><text x="0.3800%" y="190.50"></text></g><g><title>rust_axum::main::_{{closure}}::_{{closure}} (3 samples, 0.02%)</title><rect x="0.1300%" y="196" width="0.0150%" height="15" fill="rgb(248,47,43)" fg:x="26" fg:w="3"/><text x="0.3800%" y="206.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (3 samples, 0.02%)</title><rect x="0.1300%" y="212" width="0.0150%" height="15" fill="rgb(221,10,30)" fg:x="26" fg:w="3"/><text x="0.3800%" y="222.50"></text></g><g><title>&lt;tracing_subscriber::filter::env::EnvFilter as core::convert::From&lt;S&gt;&gt;::from (3 samples, 0.02%)</title><rect x="0.1300%" y="228" width="0.0150%" height="15" fill="rgb(210,229,1)" fg:x="26" fg:w="3"/><text x="0.3800%" y="238.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::new (3 samples, 0.02%)</title><rect x="0.1300%" y="244" width="0.0150%" height="15" fill="rgb(222,148,37)" fg:x="26" fg:w="3"/><text x="0.3800%" y="254.50"></text></g><g><title>tracing_subscriber::filter::env::builder::Builder::parse_lossy (3 samples, 0.02%)</title><rect x="0.1300%" y="260" width="0.0150%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="3"/><text x="0.3800%" y="270.50"></text></g><g><title>tracing_subscriber::filter::env::builder::Builder::from_directives (3 samples, 0.02%)</title><rect x="0.1300%" y="276" width="0.0150%" height="15" fill="rgb(247,98,35)" fg:x="26" fg:w="3"/><text x="0.3800%" y="286.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.02%)</title><rect x="0.1300%" y="292" width="0.0150%" height="15" fill="rgb(247,138,52)" fg:x="26" fg:w="3"/><text x="0.3800%" y="302.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="0.1300%" y="308" width="0.0150%" height="15" fill="rgb(213,79,30)" fg:x="26" fg:w="3"/><text x="0.3800%" y="318.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="0.1300%" y="324" width="0.0150%" height="15" fill="rgb(246,177,23)" fg:x="26" fg:w="3"/><text x="0.3800%" y="334.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="0.1300%" y="340" width="0.0150%" height="15" fill="rgb(230,62,27)" fg:x="26" fg:w="3"/><text x="0.3800%" y="350.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="0.1300%" y="356" width="0.0150%" height="15" fill="rgb(216,154,8)" fg:x="26" fg:w="3"/><text x="0.3800%" y="366.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (3 samples, 0.02%)</title><rect x="0.1300%" y="372" width="0.0150%" height="15" fill="rgb(244,35,45)" fg:x="26" fg:w="3"/><text x="0.3800%" y="382.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.02%)</title><rect x="0.1300%" y="388" width="0.0150%" height="15" fill="rgb(251,115,12)" fg:x="26" fg:w="3"/><text x="0.3800%" y="398.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.02%)</title><rect x="0.1300%" y="404" width="0.0150%" height="15" fill="rgb(240,54,50)" fg:x="26" fg:w="3"/><text x="0.3800%" y="414.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (3 samples, 0.02%)</title><rect x="0.1300%" y="420" width="0.0150%" height="15" fill="rgb(233,84,52)" fg:x="26" fg:w="3"/><text x="0.3800%" y="430.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (3 samples, 0.02%)</title><rect x="0.1300%" y="436" width="0.0150%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="3"/><text x="0.3800%" y="446.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.02%)</title><rect x="0.1300%" y="452" width="0.0150%" height="15" fill="rgb(249,43,39)" fg:x="26" fg:w="3"/><text x="0.3800%" y="462.50"></text></g><g><title>tracing_subscriber::filter::env::builder::Builder::parse_lossy::_{{closure}} (3 samples, 0.02%)</title><rect x="0.1300%" y="468" width="0.0150%" height="15" fill="rgb(209,38,44)" fg:x="26" fg:w="3"/><text x="0.3800%" y="478.50"></text></g><g><title>tracing_subscriber::filter::env::directive::Directive::parse (3 samples, 0.02%)</title><rect x="0.1300%" y="484" width="0.0150%" height="15" fill="rgb(236,212,23)" fg:x="26" fg:w="3"/><text x="0.3800%" y="494.50"></text></g><g><title>tokio::runtime::coop::budget (11 samples, 0.06%)</title><rect x="0.1000%" y="116" width="0.0550%" height="15" fill="rgb(242,79,21)" fg:x="20" fg:w="11"/><text x="0.3500%" y="126.50"></text></g><g><title>tokio::runtime::coop::with_budget (10 samples, 0.05%)</title><rect x="0.1050%" y="132" width="0.0500%" height="15" fill="rgb(211,96,35)" fg:x="21" fg:w="10"/><text x="0.3550%" y="142.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (10 samples, 0.05%)</title><rect x="0.1050%" y="148" width="0.0500%" height="15" fill="rgb(253,215,40)" fg:x="21" fg:w="10"/><text x="0.3550%" y="158.50"></text></g><g><title>rust_axum::main::_{{closure}} (10 samples, 0.05%)</title><rect x="0.1050%" y="164" width="0.0500%" height="15" fill="rgb(211,81,21)" fg:x="21" fg:w="10"/><text x="0.3550%" y="174.50"></text></g><g><title>sqlx_core::pool::options::PoolOptions&lt;DB&gt;::connect::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="180" width="0.0100%" height="15" fill="rgb(208,190,38)" fg:x="29" fg:w="2"/><text x="0.3950%" y="190.50"></text></g><g><title>sqlx_core::pool::options::PoolOptions&lt;DB&gt;::connect_with::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="196" width="0.0100%" height="15" fill="rgb(235,213,38)" fg:x="29" fg:w="2"/><text x="0.3950%" y="206.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::acquire::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="212" width="0.0100%" height="15" fill="rgb(237,122,38)" fg:x="29" fg:w="2"/><text x="0.3950%" y="222.50"></text></g><g><title>sqlx_core::rt::timeout::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="228" width="0.0100%" height="15" fill="rgb(244,218,35)" fg:x="29" fg:w="2"/><text x="0.3950%" y="238.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.1450%" y="244" width="0.0100%" height="15" fill="rgb(240,68,47)" fg:x="29" fg:w="2"/><text x="0.3950%" y="254.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::acquire::_{{closure}}::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="260" width="0.0100%" height="15" fill="rgb(210,16,53)" fg:x="29" fg:w="2"/><text x="0.3950%" y="270.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::connect::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="276" width="0.0100%" height="15" fill="rgb(235,124,12)" fg:x="29" fg:w="2"/><text x="0.3950%" y="286.50"></text></g><g><title>sqlx_core::rt::timeout::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="292" width="0.0100%" height="15" fill="rgb(224,169,11)" fg:x="29" fg:w="2"/><text x="0.3950%" y="302.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.1450%" y="308" width="0.0100%" height="15" fill="rgb(250,166,2)" fg:x="29" fg:w="2"/><text x="0.3950%" y="318.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="0.1450%" y="324" width="0.0100%" height="15" fill="rgb(242,216,29)" fg:x="29" fg:w="2"/><text x="0.3950%" y="334.50"></text></g><g><title>sqlx_postgres::connection::establish::_&lt;impl sqlx_postgres::connection::PgConnection&gt;::establish::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="340" width="0.0100%" height="15" fill="rgb(230,116,27)" fg:x="29" fg:w="2"/><text x="0.3950%" y="350.50"></text></g><g><title>sqlx_postgres::connection::sasl::authenticate::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1450%" y="356" width="0.0100%" height="15" fill="rgb(228,99,48)" fg:x="29" fg:w="2"/><text x="0.3950%" y="366.50"></text></g><g><title>sqlx_postgres::connection::sasl::hi (2 samples, 0.01%)</title><rect x="0.1450%" y="372" width="0.0100%" height="15" fill="rgb(253,11,6)" fg:x="29" fg:w="2"/><text x="0.3950%" y="382.50"></text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (12 samples, 0.06%)</title><rect x="0.1000%" y="100" width="0.0600%" height="15" fill="rgb(247,143,39)" fg:x="20" fg:w="12"/><text x="0.3500%" y="110.50"></text></g><g><title>[unknown] (34 samples, 0.17%)</title><rect x="0.0000%" y="84" width="0.1700%" height="15" fill="rgb(236,97,10)" fg:x="0" fg:w="34"/><text x="0.2500%" y="94.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::new (2 samples, 0.01%)</title><rect x="0.1600%" y="100" width="0.0100%" height="15" fill="rgb(233,208,19)" fg:x="32" fg:w="2"/><text x="0.4100%" y="110.50"></text></g><g><title>tracing_subscriber::filter::env::builder::Builder::parse_lossy (2 samples, 0.01%)</title><rect x="0.1600%" y="116" width="0.0100%" height="15" fill="rgb(216,164,2)" fg:x="32" fg:w="2"/><text x="0.4100%" y="126.50"></text></g><g><title>tracing_subscriber::filter::env::builder::Builder::from_directives (2 samples, 0.01%)</title><rect x="0.1600%" y="132" width="0.0100%" height="15" fill="rgb(220,129,5)" fg:x="32" fg:w="2"/><text x="0.4100%" y="142.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.01%)</title><rect x="0.1600%" y="148" width="0.0100%" height="15" fill="rgb(242,17,10)" fg:x="32" fg:w="2"/><text x="0.4100%" y="158.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="0.1600%" y="164" width="0.0100%" height="15" fill="rgb(242,107,0)" fg:x="32" fg:w="2"/><text x="0.4100%" y="174.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="0.1600%" y="180" width="0.0100%" height="15" fill="rgb(251,28,31)" fg:x="32" fg:w="2"/><text x="0.4100%" y="190.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="0.1600%" y="196" width="0.0100%" height="15" fill="rgb(233,223,10)" fg:x="32" fg:w="2"/><text x="0.4100%" y="206.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.1600%" y="212" width="0.0100%" height="15" fill="rgb(215,21,27)" fg:x="32" fg:w="2"/><text x="0.4100%" y="222.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map (2 samples, 0.01%)</title><rect x="0.1600%" y="228" width="0.0100%" height="15" fill="rgb(232,23,21)" fg:x="32" fg:w="2"/><text x="0.4100%" y="238.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.01%)</title><rect x="0.1600%" y="244" width="0.0100%" height="15" fill="rgb(244,5,23)" fg:x="32" fg:w="2"/><text x="0.4100%" y="254.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.01%)</title><rect x="0.1600%" y="260" width="0.0100%" height="15" fill="rgb(226,81,46)" fg:x="32" fg:w="2"/><text x="0.4100%" y="270.50"></text></g><g><title>core::iter::adapters::filter::filter_try_fold::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="276" width="0.0100%" height="15" fill="rgb(247,70,30)" fg:x="32" fg:w="2"/><text x="0.4100%" y="286.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find_map::check::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="292" width="0.0100%" height="15" fill="rgb(212,68,19)" fg:x="32" fg:w="2"/><text x="0.4100%" y="302.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.01%)</title><rect x="0.1600%" y="308" width="0.0100%" height="15" fill="rgb(240,187,13)" fg:x="32" fg:w="2"/><text x="0.4100%" y="318.50"></text></g><g><title>tracing_subscriber::filter::env::builder::Builder::parse_lossy::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="324" width="0.0100%" height="15" fill="rgb(223,113,26)" fg:x="32" fg:w="2"/><text x="0.4100%" y="334.50"></text></g><g><title>tracing_subscriber::filter::env::directive::Directive::parse (2 samples, 0.01%)</title><rect x="0.1600%" y="340" width="0.0100%" height="15" fill="rgb(206,192,2)" fg:x="32" fg:w="2"/><text x="0.4100%" y="350.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="0.1600%" y="356" width="0.0100%" height="15" fill="rgb(241,108,4)" fg:x="32" fg:w="2"/><text x="0.4100%" y="366.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (2 samples, 0.01%)</title><rect x="0.1600%" y="372" width="0.0100%" height="15" fill="rgb(247,173,49)" fg:x="32" fg:w="2"/><text x="0.4100%" y="382.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (2 samples, 0.01%)</title><rect x="0.1600%" y="388" width="0.0100%" height="15" fill="rgb(224,114,35)" fg:x="32" fg:w="2"/><text x="0.4100%" y="398.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (2 samples, 0.01%)</title><rect x="0.1600%" y="404" width="0.0100%" height="15" fill="rgb(245,159,27)" fg:x="32" fg:w="2"/><text x="0.4100%" y="414.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (2 samples, 0.01%)</title><rect x="0.1600%" y="420" width="0.0100%" height="15" fill="rgb(245,172,44)" fg:x="32" fg:w="2"/><text x="0.4100%" y="430.50"></text></g><g><title>once_cell::imp::initialize_or_wait (2 samples, 0.01%)</title><rect x="0.1600%" y="436" width="0.0100%" height="15" fill="rgb(236,23,11)" fg:x="32" fg:w="2"/><text x="0.4100%" y="446.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.01%)</title><rect x="0.1600%" y="452" width="0.0100%" height="15" fill="rgb(205,117,38)" fg:x="32" fg:w="2"/><text x="0.4100%" y="462.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="468" width="0.0100%" height="15" fill="rgb(237,72,25)" fg:x="32" fg:w="2"/><text x="0.4100%" y="478.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="484" width="0.0100%" height="15" fill="rgb(244,70,9)" fg:x="32" fg:w="2"/><text x="0.4100%" y="494.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="500" width="0.0100%" height="15" fill="rgb(217,125,39)" fg:x="32" fg:w="2"/><text x="0.4100%" y="510.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="0.1600%" y="516" width="0.0100%" height="15" fill="rgb(235,36,10)" fg:x="32" fg:w="2"/><text x="0.4100%" y="526.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="0.1600%" y="532" width="0.0100%" height="15" fill="rgb(251,123,47)" fg:x="32" fg:w="2"/><text x="0.4100%" y="542.50"></text></g><g><title>tracing_subscriber::filter::env::directive::Directive::parse::DIRECTIVE_RE::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="548" width="0.0100%" height="15" fill="rgb(221,13,13)" fg:x="32" fg:w="2"/><text x="0.4100%" y="558.50"></text></g><g><title>regex::regex::string::Regex::new (2 samples, 0.01%)</title><rect x="0.1600%" y="564" width="0.0100%" height="15" fill="rgb(238,131,9)" fg:x="32" fg:w="2"/><text x="0.4100%" y="574.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (2 samples, 0.01%)</title><rect x="0.1600%" y="580" width="0.0100%" height="15" fill="rgb(211,50,8)" fg:x="32" fg:w="2"/><text x="0.4100%" y="590.50"></text></g><g><title>regex::builders::Builder::build_one_string (2 samples, 0.01%)</title><rect x="0.1600%" y="596" width="0.0100%" height="15" fill="rgb(245,182,24)" fg:x="32" fg:w="2"/><text x="0.4100%" y="606.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (2 samples, 0.01%)</title><rect x="0.1600%" y="612" width="0.0100%" height="15" fill="rgb(242,14,37)" fg:x="32" fg:w="2"/><text x="0.4100%" y="622.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many (2 samples, 0.01%)</title><rect x="0.1600%" y="628" width="0.0100%" height="15" fill="rgb(246,228,12)" fg:x="32" fg:w="2"/><text x="0.4100%" y="638.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir (2 samples, 0.01%)</title><rect x="0.1600%" y="644" width="0.0100%" height="15" fill="rgb(213,55,15)" fg:x="32" fg:w="2"/><text x="0.4100%" y="654.50"></text></g><g><title>regex_automata::meta::strategy::new (2 samples, 0.01%)</title><rect x="0.1600%" y="660" width="0.0100%" height="15" fill="rgb(209,9,3)" fg:x="32" fg:w="2"/><text x="0.4100%" y="670.50"></text></g><g><title>regex_automata::meta::strategy::Core::new (2 samples, 0.01%)</title><rect x="0.1600%" y="676" width="0.0100%" height="15" fill="rgb(230,59,30)" fg:x="32" fg:w="2"/><text x="0.4100%" y="686.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::build_many_from_hir (2 samples, 0.01%)</title><rect x="0.1600%" y="692" width="0.0100%" height="15" fill="rgb(209,121,21)" fg:x="32" fg:w="2"/><text x="0.4100%" y="702.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (2 samples, 0.01%)</title><rect x="0.1600%" y="708" width="0.0100%" height="15" fill="rgb(220,109,13)" fg:x="32" fg:w="2"/><text x="0.4100%" y="718.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (2 samples, 0.01%)</title><rect x="0.1600%" y="724" width="0.0100%" height="15" fill="rgb(232,18,1)" fg:x="32" fg:w="2"/><text x="0.4100%" y="734.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.1600%" y="740" width="0.0100%" height="15" fill="rgb(215,41,42)" fg:x="32" fg:w="2"/><text x="0.4100%" y="750.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="0.1600%" y="756" width="0.0100%" height="15" fill="rgb(224,123,36)" fg:x="32" fg:w="2"/><text x="0.4100%" y="766.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.01%)</title><rect x="0.1600%" y="772" width="0.0100%" height="15" fill="rgb(240,125,3)" fg:x="32" fg:w="2"/><text x="0.4100%" y="782.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="788" width="0.0100%" height="15" fill="rgb(205,98,50)" fg:x="32" fg:w="2"/><text x="0.4100%" y="798.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.01%)</title><rect x="0.1600%" y="804" width="0.0100%" height="15" fill="rgb(205,185,37)" fg:x="32" fg:w="2"/><text x="0.4100%" y="814.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.01%)</title><rect x="0.1600%" y="820" width="0.0100%" height="15" fill="rgb(238,207,15)" fg:x="32" fg:w="2"/><text x="0.4100%" y="830.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (2 samples, 0.01%)</title><rect x="0.1600%" y="836" width="0.0100%" height="15" fill="rgb(213,199,42)" fg:x="32" fg:w="2"/><text x="0.4100%" y="846.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.1600%" y="852" width="0.0100%" height="15" fill="rgb(235,201,11)" fg:x="32" fg:w="2"/><text x="0.4100%" y="862.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="0.1600%" y="868" width="0.0100%" height="15" fill="rgb(207,46,11)" fg:x="32" fg:w="2"/><text x="0.4100%" y="878.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.01%)</title><rect x="0.1600%" y="884" width="0.0100%" height="15" fill="rgb(241,35,35)" fg:x="32" fg:w="2"/><text x="0.4100%" y="894.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="900" width="0.0100%" height="15" fill="rgb(243,32,47)" fg:x="32" fg:w="2"/><text x="0.4100%" y="910.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.01%)</title><rect x="0.1600%" y="916" width="0.0100%" height="15" fill="rgb(247,202,23)" fg:x="32" fg:w="2"/><text x="0.4100%" y="926.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice (2 samples, 0.01%)</title><rect x="0.1600%" y="932" width="0.0100%" height="15" fill="rgb(219,102,11)" fg:x="32" fg:w="2"/><text x="0.4100%" y="942.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_iter (2 samples, 0.01%)</title><rect x="0.1600%" y="948" width="0.0100%" height="15" fill="rgb(243,110,44)" fg:x="32" fg:w="2"/><text x="0.4100%" y="958.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.1600%" y="964" width="0.0100%" height="15" fill="rgb(222,74,54)" fg:x="32" fg:w="2"/><text x="0.4100%" y="974.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="0.1600%" y="980" width="0.0100%" height="15" fill="rgb(216,99,12)" fg:x="32" fg:w="2"/><text x="0.4100%" y="990.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.01%)</title><rect x="0.1600%" y="996" width="0.0100%" height="15" fill="rgb(226,22,26)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1006.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_alt_slice::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="1012" width="0.0100%" height="15" fill="rgb(217,163,10)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1022.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.01%)</title><rect x="0.1600%" y="1028" width="0.0100%" height="15" fill="rgb(213,25,53)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1038.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_concat (2 samples, 0.01%)</title><rect x="0.1600%" y="1044" width="0.0100%" height="15" fill="rgb(252,105,26)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1054.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="0.1600%" y="1060" width="0.0100%" height="15" fill="rgb(220,39,43)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1070.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="0.1600%" y="1076" width="0.0100%" height="15" fill="rgb(229,68,48)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1086.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.01%)</title><rect x="0.1600%" y="1092" width="0.0100%" height="15" fill="rgb(252,8,32)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1102.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c::_{{closure}} (2 samples, 0.01%)</title><rect x="0.1600%" y="1108" width="0.0100%" height="15" fill="rgb(223,20,43)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1118.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (2 samples, 0.01%)</title><rect x="0.1600%" y="1124" width="0.0100%" height="15" fill="rgb(229,81,49)" fg:x="32" fg:w="2"/><text x="0.4100%" y="1134.50"></text></g><g><title>[unknown] (11 samples, 0.06%)</title><rect x="0.1750%" y="116" width="0.0550%" height="15" fill="rgb(236,28,36)" fg:x="35" fg:w="11"/><text x="0.4250%" y="126.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.1800%" y="132" width="0.0500%" height="15" fill="rgb(249,185,26)" fg:x="36" fg:w="10"/><text x="0.4300%" y="142.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="0.1900%" y="148" width="0.0400%" height="15" fill="rgb(249,174,33)" fg:x="38" fg:w="8"/><text x="0.4400%" y="158.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="0.1950%" y="164" width="0.0350%" height="15" fill="rgb(233,201,37)" fg:x="39" fg:w="7"/><text x="0.4450%" y="174.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2200%" y="180" width="0.0100%" height="15" fill="rgb(221,78,26)" fg:x="44" fg:w="2"/><text x="0.4700%" y="190.50"></text></g><g><title>__GI___sigsetjmp (3 samples, 0.02%)</title><rect x="0.2300%" y="116" width="0.0150%" height="15" fill="rgb(250,127,30)" fg:x="46" fg:w="3"/><text x="0.4800%" y="126.50"></text></g><g><title>rseq_register_current_thread (4 samples, 0.02%)</title><rect x="0.2450%" y="116" width="0.0200%" height="15" fill="rgb(230,49,44)" fg:x="49" fg:w="4"/><text x="0.4950%" y="126.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.2500%" y="132" width="0.0150%" height="15" fill="rgb(229,67,23)" fg:x="50" fg:w="3"/><text x="0.5000%" y="142.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2550%" y="148" width="0.0100%" height="15" fill="rgb(249,83,47)" fg:x="51" fg:w="2"/><text x="0.5050%" y="158.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2550%" y="164" width="0.0100%" height="15" fill="rgb(215,43,3)" fg:x="51" fg:w="2"/><text x="0.5050%" y="174.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2550%" y="180" width="0.0100%" height="15" fill="rgb(238,154,13)" fg:x="51" fg:w="2"/><text x="0.5050%" y="190.50"></text></g><g><title>__pthread_setname_np (4 samples, 0.02%)</title><rect x="0.2650%" y="212" width="0.0200%" height="15" fill="rgb(219,56,2)" fg:x="53" fg:w="4"/><text x="0.5150%" y="222.50"></text></g><g><title>__GI___prctl (4 samples, 0.02%)</title><rect x="0.2650%" y="228" width="0.0200%" height="15" fill="rgb(233,0,4)" fg:x="53" fg:w="4"/><text x="0.5150%" y="238.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="0.2650%" y="244" width="0.0200%" height="15" fill="rgb(235,30,7)" fg:x="53" fg:w="4"/><text x="0.5150%" y="254.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.2700%" y="260" width="0.0150%" height="15" fill="rgb(250,79,13)" fg:x="54" fg:w="3"/><text x="0.5200%" y="270.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.2700%" y="276" width="0.0150%" height="15" fill="rgb(211,146,34)" fg:x="54" fg:w="3"/><text x="0.5200%" y="286.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.2700%" y="292" width="0.0150%" height="15" fill="rgb(228,22,38)" fg:x="54" fg:w="3"/><text x="0.5200%" y="302.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.2700%" y="308" width="0.0150%" height="15" fill="rgb(235,168,5)" fg:x="54" fg:w="3"/><text x="0.5200%" y="318.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2750%" y="324" width="0.0100%" height="15" fill="rgb(221,155,16)" fg:x="55" fg:w="2"/><text x="0.5250%" y="334.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2750%" y="340" width="0.0100%" height="15" fill="rgb(215,215,53)" fg:x="55" fg:w="2"/><text x="0.5250%" y="350.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6 samples, 0.03%)</title><rect x="0.2650%" y="132" width="0.0300%" height="15" fill="rgb(223,4,10)" fg:x="53" fg:w="6"/><text x="0.5150%" y="142.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (6 samples, 0.03%)</title><rect x="0.2650%" y="148" width="0.0300%" height="15" fill="rgb(234,103,6)" fg:x="53" fg:w="6"/><text x="0.5150%" y="158.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (6 samples, 0.03%)</title><rect x="0.2650%" y="164" width="0.0300%" height="15" fill="rgb(227,97,0)" fg:x="53" fg:w="6"/><text x="0.5150%" y="174.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (6 samples, 0.03%)</title><rect x="0.2650%" y="180" width="0.0300%" height="15" fill="rgb(234,150,53)" fg:x="53" fg:w="6"/><text x="0.5150%" y="190.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (6 samples, 0.03%)</title><rect x="0.2650%" y="196" width="0.0300%" height="15" fill="rgb(228,201,54)" fg:x="53" fg:w="6"/><text x="0.5150%" y="206.50"></text></g><g><title>std::sys::unix::thread::truncate_cstr (2 samples, 0.01%)</title><rect x="0.2850%" y="212" width="0.0100%" height="15" fill="rgb(222,22,37)" fg:x="57" fg:w="2"/><text x="0.5350%" y="222.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="0.2850%" y="228" width="0.0100%" height="15" fill="rgb(237,53,32)" fg:x="57" fg:w="2"/><text x="0.5350%" y="238.50"></text></g><g><title>__GI___sigaltstack (2 samples, 0.01%)</title><rect x="0.2950%" y="164" width="0.0100%" height="15" fill="rgb(233,25,53)" fg:x="59" fg:w="2"/><text x="0.5450%" y="174.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2950%" y="180" width="0.0100%" height="15" fill="rgb(210,40,34)" fg:x="59" fg:w="2"/><text x="0.5450%" y="190.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="0.2950%" y="196" width="0.0100%" height="15" fill="rgb(241,220,44)" fg:x="59" fg:w="2"/><text x="0.5450%" y="206.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.01%)</title><rect x="0.3050%" y="164" width="0.0100%" height="15" fill="rgb(235,28,35)" fg:x="61" fg:w="2"/><text x="0.5550%" y="174.50"></text></g><g><title>__GI___mmap64 (15 samples, 0.08%)</title><rect x="0.3150%" y="196" width="0.0750%" height="15" fill="rgb(210,56,17)" fg:x="63" fg:w="15"/><text x="0.5650%" y="206.50"></text></g><g><title>__GI___mmap64 (14 samples, 0.07%)</title><rect x="0.3200%" y="212" width="0.0700%" height="15" fill="rgb(224,130,29)" fg:x="64" fg:w="14"/><text x="0.5700%" y="222.50"></text></g><g><title>[unknown] (14 samples, 0.07%)</title><rect x="0.3200%" y="228" width="0.0700%" height="15" fill="rgb(235,212,8)" fg:x="64" fg:w="14"/><text x="0.5700%" y="238.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="0.3250%" y="244" width="0.0650%" height="15" fill="rgb(223,33,50)" fg:x="65" fg:w="13"/><text x="0.5750%" y="254.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="0.3250%" y="260" width="0.0650%" height="15" fill="rgb(219,149,13)" fg:x="65" fg:w="13"/><text x="0.5750%" y="270.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="0.3250%" y="276" width="0.0650%" height="15" fill="rgb(250,156,29)" fg:x="65" fg:w="13"/><text x="0.5750%" y="286.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="0.3250%" y="292" width="0.0650%" height="15" fill="rgb(216,193,19)" fg:x="65" fg:w="13"/><text x="0.5750%" y="302.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="0.3250%" y="308" width="0.0650%" height="15" fill="rgb(216,135,14)" fg:x="65" fg:w="13"/><text x="0.5750%" y="318.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="0.3450%" y="324" width="0.0450%" height="15" fill="rgb(241,47,5)" fg:x="69" fg:w="9"/><text x="0.5950%" y="334.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="0.3500%" y="340" width="0.0400%" height="15" fill="rgb(233,42,35)" fg:x="70" fg:w="8"/><text x="0.6000%" y="350.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="0.3650%" y="356" width="0.0250%" height="15" fill="rgb(231,13,6)" fg:x="73" fg:w="5"/><text x="0.6150%" y="366.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3750%" y="372" width="0.0150%" height="15" fill="rgb(207,181,40)" fg:x="75" fg:w="3"/><text x="0.6250%" y="382.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.3750%" y="388" width="0.0150%" height="15" fill="rgb(254,173,49)" fg:x="75" fg:w="3"/><text x="0.6250%" y="398.50"></text></g><g><title>__GI___mprotect (10 samples, 0.05%)</title><rect x="0.3900%" y="196" width="0.0500%" height="15" fill="rgb(221,1,38)" fg:x="78" fg:w="10"/><text x="0.6400%" y="206.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.3900%" y="212" width="0.0500%" height="15" fill="rgb(206,124,46)" fg:x="78" fg:w="10"/><text x="0.6400%" y="222.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.3900%" y="228" width="0.0500%" height="15" fill="rgb(249,21,11)" fg:x="78" fg:w="10"/><text x="0.6400%" y="238.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.3900%" y="244" width="0.0500%" height="15" fill="rgb(222,201,40)" fg:x="78" fg:w="10"/><text x="0.6400%" y="254.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.3900%" y="260" width="0.0500%" height="15" fill="rgb(235,61,29)" fg:x="78" fg:w="10"/><text x="0.6400%" y="270.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.3900%" y="276" width="0.0500%" height="15" fill="rgb(219,207,3)" fg:x="78" fg:w="10"/><text x="0.6400%" y="286.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.3900%" y="292" width="0.0500%" height="15" fill="rgb(222,56,46)" fg:x="78" fg:w="10"/><text x="0.6400%" y="302.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="0.3900%" y="308" width="0.0500%" height="15" fill="rgb(239,76,54)" fg:x="78" fg:w="10"/><text x="0.6400%" y="318.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="0.4100%" y="324" width="0.0300%" height="15" fill="rgb(231,124,27)" fg:x="82" fg:w="6"/><text x="0.6600%" y="334.50"></text></g><g><title>__clone3 (60 samples, 0.30%)</title><rect x="0.1700%" y="84" width="0.3000%" height="15" fill="rgb(249,195,6)" fg:x="34" fg:w="60"/><text x="0.4200%" y="94.50"></text></g><g><title>start_thread (59 samples, 0.30%)</title><rect x="0.1750%" y="100" width="0.2950%" height="15" fill="rgb(237,174,47)" fg:x="35" fg:w="59"/><text x="0.4250%" y="110.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (41 samples, 0.21%)</title><rect x="0.2650%" y="116" width="0.2050%" height="15" fill="rgb(206,201,31)" fg:x="53" fg:w="41"/><text x="0.5150%" y="126.50"></text></g><g><title>std::sys::unix::stack_overflow::Handler::new (35 samples, 0.18%)</title><rect x="0.2950%" y="132" width="0.1750%" height="15" fill="rgb(231,57,52)" fg:x="59" fg:w="35"/><text x="0.5450%" y="142.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (35 samples, 0.18%)</title><rect x="0.2950%" y="148" width="0.1750%" height="15" fill="rgb(248,177,22)" fg:x="59" fg:w="35"/><text x="0.5450%" y="158.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (31 samples, 0.16%)</title><rect x="0.3150%" y="164" width="0.1550%" height="15" fill="rgb(215,211,37)" fg:x="63" fg:w="31"/><text x="0.5650%" y="174.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (31 samples, 0.16%)</title><rect x="0.3150%" y="180" width="0.1550%" height="15" fill="rgb(241,128,51)" fg:x="63" fg:w="31"/><text x="0.5650%" y="190.50"></text></g><g><title>std::sys::unix::os::page_size (6 samples, 0.03%)</title><rect x="0.4400%" y="196" width="0.0300%" height="15" fill="rgb(227,165,31)" fg:x="88" fg:w="6"/><text x="0.6900%" y="206.50"></text></g><g><title>__GI___sysconf (6 samples, 0.03%)</title><rect x="0.4400%" y="212" width="0.0300%" height="15" fill="rgb(228,167,24)" fg:x="88" fg:w="6"/><text x="0.6900%" y="222.50"></text></g><g><title>linux_sysconf (4 samples, 0.02%)</title><rect x="0.4500%" y="228" width="0.0200%" height="15" fill="rgb(228,143,12)" fg:x="90" fg:w="4"/><text x="0.7000%" y="238.50"></text></g><g><title>posix_sysconf (3 samples, 0.02%)</title><rect x="0.4550%" y="244" width="0.0150%" height="15" fill="rgb(249,149,8)" fg:x="91" fg:w="3"/><text x="0.7050%" y="254.50"></text></g><g><title>std::thread::Builder::spawn (2 samples, 0.01%)</title><rect x="0.4800%" y="500" width="0.0100%" height="15" fill="rgb(243,35,44)" fg:x="96" fg:w="2"/><text x="0.7300%" y="510.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (2 samples, 0.01%)</title><rect x="0.4800%" y="516" width="0.0100%" height="15" fill="rgb(246,89,9)" fg:x="96" fg:w="2"/><text x="0.7300%" y="526.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (2 samples, 0.01%)</title><rect x="0.4800%" y="532" width="0.0100%" height="15" fill="rgb(233,213,13)" fg:x="96" fg:w="2"/><text x="0.7300%" y="542.50"></text></g><g><title>__libc_start_main_impl (4 samples, 0.02%)</title><rect x="0.4750%" y="100" width="0.0200%" height="15" fill="rgb(233,141,41)" fg:x="95" fg:w="4"/><text x="0.7250%" y="110.50"></text></g><g><title>__libc_start_call_main (4 samples, 0.02%)</title><rect x="0.4750%" y="116" width="0.0200%" height="15" fill="rgb(239,167,4)" fg:x="95" fg:w="4"/><text x="0.7250%" y="126.50"></text></g><g><title>main (4 samples, 0.02%)</title><rect x="0.4750%" y="132" width="0.0200%" height="15" fill="rgb(209,217,16)" fg:x="95" fg:w="4"/><text x="0.7250%" y="142.50"></text></g><g><title>std::rt::lang_start_internal (4 samples, 0.02%)</title><rect x="0.4750%" y="148" width="0.0200%" height="15" fill="rgb(219,88,35)" fg:x="95" fg:w="4"/><text x="0.7250%" y="158.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.02%)</title><rect x="0.4750%" y="164" width="0.0200%" height="15" fill="rgb(220,193,23)" fg:x="95" fg:w="4"/><text x="0.7250%" y="174.50"></text></g><g><title>std::panicking::try (4 samples, 0.02%)</title><rect x="0.4750%" y="180" width="0.0200%" height="15" fill="rgb(230,90,52)" fg:x="95" fg:w="4"/><text x="0.7250%" y="190.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.02%)</title><rect x="0.4750%" y="196" width="0.0200%" height="15" fill="rgb(252,106,19)" fg:x="95" fg:w="4"/><text x="0.7250%" y="206.50"></text></g><g><title>std::rt::lang_start_internal::_{{closure}} (4 samples, 0.02%)</title><rect x="0.4750%" y="212" width="0.0200%" height="15" fill="rgb(206,74,20)" fg:x="95" fg:w="4"/><text x="0.7250%" y="222.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.02%)</title><rect x="0.4750%" y="228" width="0.0200%" height="15" fill="rgb(230,138,44)" fg:x="95" fg:w="4"/><text x="0.7250%" y="238.50"></text></g><g><title>std::panicking::try (4 samples, 0.02%)</title><rect x="0.4750%" y="244" width="0.0200%" height="15" fill="rgb(235,182,43)" fg:x="95" fg:w="4"/><text x="0.7250%" y="254.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.02%)</title><rect x="0.4750%" y="260" width="0.0200%" height="15" fill="rgb(242,16,51)" fg:x="95" fg:w="4"/><text x="0.7250%" y="270.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 0.02%)</title><rect x="0.4750%" y="276" width="0.0200%" height="15" fill="rgb(248,9,4)" fg:x="95" fg:w="4"/><text x="0.7250%" y="286.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (4 samples, 0.02%)</title><rect x="0.4750%" y="292" width="0.0200%" height="15" fill="rgb(210,31,22)" fg:x="95" fg:w="4"/><text x="0.7250%" y="302.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.02%)</title><rect x="0.4750%" y="308" width="0.0200%" height="15" fill="rgb(239,54,39)" fg:x="95" fg:w="4"/><text x="0.7250%" y="318.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.02%)</title><rect x="0.4750%" y="324" width="0.0200%" height="15" fill="rgb(230,99,41)" fg:x="95" fg:w="4"/><text x="0.7250%" y="334.50"></text></g><g><title>rust_axum::main (4 samples, 0.02%)</title><rect x="0.4750%" y="340" width="0.0200%" height="15" fill="rgb(253,106,12)" fg:x="95" fg:w="4"/><text x="0.7250%" y="350.50"></text></g><g><title>tokio::runtime::builder::Builder::build (4 samples, 0.02%)</title><rect x="0.4750%" y="356" width="0.0200%" height="15" fill="rgb(213,46,41)" fg:x="95" fg:w="4"/><text x="0.7250%" y="366.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (4 samples, 0.02%)</title><rect x="0.4750%" y="372" width="0.0200%" height="15" fill="rgb(215,133,35)" fg:x="95" fg:w="4"/><text x="0.7250%" y="382.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (3 samples, 0.02%)</title><rect x="0.4800%" y="388" width="0.0150%" height="15" fill="rgb(213,28,5)" fg:x="96" fg:w="3"/><text x="0.7300%" y="398.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (3 samples, 0.02%)</title><rect x="0.4800%" y="404" width="0.0150%" height="15" fill="rgb(215,77,49)" fg:x="96" fg:w="3"/><text x="0.7300%" y="414.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (3 samples, 0.02%)</title><rect x="0.4800%" y="420" width="0.0150%" height="15" fill="rgb(248,100,22)" fg:x="96" fg:w="3"/><text x="0.7300%" y="430.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (3 samples, 0.02%)</title><rect x="0.4800%" y="436" width="0.0150%" height="15" fill="rgb(208,67,9)" fg:x="96" fg:w="3"/><text x="0.7300%" y="446.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (3 samples, 0.02%)</title><rect x="0.4800%" y="452" width="0.0150%" height="15" fill="rgb(219,133,21)" fg:x="96" fg:w="3"/><text x="0.7300%" y="462.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (3 samples, 0.02%)</title><rect x="0.4800%" y="468" width="0.0150%" height="15" fill="rgb(246,46,29)" fg:x="96" fg:w="3"/><text x="0.7300%" y="478.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (3 samples, 0.02%)</title><rect x="0.4800%" y="484" width="0.0150%" height="15" fill="rgb(246,185,52)" fg:x="96" fg:w="3"/><text x="0.7300%" y="494.50"></text></g><g><title>_dl_start_final (2 samples, 0.01%)</title><rect x="0.5001%" y="116" width="0.0100%" height="15" fill="rgb(252,136,11)" fg:x="100" fg:w="2"/><text x="0.7501%" y="126.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.01%)</title><rect x="0.5001%" y="132" width="0.0100%" height="15" fill="rgb(219,138,53)" fg:x="100" fg:w="2"/><text x="0.7501%" y="142.50"></text></g><g><title>elf_dynamic_do_Rela (2 samples, 0.01%)</title><rect x="0.5101%" y="116" width="0.0100%" height="15" fill="rgb(211,51,23)" fg:x="102" fg:w="2"/><text x="0.7601%" y="126.50"></text></g><g><title>rust-axum (105 samples, 0.53%)</title><rect x="0.0000%" y="68" width="0.5251%" height="15" fill="rgb(247,221,28)" fg:x="0" fg:w="105"/><text x="0.2500%" y="78.50"></text></g><g><title>_start (11 samples, 0.06%)</title><rect x="0.4700%" y="84" width="0.0550%" height="15" fill="rgb(251,222,45)" fg:x="94" fg:w="11"/><text x="0.7200%" y="94.50"></text></g><g><title>_dl_start (6 samples, 0.03%)</title><rect x="0.4950%" y="100" width="0.0300%" height="15" fill="rgb(217,162,53)" fg:x="99" fg:w="6"/><text x="0.7450%" y="110.50"></text></g><g><title>__libc_recv (3 samples, 0.02%)</title><rect x="0.5301%" y="100" width="0.0150%" height="15" fill="rgb(229,93,14)" fg:x="106" fg:w="3"/><text x="0.7801%" y="110.50"></text></g><g><title>__libc_recv (3 samples, 0.02%)</title><rect x="0.5301%" y="116" width="0.0150%" height="15" fill="rgb(209,67,49)" fg:x="106" fg:w="3"/><text x="0.7801%" y="126.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.5301%" y="132" width="0.0150%" height="15" fill="rgb(213,87,29)" fg:x="106" fg:w="3"/><text x="0.7801%" y="142.50"></text></g><g><title>[[heap]] (7 samples, 0.04%)</title><rect x="0.5251%" y="84" width="0.0350%" height="15" fill="rgb(205,151,52)" fg:x="105" fg:w="7"/><text x="0.7751%" y="94.50"></text></g><g><title>syscall (3 samples, 0.02%)</title><rect x="0.5451%" y="100" width="0.0150%" height="15" fill="rgb(253,215,39)" fg:x="109" fg:w="3"/><text x="0.7951%" y="110.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="0.5451%" y="116" width="0.0150%" height="15" fill="rgb(221,220,41)" fg:x="109" fg:w="3"/><text x="0.7951%" y="126.50"></text></g><g><title>[anon] (5 samples, 0.03%)</title><rect x="0.5601%" y="84" width="0.0250%" height="15" fill="rgb(218,133,21)" fg:x="112" fg:w="5"/><text x="0.8101%" y="94.50"></text></g><g><title>__libc_recv (4 samples, 0.02%)</title><rect x="0.5651%" y="100" width="0.0200%" height="15" fill="rgb(221,193,43)" fg:x="113" fg:w="4"/><text x="0.8151%" y="110.50"></text></g><g><title>__libc_recv (4 samples, 0.02%)</title><rect x="0.5651%" y="116" width="0.0200%" height="15" fill="rgb(240,128,52)" fg:x="113" fg:w="4"/><text x="0.8151%" y="126.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="0.5651%" y="132" width="0.0200%" height="15" fill="rgb(253,114,12)" fg:x="113" fg:w="4"/><text x="0.8151%" y="142.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.04%)</title><rect x="0.7001%" y="324" width="0.0350%" height="15" fill="rgb(215,223,47)" fg:x="140" fg:w="7"/><text x="0.9501%" y="334.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.04%)</title><rect x="0.7401%" y="340" width="0.0350%" height="15" fill="rgb(248,225,23)" fg:x="148" fg:w="7"/><text x="0.9901%" y="350.50"></text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="0.8401%" y="516" width="0.0250%" height="15" fill="rgb(250,108,0)" fg:x="168" fg:w="5"/><text x="1.0901%" y="526.50"></text></g><g><title>__posix_memalign (33 samples, 0.17%)</title><rect x="0.7901%" y="452" width="0.1650%" height="15" fill="rgb(228,208,7)" fg:x="158" fg:w="33"/><text x="1.0401%" y="462.50"></text></g><g><title>__posix_memalign (30 samples, 0.15%)</title><rect x="0.8051%" y="468" width="0.1500%" height="15" fill="rgb(244,45,10)" fg:x="161" fg:w="30"/><text x="1.0551%" y="478.50"></text></g><g><title>_mid_memalign (30 samples, 0.15%)</title><rect x="0.8051%" y="484" width="0.1500%" height="15" fill="rgb(207,125,25)" fg:x="161" fg:w="30"/><text x="1.0551%" y="494.50"></text></g><g><title>_int_memalign (27 samples, 0.14%)</title><rect x="0.8201%" y="500" width="0.1350%" height="15" fill="rgb(210,195,18)" fg:x="164" fg:w="27"/><text x="1.0701%" y="510.50"></text></g><g><title>_int_malloc (18 samples, 0.09%)</title><rect x="0.8651%" y="516" width="0.0900%" height="15" fill="rgb(249,80,12)" fg:x="173" fg:w="18"/><text x="1.1151%" y="526.50"></text></g><g><title>malloc_consolidate (10 samples, 0.05%)</title><rect x="0.9051%" y="532" width="0.0500%" height="15" fill="rgb(221,65,9)" fg:x="181" fg:w="10"/><text x="1.1551%" y="542.50"></text></g><g><title>__rdl_alloc (35 samples, 0.18%)</title><rect x="0.7851%" y="404" width="0.1750%" height="15" fill="rgb(235,49,36)" fg:x="157" fg:w="35"/><text x="1.0351%" y="414.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (34 samples, 0.17%)</title><rect x="0.7901%" y="420" width="0.1700%" height="15" fill="rgb(225,32,20)" fg:x="158" fg:w="34"/><text x="1.0401%" y="430.50"></text></g><g><title>std::sys::unix::alloc::aligned_malloc (34 samples, 0.17%)</title><rect x="0.7901%" y="436" width="0.1700%" height="15" fill="rgb(215,141,46)" fg:x="158" fg:w="34"/><text x="1.0401%" y="446.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}} (57 samples, 0.29%)</title><rect x="0.6801%" y="100" width="0.2850%" height="15" fill="rgb(250,160,47)" fg:x="136" fg:w="57"/><text x="0.9301%" y="110.50"></text></g><g><title>rust_axum::read_users::_{{closure}} (56 samples, 0.28%)</title><rect x="0.6851%" y="116" width="0.2800%" height="15" fill="rgb(216,222,40)" fg:x="137" fg:w="56"/><text x="0.9351%" y="126.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;&gt; (56 samples, 0.28%)</title><rect x="0.6851%" y="132" width="0.2800%" height="15" fill="rgb(234,217,39)" fg:x="137" fg:w="56"/><text x="0.9351%" y="142.50"></text></g><g><title>&lt;sqlx_core::pool::connection::PoolConnection&lt;DB&gt; as core::ops::drop::Drop&gt;::drop (56 samples, 0.28%)</title><rect x="0.6851%" y="148" width="0.2800%" height="15" fill="rgb(207,178,40)" fg:x="137" fg:w="56"/><text x="0.9351%" y="158.50"></text></g><g><title>sqlx_core::rt::spawn (56 samples, 0.28%)</title><rect x="0.6851%" y="164" width="0.2800%" height="15" fill="rgb(221,136,13)" fg:x="137" fg:w="56"/><text x="0.9351%" y="174.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn (56 samples, 0.28%)</title><rect x="0.6851%" y="180" width="0.2800%" height="15" fill="rgb(249,199,10)" fg:x="137" fg:w="56"/><text x="0.9351%" y="190.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_named (56 samples, 0.28%)</title><rect x="0.6851%" y="196" width="0.2800%" height="15" fill="rgb(249,222,13)" fg:x="137" fg:w="56"/><text x="0.9351%" y="206.50"></text></g><g><title>tokio::runtime::scheduler::Handle::spawn (56 samples, 0.28%)</title><rect x="0.6851%" y="212" width="0.2800%" height="15" fill="rgb(244,185,38)" fg:x="137" fg:w="56"/><text x="0.9351%" y="222.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::spawn (56 samples, 0.28%)</title><rect x="0.6851%" y="228" width="0.2800%" height="15" fill="rgb(236,202,9)" fg:x="137" fg:w="56"/><text x="0.9351%" y="238.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (56 samples, 0.28%)</title><rect x="0.6851%" y="244" width="0.2800%" height="15" fill="rgb(250,229,37)" fg:x="137" fg:w="56"/><text x="0.9351%" y="254.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (56 samples, 0.28%)</title><rect x="0.6851%" y="260" width="0.2800%" height="15" fill="rgb(206,174,23)" fg:x="137" fg:w="56"/><text x="0.9351%" y="270.50"></text></g><g><title>tokio::runtime::task::new_task (56 samples, 0.28%)</title><rect x="0.6851%" y="276" width="0.2800%" height="15" fill="rgb(211,33,43)" fg:x="137" fg:w="56"/><text x="0.9351%" y="286.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (56 samples, 0.28%)</title><rect x="0.6851%" y="292" width="0.2800%" height="15" fill="rgb(245,58,50)" fg:x="137" fg:w="56"/><text x="0.9351%" y="302.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (56 samples, 0.28%)</title><rect x="0.6851%" y="308" width="0.2800%" height="15" fill="rgb(244,68,36)" fg:x="137" fg:w="56"/><text x="0.9351%" y="318.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (45 samples, 0.23%)</title><rect x="0.7401%" y="324" width="0.2250%" height="15" fill="rgb(232,229,15)" fg:x="148" fg:w="45"/><text x="0.9901%" y="334.50"></text></g><g><title>alloc::alloc::exchange_malloc (37 samples, 0.19%)</title><rect x="0.7801%" y="340" width="0.1850%" height="15" fill="rgb(254,30,23)" fg:x="156" fg:w="37"/><text x="1.0301%" y="350.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.19%)</title><rect x="0.7801%" y="356" width="0.1850%" height="15" fill="rgb(235,160,14)" fg:x="156" fg:w="37"/><text x="1.0301%" y="366.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.19%)</title><rect x="0.7801%" y="372" width="0.1850%" height="15" fill="rgb(212,155,44)" fg:x="156" fg:w="37"/><text x="1.0301%" y="382.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.19%)</title><rect x="0.7801%" y="388" width="0.1850%" height="15" fill="rgb(226,2,50)" fg:x="156" fg:w="37"/><text x="1.0301%" y="398.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="1.0101%" y="148" width="0.0150%" height="15" fill="rgb(234,177,6)" fg:x="202" fg:w="3"/><text x="1.2601%" y="158.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::Pool&lt;sqlx_postgres::database::Postgres&gt;::acquire::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="1.0351%" y="148" width="0.0100%" height="15" fill="rgb(217,24,9)" fg:x="207" fg:w="2"/><text x="1.2851%" y="158.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="1.0501%" y="148" width="0.0100%" height="15" fill="rgb(220,13,46)" fg:x="210" fg:w="2"/><text x="1.3001%" y="158.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.01%)</title><rect x="1.0701%" y="164" width="0.0100%" height="15" fill="rgb(239,221,27)" fg:x="214" fg:w="2"/><text x="1.3201%" y="174.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="1.0701%" y="180" width="0.0100%" height="15" fill="rgb(222,198,25)" fg:x="214" fg:w="2"/><text x="1.3201%" y="190.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="1.0851%" y="180" width="0.0150%" height="15" fill="rgb(211,99,13)" fg:x="217" fg:w="3"/><text x="1.3351%" y="190.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="1.0851%" y="196" width="0.0150%" height="15" fill="rgb(232,111,31)" fg:x="217" fg:w="3"/><text x="1.3351%" y="206.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (6 samples, 0.03%)</title><rect x="1.1351%" y="196" width="0.0300%" height="15" fill="rgb(245,82,37)" fg:x="227" fg:w="6"/><text x="1.3851%" y="206.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.03%)</title><rect x="1.1351%" y="212" width="0.0300%" height="15" fill="rgb(227,149,46)" fg:x="227" fg:w="6"/><text x="1.3851%" y="222.50"></text></g><g><title>tokio::runtime::time::Inner::lock (6 samples, 0.03%)</title><rect x="1.1901%" y="292" width="0.0300%" height="15" fill="rgb(218,36,50)" fg:x="238" fg:w="6"/><text x="1.4401%" y="302.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (6 samples, 0.03%)</title><rect x="1.1901%" y="308" width="0.0300%" height="15" fill="rgb(226,80,48)" fg:x="238" fg:w="6"/><text x="1.4401%" y="318.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.03%)</title><rect x="1.1901%" y="324" width="0.0300%" height="15" fill="rgb(238,224,15)" fg:x="238" fg:w="6"/><text x="1.4401%" y="334.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.03%)</title><rect x="1.1901%" y="340" width="0.0300%" height="15" fill="rgb(241,136,10)" fg:x="238" fg:w="6"/><text x="1.4401%" y="350.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_for (2 samples, 0.01%)</title><rect x="1.2201%" y="324" width="0.0100%" height="15" fill="rgb(208,32,45)" fg:x="244" fg:w="2"/><text x="1.4701%" y="334.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::reregister (10 samples, 0.05%)</title><rect x="1.1851%" y="276" width="0.0500%" height="15" fill="rgb(207,135,9)" fg:x="237" fg:w="10"/><text x="1.4351%" y="286.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::insert (3 samples, 0.02%)</title><rect x="1.2201%" y="292" width="0.0150%" height="15" fill="rgb(206,86,44)" fg:x="244" fg:w="3"/><text x="1.4701%" y="302.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::add_entry (3 samples, 0.02%)</title><rect x="1.2201%" y="308" width="0.0150%" height="15" fill="rgb(245,177,15)" fg:x="244" fg:w="3"/><text x="1.4701%" y="318.50"></text></g><g><title>tokio::runtime::time::entry::StateCell::poll (8 samples, 0.04%)</title><rect x="1.2351%" y="276" width="0.0400%" height="15" fill="rgb(206,64,50)" fg:x="247" fg:w="8"/><text x="1.4851%" y="286.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref (8 samples, 0.04%)</title><rect x="1.2351%" y="292" width="0.0400%" height="15" fill="rgb(234,36,40)" fg:x="247" fg:w="8"/><text x="1.4851%" y="302.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register (5 samples, 0.03%)</title><rect x="1.2501%" y="308" width="0.0250%" height="15" fill="rgb(213,64,8)" fg:x="250" fg:w="5"/><text x="1.5001%" y="318.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind (2 samples, 0.01%)</title><rect x="1.2651%" y="324" width="0.0100%" height="15" fill="rgb(210,75,36)" fg:x="253" fg:w="2"/><text x="1.5151%" y="334.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.01%)</title><rect x="1.2651%" y="340" width="0.0100%" height="15" fill="rgb(229,88,21)" fg:x="253" fg:w="2"/><text x="1.5151%" y="350.50"></text></g><g><title>std::panicking::try (2 samples, 0.01%)</title><rect x="1.2651%" y="356" width="0.0100%" height="15" fill="rgb(252,204,47)" fg:x="253" fg:w="2"/><text x="1.5151%" y="366.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.01%)</title><rect x="1.2651%" y="372" width="0.0100%" height="15" fill="rgb(208,77,27)" fg:x="253" fg:w="2"/><text x="1.5151%" y="382.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2 samples, 0.01%)</title><rect x="1.2651%" y="388" width="0.0100%" height="15" fill="rgb(221,76,26)" fg:x="253" fg:w="2"/><text x="1.5151%" y="398.50"></text></g><g><title>tokio::sync::task::atomic_waker::AtomicWaker::do_register::_{{closure}} (2 samples, 0.01%)</title><rect x="1.2651%" y="404" width="0.0100%" height="15" fill="rgb(225,139,18)" fg:x="253" fg:w="2"/><text x="1.5151%" y="414.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::driver (2 samples, 0.01%)</title><rect x="1.2751%" y="276" width="0.0100%" height="15" fill="rgb(230,137,11)" fg:x="255" fg:w="2"/><text x="1.5251%" y="286.50"></text></g><g><title>tokio::runtime::scheduler::Handle::driver (2 samples, 0.01%)</title><rect x="1.2751%" y="292" width="0.0100%" height="15" fill="rgb(212,28,1)" fg:x="255" fg:w="2"/><text x="1.5251%" y="302.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll::_{{closure}} (29 samples, 0.15%)</title><rect x="1.1701%" y="212" width="0.1450%" height="15" fill="rgb(248,164,17)" fg:x="234" fg:w="29"/><text x="1.4201%" y="222.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (29 samples, 0.15%)</title><rect x="1.1701%" y="228" width="0.1450%" height="15" fill="rgb(222,171,42)" fg:x="234" fg:w="29"/><text x="1.4201%" y="238.50"></text></g><g><title>tokio::time::sleep::Sleep::poll_elapsed (27 samples, 0.14%)</title><rect x="1.1801%" y="244" width="0.1350%" height="15" fill="rgb(243,84,45)" fg:x="236" fg:w="27"/><text x="1.4301%" y="254.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::poll_elapsed (27 samples, 0.14%)</title><rect x="1.1801%" y="260" width="0.1350%" height="15" fill="rgb(252,49,23)" fg:x="236" fg:w="27"/><text x="1.4301%" y="270.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (6 samples, 0.03%)</title><rect x="1.2851%" y="276" width="0.0300%" height="15" fill="rgb(215,19,7)" fg:x="257" fg:w="6"/><text x="1.5351%" y="286.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::deadline_to_tick (4 samples, 0.02%)</title><rect x="1.2951%" y="292" width="0.0200%" height="15" fill="rgb(238,81,41)" fg:x="259" fg:w="4"/><text x="1.5451%" y="302.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (3 samples, 0.02%)</title><rect x="1.3001%" y="308" width="0.0150%" height="15" fill="rgb(210,199,37)" fg:x="260" fg:w="3"/><text x="1.5501%" y="318.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (3 samples, 0.02%)</title><rect x="1.3001%" y="324" width="0.0150%" height="15" fill="rgb(244,192,49)" fg:x="260" fg:w="3"/><text x="1.5501%" y="334.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.02%)</title><rect x="1.3001%" y="340" width="0.0150%" height="15" fill="rgb(226,211,11)" fg:x="260" fg:w="3"/><text x="1.5501%" y="350.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (3 samples, 0.02%)</title><rect x="1.3001%" y="356" width="0.0150%" height="15" fill="rgb(236,162,54)" fg:x="260" fg:w="3"/><text x="1.5501%" y="366.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.01%)</title><rect x="1.3051%" y="372" width="0.0100%" height="15" fill="rgb(220,229,9)" fg:x="261" fg:w="2"/><text x="1.5551%" y="382.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="1.3201%" y="212" width="0.0150%" height="15" fill="rgb(250,87,22)" fg:x="264" fg:w="3"/><text x="1.5701%" y="222.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (38 samples, 0.19%)</title><rect x="1.1651%" y="196" width="0.1900%" height="15" fill="rgb(239,43,17)" fg:x="233" fg:w="38"/><text x="1.4151%" y="206.50"></text></g><g><title>tokio::runtime::coop::has_budget_remaining (3 samples, 0.02%)</title><rect x="1.3401%" y="212" width="0.0150%" height="15" fill="rgb(231,177,25)" fg:x="268" fg:w="3"/><text x="1.5901%" y="222.50"></text></g><g><title>tokio::runtime::context::budget (3 samples, 0.02%)</title><rect x="1.3401%" y="228" width="0.0150%" height="15" fill="rgb(219,179,1)" fg:x="268" fg:w="3"/><text x="1.5901%" y="238.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.02%)</title><rect x="1.3401%" y="244" width="0.0150%" height="15" fill="rgb(238,219,53)" fg:x="268" fg:w="3"/><text x="1.5901%" y="254.50"></text></g><g><title>tokio::runtime::context::budget::_{{closure}} (3 samples, 0.02%)</title><rect x="1.3401%" y="260" width="0.0150%" height="15" fill="rgb(232,167,36)" fg:x="268" fg:w="3"/><text x="1.5901%" y="270.50"></text></g><g><title>tokio::runtime::coop::has_budget_remaining::_{{closure}} (3 samples, 0.02%)</title><rect x="1.3401%" y="276" width="0.0150%" height="15" fill="rgb(244,19,51)" fg:x="268" fg:w="3"/><text x="1.5901%" y="286.50"></text></g><g><title>tokio::runtime::coop::Budget::has_remaining (2 samples, 0.01%)</title><rect x="1.3451%" y="292" width="0.0100%" height="15" fill="rgb(224,6,22)" fg:x="269" fg:w="2"/><text x="1.5951%" y="302.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.01%)</title><rect x="1.3451%" y="308" width="0.0100%" height="15" fill="rgb(224,145,5)" fg:x="269" fg:w="2"/><text x="1.5951%" y="318.50"></text></g><g><title>__memcpy_avx_unaligned_erms (13 samples, 0.07%)</title><rect x="1.3551%" y="196" width="0.0650%" height="15" fill="rgb(234,130,49)" fg:x="271" fg:w="13"/><text x="1.6051%" y="206.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (2 samples, 0.01%)</title><rect x="1.4451%" y="244" width="0.0100%" height="15" fill="rgb(254,6,2)" fg:x="289" fg:w="2"/><text x="1.6951%" y="254.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt; (2 samples, 0.01%)</title><rect x="1.4451%" y="260" width="0.0100%" height="15" fill="rgb(208,96,46)" fg:x="289" fg:w="2"/><text x="1.6951%" y="270.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="1.4451%" y="276" width="0.0100%" height="15" fill="rgb(239,3,39)" fg:x="289" fg:w="2"/><text x="1.6951%" y="286.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (2 samples, 0.01%)</title><rect x="1.4551%" y="260" width="0.0100%" height="15" fill="rgb(233,210,1)" fg:x="291" fg:w="2"/><text x="1.7051%" y="270.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::timeout::Timeout&lt;sqlx_core::pool::inner::PoolInner&lt;sqlx_postgres::database::Postgres&gt;::acquire::{{closure}}::{{closure}}&gt;&gt; (9 samples, 0.05%)</title><rect x="1.4251%" y="196" width="0.0450%" height="15" fill="rgb(244,137,37)" fg:x="285" fg:w="9"/><text x="1.6751%" y="206.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::time::sleep::Sleep&gt; (7 samples, 0.04%)</title><rect x="1.4351%" y="212" width="0.0350%" height="15" fill="rgb(240,136,2)" fg:x="287" fg:w="7"/><text x="1.6851%" y="222.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::time::entry::TimerEntry&gt; (6 samples, 0.03%)</title><rect x="1.4401%" y="228" width="0.0300%" height="15" fill="rgb(239,18,37)" fg:x="288" fg:w="6"/><text x="1.6901%" y="238.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::clear_entry (3 samples, 0.02%)</title><rect x="1.4551%" y="244" width="0.0150%" height="15" fill="rgb(218,185,22)" fg:x="291" fg:w="3"/><text x="1.7051%" y="254.50"></text></g><g><title>sqlx_core::rt::rt_tokio::available (9 samples, 0.05%)</title><rect x="1.4701%" y="196" width="0.0450%" height="15" fill="rgb(225,218,4)" fg:x="294" fg:w="9"/><text x="1.7201%" y="206.50"></text></g><g><title>tokio::runtime::handle::Handle::try_current (7 samples, 0.04%)</title><rect x="1.4801%" y="212" width="0.0350%" height="15" fill="rgb(230,182,32)" fg:x="296" fg:w="7"/><text x="1.7301%" y="222.50"></text></g><g><title>tokio::runtime::context::current::with_current (4 samples, 0.02%)</title><rect x="1.4951%" y="228" width="0.0200%" height="15" fill="rgb(242,56,43)" fg:x="299" fg:w="4"/><text x="1.7451%" y="238.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.02%)</title><rect x="1.5002%" y="244" width="0.0150%" height="15" fill="rgb(233,99,24)" fg:x="300" fg:w="3"/><text x="1.7502%" y="254.50"></text></g><g><title>tokio::runtime::context::current::with_current::_{{closure}} (3 samples, 0.02%)</title><rect x="1.5002%" y="260" width="0.0150%" height="15" fill="rgb(234,209,42)" fg:x="300" fg:w="3"/><text x="1.7502%" y="270.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="1.5002%" y="276" width="0.0150%" height="15" fill="rgb(227,7,12)" fg:x="300" fg:w="3"/><text x="1.7502%" y="286.50"></text></g><g><title>tokio::runtime::handle::Handle::try_current::_{{closure}} (3 samples, 0.02%)</title><rect x="1.5002%" y="292" width="0.0150%" height="15" fill="rgb(245,203,43)" fg:x="300" fg:w="3"/><text x="1.7502%" y="302.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="1.5002%" y="308" width="0.0150%" height="15" fill="rgb(238,205,33)" fg:x="300" fg:w="3"/><text x="1.7502%" y="318.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.02%)</title><rect x="1.5252%" y="212" width="0.0200%" height="15" fill="rgb(231,56,7)" fg:x="305" fg:w="4"/><text x="1.7752%" y="222.50"></text></g><g><title>tokio::time::instant::Instant::checked_add (3 samples, 0.02%)</title><rect x="1.5552%" y="212" width="0.0150%" height="15" fill="rgb(244,186,29)" fg:x="311" fg:w="3"/><text x="1.8052%" y="222.50"></text></g><g><title>std::time::SystemTime::checked_add (3 samples, 0.02%)</title><rect x="1.5552%" y="228" width="0.0150%" height="15" fill="rgb(234,111,31)" fg:x="311" fg:w="3"/><text x="1.8052%" y="238.50"></text></g><g><title>tokio::runtime::scheduler::Handle::current (6 samples, 0.03%)</title><rect x="1.6002%" y="228" width="0.0300%" height="15" fill="rgb(241,149,10)" fg:x="320" fg:w="6"/><text x="1.8502%" y="238.50"></text></g><g><title>sqlx_core::rt::timeout::_{{closure}} (108 samples, 0.54%)</title><rect x="1.1001%" y="180" width="0.5401%" height="15" fill="rgb(249,206,44)" fg:x="220" fg:w="108"/><text x="1.3501%" y="190.50"></text></g><g><title>tokio::time::timeout::timeout (25 samples, 0.13%)</title><rect x="1.5152%" y="196" width="0.1250%" height="15" fill="rgb(251,153,30)" fg:x="303" fg:w="25"/><text x="1.7652%" y="206.50"></text></g><g><title>tokio::time::sleep::Sleep::new_timeout (14 samples, 0.07%)</title><rect x="1.5702%" y="212" width="0.0700%" height="15" fill="rgb(239,152,38)" fg:x="314" fg:w="14"/><text x="1.8202%" y="222.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::new (2 samples, 0.01%)</title><rect x="1.6302%" y="228" width="0.0100%" height="15" fill="rgb(249,139,47)" fg:x="326" fg:w="2"/><text x="1.8802%" y="238.50"></text></g><g><title>tokio::runtime::driver::Handle::time (2 samples, 0.01%)</title><rect x="1.6302%" y="244" width="0.0100%" height="15" fill="rgb(244,64,35)" fg:x="326" fg:w="2"/><text x="1.8802%" y="254.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (2 samples, 0.01%)</title><rect x="1.6302%" y="260" width="0.0100%" height="15" fill="rgb(216,46,15)" fg:x="326" fg:w="2"/><text x="1.8802%" y="270.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (5 samples, 0.03%)</title><rect x="1.6402%" y="180" width="0.0250%" height="15" fill="rgb(250,74,19)" fg:x="328" fg:w="5"/><text x="1.8902%" y="190.50"></text></g><g><title>__GI___clock_gettime (3 samples, 0.02%)</title><rect x="1.6502%" y="196" width="0.0150%" height="15" fill="rgb(249,42,33)" fg:x="330" fg:w="3"/><text x="1.9002%" y="206.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="1.6552%" y="212" width="0.0100%" height="15" fill="rgb(242,149,17)" fg:x="331" fg:w="2"/><text x="1.9052%" y="222.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="1.6552%" y="228" width="0.0100%" height="15" fill="rgb(244,29,21)" fg:x="331" fg:w="2"/><text x="1.9052%" y="238.50"></text></g><g><title>&lt;T as axum_core::extract::FromRequest&lt;S,B,axum_core::extract::private::ViaParts&gt;&gt;::from_request::_{{closure}} (141 samples, 0.71%)</title><rect x="0.9651%" y="100" width="0.7051%" height="15" fill="rgb(220,130,37)" fg:x="193" fg:w="141"/><text x="1.2151%" y="110.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (141 samples, 0.71%)</title><rect x="0.9651%" y="116" width="0.7051%" height="15" fill="rgb(211,67,2)" fg:x="193" fg:w="141"/><text x="1.2151%" y="126.50"></text></g><g><title>&lt;rust_axum::DatabaseConnection as axum_core::extract::FromRequestParts&lt;S&gt;&gt;::from_request_parts::_{{closure}} (141 samples, 0.71%)</title><rect x="0.9651%" y="132" width="0.7051%" height="15" fill="rgb(235,68,52)" fg:x="193" fg:w="141"/><text x="1.2151%" y="142.50"></text></g><g><title>sqlx_core::pool::Pool&lt;DB&gt;::acquire::_{{closure}} (122 samples, 0.61%)</title><rect x="1.0601%" y="148" width="0.6101%" height="15" fill="rgb(246,142,3)" fg:x="212" fg:w="122"/><text x="1.3101%" y="158.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::acquire::_{{closure}} (118 samples, 0.59%)</title><rect x="1.0801%" y="164" width="0.5901%" height="15" fill="rgb(241,25,7)" fg:x="216" fg:w="118"/><text x="1.3301%" y="174.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (3 samples, 0.02%)</title><rect x="1.6902%" y="804" width="0.0150%" height="15" fill="rgb(242,119,39)" fg:x="338" fg:w="3"/><text x="1.9402%" y="814.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (8 samples, 0.04%)</title><rect x="1.6702%" y="756" width="0.0400%" height="15" fill="rgb(241,98,45)" fg:x="334" fg:w="8"/><text x="1.9202%" y="766.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_read::AsyncRead&gt;::poll_read (8 samples, 0.04%)</title><rect x="1.6702%" y="772" width="0.0400%" height="15" fill="rgb(254,28,30)" fg:x="334" fg:w="8"/><text x="1.9202%" y="782.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (8 samples, 0.04%)</title><rect x="1.6702%" y="788" width="0.0400%" height="15" fill="rgb(241,142,54)" fg:x="334" fg:w="8"/><text x="1.9202%" y="798.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9 samples, 0.05%)</title><rect x="1.6702%" y="100" width="0.0450%" height="15" fill="rgb(222,85,15)" fg:x="334" fg:w="9"/><text x="1.9202%" y="110.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="116" width="0.0450%" height="15" fill="rgb(210,85,47)" fg:x="334" fg:w="9"/><text x="1.9202%" y="126.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="132" width="0.0450%" height="15" fill="rgb(224,206,25)" fg:x="334" fg:w="9"/><text x="1.9202%" y="142.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (9 samples, 0.05%)</title><rect x="1.6702%" y="148" width="0.0450%" height="15" fill="rgb(243,201,19)" fg:x="334" fg:w="9"/><text x="1.9202%" y="158.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="164" width="0.0450%" height="15" fill="rgb(236,59,4)" fg:x="334" fg:w="9"/><text x="1.9202%" y="174.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="180" width="0.0450%" height="15" fill="rgb(254,179,45)" fg:x="334" fg:w="9"/><text x="1.9202%" y="190.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="196" width="0.0450%" height="15" fill="rgb(226,14,10)" fg:x="334" fg:w="9"/><text x="1.9202%" y="206.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (9 samples, 0.05%)</title><rect x="1.6702%" y="212" width="0.0450%" height="15" fill="rgb(244,27,41)" fg:x="334" fg:w="9"/><text x="1.9202%" y="222.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (9 samples, 0.05%)</title><rect x="1.6702%" y="228" width="0.0450%" height="15" fill="rgb(235,35,32)" fg:x="334" fg:w="9"/><text x="1.9202%" y="238.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="244" width="0.0450%" height="15" fill="rgb(218,68,31)" fg:x="334" fg:w="9"/><text x="1.9202%" y="254.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (9 samples, 0.05%)</title><rect x="1.6702%" y="260" width="0.0450%" height="15" fill="rgb(207,120,37)" fg:x="334" fg:w="9"/><text x="1.9202%" y="270.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="276" width="0.0450%" height="15" fill="rgb(227,98,0)" fg:x="334" fg:w="9"/><text x="1.9202%" y="286.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (9 samples, 0.05%)</title><rect x="1.6702%" y="292" width="0.0450%" height="15" fill="rgb(207,7,3)" fg:x="334" fg:w="9"/><text x="1.9202%" y="302.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (9 samples, 0.05%)</title><rect x="1.6702%" y="308" width="0.0450%" height="15" fill="rgb(206,98,19)" fg:x="334" fg:w="9"/><text x="1.9202%" y="318.50"></text></g><g><title>tokio::runtime::coop::budget (9 samples, 0.05%)</title><rect x="1.6702%" y="324" width="0.0450%" height="15" fill="rgb(217,5,26)" fg:x="334" fg:w="9"/><text x="1.9202%" y="334.50"></text></g><g><title>tokio::runtime::coop::with_budget (9 samples, 0.05%)</title><rect x="1.6702%" y="340" width="0.0450%" height="15" fill="rgb(235,190,38)" fg:x="334" fg:w="9"/><text x="1.9202%" y="350.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="356" width="0.0450%" height="15" fill="rgb(247,86,24)" fg:x="334" fg:w="9"/><text x="1.9202%" y="366.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (9 samples, 0.05%)</title><rect x="1.6702%" y="372" width="0.0450%" height="15" fill="rgb(205,101,16)" fg:x="334" fg:w="9"/><text x="1.9202%" y="382.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="388" width="0.0450%" height="15" fill="rgb(246,168,33)" fg:x="334" fg:w="9"/><text x="1.9202%" y="398.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="404" width="0.0450%" height="15" fill="rgb(231,114,1)" fg:x="334" fg:w="9"/><text x="1.9202%" y="414.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (9 samples, 0.05%)</title><rect x="1.6702%" y="420" width="0.0450%" height="15" fill="rgb(207,184,53)" fg:x="334" fg:w="9"/><text x="1.9202%" y="430.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (9 samples, 0.05%)</title><rect x="1.6702%" y="436" width="0.0450%" height="15" fill="rgb(224,95,51)" fg:x="334" fg:w="9"/><text x="1.9202%" y="446.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.05%)</title><rect x="1.6702%" y="452" width="0.0450%" height="15" fill="rgb(212,188,45)" fg:x="334" fg:w="9"/><text x="1.9202%" y="462.50"></text></g><g><title>std::panicking::try (9 samples, 0.05%)</title><rect x="1.6702%" y="468" width="0.0450%" height="15" fill="rgb(223,154,38)" fg:x="334" fg:w="9"/><text x="1.9202%" y="478.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.05%)</title><rect x="1.6702%" y="484" width="0.0450%" height="15" fill="rgb(251,22,52)" fg:x="334" fg:w="9"/><text x="1.9202%" y="494.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9 samples, 0.05%)</title><rect x="1.6702%" y="500" width="0.0450%" height="15" fill="rgb(229,209,22)" fg:x="334" fg:w="9"/><text x="1.9202%" y="510.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="516" width="0.0450%" height="15" fill="rgb(234,138,34)" fg:x="334" fg:w="9"/><text x="1.9202%" y="526.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="532" width="0.0450%" height="15" fill="rgb(212,95,11)" fg:x="334" fg:w="9"/><text x="1.9202%" y="542.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (9 samples, 0.05%)</title><rect x="1.6702%" y="548" width="0.0450%" height="15" fill="rgb(240,179,47)" fg:x="334" fg:w="9"/><text x="1.9202%" y="558.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (9 samples, 0.05%)</title><rect x="1.6702%" y="564" width="0.0450%" height="15" fill="rgb(240,163,11)" fg:x="334" fg:w="9"/><text x="1.9202%" y="574.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="580" width="0.0450%" height="15" fill="rgb(236,37,12)" fg:x="334" fg:w="9"/><text x="1.9202%" y="590.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="596" width="0.0450%" height="15" fill="rgb(232,164,16)" fg:x="334" fg:w="9"/><text x="1.9202%" y="606.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="612" width="0.0450%" height="15" fill="rgb(244,205,15)" fg:x="334" fg:w="9"/><text x="1.9202%" y="622.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="1.6702%" y="628" width="0.0450%" height="15" fill="rgb(223,117,47)" fg:x="334" fg:w="9"/><text x="1.9202%" y="638.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (9 samples, 0.05%)</title><rect x="1.6702%" y="644" width="0.0450%" height="15" fill="rgb(244,107,35)" fg:x="334" fg:w="9"/><text x="1.9202%" y="654.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (9 samples, 0.05%)</title><rect x="1.6702%" y="660" width="0.0450%" height="15" fill="rgb(205,140,8)" fg:x="334" fg:w="9"/><text x="1.9202%" y="670.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (9 samples, 0.05%)</title><rect x="1.6702%" y="676" width="0.0450%" height="15" fill="rgb(228,84,46)" fg:x="334" fg:w="9"/><text x="1.9202%" y="686.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (9 samples, 0.05%)</title><rect x="1.6702%" y="692" width="0.0450%" height="15" fill="rgb(254,188,9)" fg:x="334" fg:w="9"/><text x="1.9202%" y="702.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (9 samples, 0.05%)</title><rect x="1.6702%" y="708" width="0.0450%" height="15" fill="rgb(206,112,54)" fg:x="334" fg:w="9"/><text x="1.9202%" y="718.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (9 samples, 0.05%)</title><rect x="1.6702%" y="724" width="0.0450%" height="15" fill="rgb(216,84,49)" fg:x="334" fg:w="9"/><text x="1.9202%" y="734.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (9 samples, 0.05%)</title><rect x="1.6702%" y="740" width="0.0450%" height="15" fill="rgb(214,194,35)" fg:x="334" fg:w="9"/><text x="1.9202%" y="750.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="1.7202%" y="452" width="0.0100%" height="15" fill="rgb(249,28,3)" fg:x="344" fg:w="2"/><text x="1.9702%" y="462.50"></text></g><g><title>&lt;T as axum_core::extract::FromRequest&lt;S,B,axum_core::extract::private::ViaParts&gt;&gt;::from_request::_{{closure}} (2 samples, 0.01%)</title><rect x="1.7202%" y="468" width="0.0100%" height="15" fill="rgb(222,56,52)" fg:x="344" fg:w="2"/><text x="1.9702%" y="478.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="1.7202%" y="484" width="0.0100%" height="15" fill="rgb(245,217,50)" fg:x="344" fg:w="2"/><text x="1.9702%" y="494.50"></text></g><g><title>&lt;rust_axum::DatabaseConnection as axum_core::extract::FromRequestParts&lt;S&gt;&gt;::from_request_parts::_{{closure}} (2 samples, 0.01%)</title><rect x="1.7202%" y="500" width="0.0100%" height="15" fill="rgb(213,201,24)" fg:x="344" fg:w="2"/><text x="1.9702%" y="510.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.01%)</title><rect x="1.7352%" y="692" width="0.0100%" height="15" fill="rgb(248,116,28)" fg:x="347" fg:w="2"/><text x="1.9852%" y="702.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="1.7352%" y="708" width="0.0100%" height="15" fill="rgb(219,72,43)" fg:x="347" fg:w="2"/><text x="1.9852%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_option_task_without_yield (9 samples, 0.05%)</title><rect x="1.7302%" y="596" width="0.0450%" height="15" fill="rgb(209,138,14)" fg:x="346" fg:w="9"/><text x="1.9802%" y="606.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (9 samples, 0.05%)</title><rect x="1.7302%" y="612" width="0.0450%" height="15" fill="rgb(222,18,33)" fg:x="346" fg:w="9"/><text x="1.9802%" y="622.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (9 samples, 0.05%)</title><rect x="1.7302%" y="628" width="0.0450%" height="15" fill="rgb(213,199,7)" fg:x="346" fg:w="9"/><text x="1.9802%" y="638.50"></text></g><g><title>tokio::runtime::context::with_scheduler (9 samples, 0.05%)</title><rect x="1.7302%" y="644" width="0.0450%" height="15" fill="rgb(250,110,10)" fg:x="346" fg:w="9"/><text x="1.9802%" y="654.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (9 samples, 0.05%)</title><rect x="1.7302%" y="660" width="0.0450%" height="15" fill="rgb(248,123,6)" fg:x="346" fg:w="9"/><text x="1.9802%" y="670.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (9 samples, 0.05%)</title><rect x="1.7302%" y="676" width="0.0450%" height="15" fill="rgb(206,91,31)" fg:x="346" fg:w="9"/><text x="1.9802%" y="686.50"></text></g><g><title>tokio::runtime::context::with_scheduler::_{{closure}} (6 samples, 0.03%)</title><rect x="1.7452%" y="692" width="0.0300%" height="15" fill="rgb(211,154,13)" fg:x="349" fg:w="6"/><text x="1.9952%" y="702.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (5 samples, 0.03%)</title><rect x="1.7502%" y="708" width="0.0250%" height="15" fill="rgb(225,148,7)" fg:x="350" fg:w="5"/><text x="2.0002%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::_{{closure}} (5 samples, 0.03%)</title><rect x="1.7502%" y="724" width="0.0250%" height="15" fill="rgb(220,160,43)" fg:x="350" fg:w="5"/><text x="2.0002%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (5 samples, 0.03%)</title><rect x="1.7502%" y="740" width="0.0250%" height="15" fill="rgb(213,52,39)" fg:x="350" fg:w="5"/><text x="2.0002%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (4 samples, 0.02%)</title><rect x="1.7552%" y="756" width="0.0200%" height="15" fill="rgb(243,137,7)" fg:x="351" fg:w="4"/><text x="2.0052%" y="766.50"></text></g><g><title>tokio::runtime::scheduler::Handle::spawn (12 samples, 0.06%)</title><rect x="1.7302%" y="548" width="0.0600%" height="15" fill="rgb(230,79,13)" fg:x="346" fg:w="12"/><text x="1.9802%" y="558.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::spawn (12 samples, 0.06%)</title><rect x="1.7302%" y="564" width="0.0600%" height="15" fill="rgb(247,105,23)" fg:x="346" fg:w="12"/><text x="1.9802%" y="574.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (12 samples, 0.06%)</title><rect x="1.7302%" y="580" width="0.0600%" height="15" fill="rgb(223,179,41)" fg:x="346" fg:w="12"/><text x="1.9802%" y="590.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (3 samples, 0.02%)</title><rect x="1.7752%" y="596" width="0.0150%" height="15" fill="rgb(218,9,34)" fg:x="355" fg:w="3"/><text x="2.0252%" y="606.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;&gt; (14 samples, 0.07%)</title><rect x="1.7302%" y="468" width="0.0700%" height="15" fill="rgb(222,106,8)" fg:x="346" fg:w="14"/><text x="1.9802%" y="478.50"></text></g><g><title>&lt;sqlx_core::pool::connection::PoolConnection&lt;DB&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.07%)</title><rect x="1.7302%" y="484" width="0.0700%" height="15" fill="rgb(211,220,0)" fg:x="346" fg:w="14"/><text x="1.9802%" y="494.50"></text></g><g><title>sqlx_core::rt::spawn (14 samples, 0.07%)</title><rect x="1.7302%" y="500" width="0.0700%" height="15" fill="rgb(229,52,16)" fg:x="346" fg:w="14"/><text x="1.9802%" y="510.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn (14 samples, 0.07%)</title><rect x="1.7302%" y="516" width="0.0700%" height="15" fill="rgb(212,155,18)" fg:x="346" fg:w="14"/><text x="1.9802%" y="526.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_named (14 samples, 0.07%)</title><rect x="1.7302%" y="532" width="0.0700%" height="15" fill="rgb(242,21,14)" fg:x="346" fg:w="14"/><text x="1.9802%" y="542.50"></text></g><g><title>tokio::runtime::task::id::Id::next (2 samples, 0.01%)</title><rect x="1.7902%" y="548" width="0.0100%" height="15" fill="rgb(222,19,48)" fg:x="358" fg:w="2"/><text x="2.0402%" y="558.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (5 samples, 0.03%)</title><rect x="1.8652%" y="852" width="0.0250%" height="15" fill="rgb(232,45,27)" fg:x="373" fg:w="5"/><text x="2.1152%" y="862.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.02%)</title><rect x="1.8702%" y="868" width="0.0200%" height="15" fill="rgb(249,103,42)" fg:x="374" fg:w="4"/><text x="2.1202%" y="878.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.02%)</title><rect x="1.8902%" y="852" width="0.0150%" height="15" fill="rgb(246,81,33)" fg:x="378" fg:w="3"/><text x="2.1402%" y="862.50"></text></g><g><title>__memmove_avx_unaligned (3 samples, 0.02%)</title><rect x="1.9102%" y="852" width="0.0150%" height="15" fill="rgb(252,33,42)" fg:x="382" fg:w="3"/><text x="2.1602%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;sqlx_postgres::type_info::PgTypeInfo&gt;&gt; (2 samples, 0.01%)</title><rect x="1.9252%" y="868" width="0.0100%" height="15" fill="rgb(209,212,41)" fg:x="385" fg:w="2"/><text x="2.1752%" y="878.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="1.9252%" y="884" width="0.0100%" height="15" fill="rgb(207,154,6)" fg:x="385" fg:w="2"/><text x="2.1752%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(usize,sqlx_core::ext::ustr::UStr)&gt;&gt; (2 samples, 0.01%)</title><rect x="1.9402%" y="884" width="0.0100%" height="15" fill="rgb(223,64,47)" fg:x="388" fg:w="2"/><text x="2.1902%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_postgres::arguments::PgArguments&gt; (6 samples, 0.03%)</title><rect x="1.9252%" y="852" width="0.0300%" height="15" fill="rgb(211,161,38)" fg:x="385" fg:w="6"/><text x="2.1752%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_postgres::arguments::PgArgumentBuffer&gt; (4 samples, 0.02%)</title><rect x="1.9352%" y="868" width="0.0200%" height="15" fill="rgb(219,138,40)" fg:x="387" fg:w="4"/><text x="2.1852%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::get_or_prepare::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="1.9552%" y="852" width="0.0100%" height="15" fill="rgb(241,228,46)" fg:x="391" fg:w="2"/><text x="2.2052%" y="862.50"></text></g><g><title>&lt;futures_channel::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="1.9652%" y="868" width="0.0100%" height="15" fill="rgb(223,209,38)" fg:x="393" fg:w="2"/><text x="2.2152%" y="878.50"></text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="1.9652%" y="852" width="0.0350%" height="15" fill="rgb(236,164,45)" fg:x="393" fg:w="7"/><text x="2.2152%" y="862.50"></text></g><g><title>futures_util::future::future::FutureExt::boxed (4 samples, 0.02%)</title><rect x="1.9802%" y="868" width="0.0200%" height="15" fill="rgb(231,15,5)" fg:x="396" fg:w="4"/><text x="2.2302%" y="878.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (4 samples, 0.02%)</title><rect x="1.9802%" y="884" width="0.0200%" height="15" fill="rgb(252,35,15)" fg:x="396" fg:w="4"/><text x="2.2302%" y="894.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="1.9802%" y="900" width="0.0200%" height="15" fill="rgb(248,181,18)" fg:x="396" fg:w="4"/><text x="2.2302%" y="910.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="1.9902%" y="916" width="0.0100%" height="15" fill="rgb(233,39,42)" fg:x="398" fg:w="2"/><text x="2.2402%" y="926.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="1.9902%" y="932" width="0.0100%" height="15" fill="rgb(238,110,33)" fg:x="398" fg:w="2"/><text x="2.2402%" y="942.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="1.9902%" y="948" width="0.0100%" height="15" fill="rgb(233,195,10)" fg:x="398" fg:w="2"/><text x="2.2402%" y="958.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="1.9902%" y="964" width="0.0100%" height="15" fill="rgb(254,105,3)" fg:x="398" fg:w="2"/><text x="2.2402%" y="974.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="1.9902%" y="980" width="0.0100%" height="15" fill="rgb(221,225,9)" fg:x="398" fg:w="2"/><text x="2.2402%" y="990.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.02%)</title><rect x="2.0102%" y="868" width="0.0200%" height="15" fill="rgb(224,227,45)" fg:x="402" fg:w="4"/><text x="2.2602%" y="878.50"></text></g><g><title>__GI___clock_gettime (3 samples, 0.02%)</title><rect x="2.0152%" y="884" width="0.0150%" height="15" fill="rgb(229,198,43)" fg:x="403" fg:w="3"/><text x="2.2652%" y="894.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="2.0202%" y="900" width="0.0100%" height="15" fill="rgb(206,209,35)" fg:x="404" fg:w="2"/><text x="2.2702%" y="910.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="2.0202%" y="916" width="0.0100%" height="15" fill="rgb(245,195,53)" fg:x="404" fg:w="2"/><text x="2.2702%" y="926.50"></text></g><g><title>sqlx_core::logger::QueryLogger::new (7 samples, 0.04%)</title><rect x="2.0002%" y="852" width="0.0350%" height="15" fill="rgb(240,92,26)" fg:x="400" fg:w="7"/><text x="2.2502%" y="862.50"></text></g><g><title>[unknown] (73 samples, 0.37%)</title><rect x="2.0502%" y="1092" width="0.3650%" height="15" fill="rgb(207,40,23)" fg:x="410" fg:w="73"/><text x="2.3002%" y="1102.50"></text></g><g><title>[unknown] (71 samples, 0.36%)</title><rect x="2.0602%" y="1108" width="0.3550%" height="15" fill="rgb(223,111,35)" fg:x="412" fg:w="71"/><text x="2.3102%" y="1118.50"></text></g><g><title>[unknown] (68 samples, 0.34%)</title><rect x="2.0752%" y="1124" width="0.3400%" height="15" fill="rgb(229,147,28)" fg:x="415" fg:w="68"/><text x="2.3252%" y="1134.50"></text></g><g><title>[unknown] (65 samples, 0.33%)</title><rect x="2.0902%" y="1140" width="0.3250%" height="15" fill="rgb(211,29,28)" fg:x="418" fg:w="65"/><text x="2.3402%" y="1150.50"></text></g><g><title>[unknown] (58 samples, 0.29%)</title><rect x="2.1252%" y="1156" width="0.2900%" height="15" fill="rgb(228,72,33)" fg:x="425" fg:w="58"/><text x="2.3752%" y="1166.50"></text></g><g><title>[unknown] (56 samples, 0.28%)</title><rect x="2.1352%" y="1172" width="0.2800%" height="15" fill="rgb(205,214,31)" fg:x="427" fg:w="56"/><text x="2.3852%" y="1182.50"></text></g><g><title>[unknown] (52 samples, 0.26%)</title><rect x="2.1552%" y="1188" width="0.2600%" height="15" fill="rgb(224,111,15)" fg:x="431" fg:w="52"/><text x="2.4052%" y="1198.50"></text></g><g><title>[unknown] (47 samples, 0.24%)</title><rect x="2.1802%" y="1204" width="0.2350%" height="15" fill="rgb(253,21,26)" fg:x="436" fg:w="47"/><text x="2.4302%" y="1214.50"></text></g><g><title>[unknown] (37 samples, 0.19%)</title><rect x="2.2302%" y="1220" width="0.1850%" height="15" fill="rgb(245,139,43)" fg:x="446" fg:w="37"/><text x="2.4802%" y="1230.50"></text></g><g><title>[unknown] (32 samples, 0.16%)</title><rect x="2.2552%" y="1236" width="0.1600%" height="15" fill="rgb(252,170,7)" fg:x="451" fg:w="32"/><text x="2.5052%" y="1246.50"></text></g><g><title>[unknown] (26 samples, 0.13%)</title><rect x="2.2852%" y="1252" width="0.1300%" height="15" fill="rgb(231,118,14)" fg:x="457" fg:w="26"/><text x="2.5352%" y="1262.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="2.3802%" y="1268" width="0.0350%" height="15" fill="rgb(238,83,0)" fg:x="476" fg:w="7"/><text x="2.6302%" y="1278.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_write::_{{closure}} (75 samples, 0.38%)</title><rect x="2.0452%" y="948" width="0.3750%" height="15" fill="rgb(221,39,39)" fg:x="409" fg:w="75"/><text x="2.2952%" y="958.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (75 samples, 0.38%)</title><rect x="2.0452%" y="964" width="0.3750%" height="15" fill="rgb(222,119,46)" fg:x="409" fg:w="75"/><text x="2.2952%" y="974.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (75 samples, 0.38%)</title><rect x="2.0452%" y="980" width="0.3750%" height="15" fill="rgb(222,165,49)" fg:x="409" fg:w="75"/><text x="2.2952%" y="990.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (75 samples, 0.38%)</title><rect x="2.0452%" y="996" width="0.3750%" height="15" fill="rgb(219,113,52)" fg:x="409" fg:w="75"/><text x="2.2952%" y="1006.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (75 samples, 0.38%)</title><rect x="2.0452%" y="1012" width="0.3750%" height="15" fill="rgb(214,7,15)" fg:x="409" fg:w="75"/><text x="2.2952%" y="1022.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (75 samples, 0.38%)</title><rect x="2.0452%" y="1028" width="0.3750%" height="15" fill="rgb(235,32,4)" fg:x="409" fg:w="75"/><text x="2.2952%" y="1038.50"></text></g><g><title>std::sys_common::net::TcpStream::write (74 samples, 0.37%)</title><rect x="2.0502%" y="1044" width="0.3700%" height="15" fill="rgb(238,90,54)" fg:x="410" fg:w="74"/><text x="2.3002%" y="1054.50"></text></g><g><title>__libc_send (74 samples, 0.37%)</title><rect x="2.0502%" y="1060" width="0.3700%" height="15" fill="rgb(213,208,19)" fg:x="410" fg:w="74"/><text x="2.3002%" y="1070.50"></text></g><g><title>__libc_send (74 samples, 0.37%)</title><rect x="2.0502%" y="1076" width="0.3700%" height="15" fill="rgb(233,156,4)" fg:x="410" fg:w="74"/><text x="2.3002%" y="1086.50"></text></g><g><title>&lt;sqlx_core::net::socket::Write&lt;S&gt; as core::future::future::Future&gt;::poll (79 samples, 0.40%)</title><rect x="2.0402%" y="868" width="0.3950%" height="15" fill="rgb(207,194,5)" fg:x="408" fg:w="79"/><text x="2.2902%" y="878.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::try_write (79 samples, 0.40%)</title><rect x="2.0402%" y="884" width="0.3950%" height="15" fill="rgb(206,111,30)" fg:x="408" fg:w="79"/><text x="2.2902%" y="894.50"></text></g><g><title>sqlx_core::rt::rt_tokio::socket::&lt;impl sqlx_core::net::socket::Socket for tokio::net::tcp::stream::TcpStream&gt;::try_write (79 samples, 0.40%)</title><rect x="2.0402%" y="900" width="0.3950%" height="15" fill="rgb(243,70,54)" fg:x="408" fg:w="79"/><text x="2.2902%" y="910.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_write (79 samples, 0.40%)</title><rect x="2.0402%" y="916" width="0.3950%" height="15" fill="rgb(242,28,8)" fg:x="408" fg:w="79"/><text x="2.2902%" y="926.50"></text></g><g><title>tokio::runtime::io::registration::Registration::try_io (79 samples, 0.40%)</title><rect x="2.0402%" y="932" width="0.3950%" height="15" fill="rgb(219,106,18)" fg:x="408" fg:w="79"/><text x="2.2902%" y="942.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::ready_event (3 samples, 0.02%)</title><rect x="2.4202%" y="948" width="0.0150%" height="15" fill="rgb(244,222,10)" fg:x="484" fg:w="3"/><text x="2.6702%" y="958.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.02%)</title><rect x="2.4202%" y="964" width="0.0150%" height="15" fill="rgb(236,179,52)" fg:x="484" fg:w="3"/><text x="2.6702%" y="974.50"></text></g><g><title>tokio::runtime::io::registration::Registration::try_io (2 samples, 0.01%)</title><rect x="2.4252%" y="980" width="0.0100%" height="15" fill="rgb(213,23,39)" fg:x="485" fg:w="2"/><text x="2.6752%" y="990.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::flush::_{{closure}} (81 samples, 0.41%)</title><rect x="2.0352%" y="852" width="0.4050%" height="15" fill="rgb(238,48,10)" fg:x="407" fg:w="81"/><text x="2.2852%" y="862.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (3 samples, 0.02%)</title><rect x="2.4652%" y="916" width="0.0150%" height="15" fill="rgb(251,196,23)" fg:x="493" fg:w="3"/><text x="2.7152%" y="926.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="2.4652%" y="932" width="0.0150%" height="15" fill="rgb(250,152,24)" fg:x="493" fg:w="3"/><text x="2.7152%" y="942.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="2.4652%" y="948" width="0.0150%" height="15" fill="rgb(209,150,17)" fg:x="493" fg:w="3"/><text x="2.7152%" y="958.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as sqlx_postgres::io::buf_mut::PgBufMutExt&gt;::put_portal_name (4 samples, 0.02%)</title><rect x="2.4802%" y="916" width="0.0200%" height="15" fill="rgb(234,202,34)" fg:x="496" fg:w="4"/><text x="2.7302%" y="926.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.01%)</title><rect x="2.4902%" y="932" width="0.0100%" height="15" fill="rgb(253,148,53)" fg:x="498" fg:w="2"/><text x="2.7402%" y="942.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as sqlx_postgres::io::buf_mut::PgBufMutExt&gt;::put_statement_name (3 samples, 0.02%)</title><rect x="2.5003%" y="916" width="0.0150%" height="15" fill="rgb(218,129,16)" fg:x="500" fg:w="3"/><text x="2.7503%" y="926.50"></text></g><g><title>&lt;sqlx_postgres::message::bind::Bind as sqlx_core::io::encode::Encode&gt;::encode_with::_{{closure}} (13 samples, 0.07%)</title><rect x="2.4602%" y="900" width="0.0650%" height="15" fill="rgb(216,85,19)" fg:x="492" fg:w="13"/><text x="2.7102%" y="910.50"></text></g><g><title>core::num::&lt;impl i16&gt;::to_be_bytes (2 samples, 0.01%)</title><rect x="2.5153%" y="916" width="0.0100%" height="15" fill="rgb(235,228,7)" fg:x="503" fg:w="2"/><text x="2.7653%" y="926.50"></text></g><g><title>core::num::&lt;impl i16&gt;::to_be (2 samples, 0.01%)</title><rect x="2.5153%" y="932" width="0.0100%" height="15" fill="rgb(245,175,0)" fg:x="503" fg:w="2"/><text x="2.7653%" y="942.50"></text></g><g><title>core::num::&lt;impl i16&gt;::swap_bytes (2 samples, 0.01%)</title><rect x="2.5153%" y="948" width="0.0100%" height="15" fill="rgb(208,168,36)" fg:x="503" fg:w="2"/><text x="2.7653%" y="958.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (2 samples, 0.01%)</title><rect x="2.5153%" y="964" width="0.0100%" height="15" fill="rgb(246,171,24)" fg:x="503" fg:w="2"/><text x="2.7653%" y="974.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as sqlx_postgres::io::buf_mut::PgBufMutExt&gt;::put_length_prefixed (19 samples, 0.10%)</title><rect x="2.4402%" y="884" width="0.0950%" height="15" fill="rgb(215,142,24)" fg:x="488" fg:w="19"/><text x="2.6902%" y="894.50"></text></g><g><title>&lt;sqlx_postgres::message::bind::Bind as sqlx_core::io::encode::Encode&gt;::encode_with (5 samples, 0.03%)</title><rect x="2.5353%" y="884" width="0.0250%" height="15" fill="rgb(250,187,7)" fg:x="507" fg:w="5"/><text x="2.7853%" y="894.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="2.5453%" y="900" width="0.0150%" height="15" fill="rgb(228,66,33)" fg:x="509" fg:w="3"/><text x="2.7953%" y="910.50"></text></g><g><title>&lt;sqlx_postgres::message::close::Close as sqlx_core::io::encode::Encode&gt;::encode_with (3 samples, 0.02%)</title><rect x="2.5603%" y="884" width="0.0150%" height="15" fill="rgb(234,215,21)" fg:x="512" fg:w="3"/><text x="2.8103%" y="894.50"></text></g><g><title>&lt;sqlx_postgres::message::execute::Execute as sqlx_core::io::encode::Encode&gt;::encode_with (2 samples, 0.01%)</title><rect x="2.5753%" y="884" width="0.0100%" height="15" fill="rgb(222,191,20)" fg:x="515" fg:w="2"/><text x="2.8253%" y="894.50"></text></g><g><title>sqlx_core::net::socket::buffered::WriteBuffer::buf_mut (3 samples, 0.02%)</title><rect x="2.5853%" y="884" width="0.0150%" height="15" fill="rgb(245,79,54)" fg:x="517" fg:w="3"/><text x="2.8353%" y="894.50"></text></g><g><title>sqlx_core::net::socket::buffered::WriteBuffer::sanity_check (2 samples, 0.01%)</title><rect x="2.5903%" y="900" width="0.0100%" height="15" fill="rgb(240,10,37)" fg:x="518" fg:w="2"/><text x="2.8403%" y="910.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write (34 samples, 0.17%)</title><rect x="2.4402%" y="852" width="0.1700%" height="15" fill="rgb(214,192,32)" fg:x="488" fg:w="34"/><text x="2.6902%" y="862.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write_with (34 samples, 0.17%)</title><rect x="2.4402%" y="868" width="0.1700%" height="15" fill="rgb(209,36,54)" fg:x="488" fg:w="34"/><text x="2.6902%" y="878.50"></text></g><g><title>sqlx_core::net::socket::buffered::WriteBuffer::sanity_check (2 samples, 0.01%)</title><rect x="2.6003%" y="884" width="0.0100%" height="15" fill="rgb(220,10,11)" fg:x="520" fg:w="2"/><text x="2.8503%" y="894.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (2 samples, 0.01%)</title><rect x="2.6003%" y="900" width="0.0100%" height="15" fill="rgb(221,106,17)" fg:x="520" fg:w="2"/><text x="2.8503%" y="910.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.01%)</title><rect x="2.6003%" y="916" width="0.0100%" height="15" fill="rgb(251,142,44)" fg:x="520" fg:w="2"/><text x="2.8503%" y="926.50"></text></g><g><title>sqlx_postgres::arguments::PgArguments::apply_patches::_{{closure}} (3 samples, 0.02%)</title><rect x="2.6103%" y="852" width="0.0150%" height="15" fill="rgb(238,13,15)" fg:x="522" fg:w="3"/><text x="2.8603%" y="862.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="2.6103%" y="868" width="0.0150%" height="15" fill="rgb(208,107,27)" fg:x="522" fg:w="3"/><text x="2.8603%" y="878.50"></text></g><g><title>sqlx_postgres::connection::PgConnection::wait_until_ready::_{{closure}} (8 samples, 0.04%)</title><rect x="2.6303%" y="852" width="0.0400%" height="15" fill="rgb(205,136,37)" fg:x="526" fg:w="8"/><text x="2.8803%" y="862.50"></text></g><g><title>sqlx_core::net::socket::buffered::WriteBuffer::is_empty (4 samples, 0.02%)</title><rect x="2.6503%" y="868" width="0.0200%" height="15" fill="rgb(250,205,27)" fg:x="530" fg:w="4"/><text x="2.9003%" y="878.50"></text></g><g><title>sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::get_or_prepare (2 samples, 0.01%)</title><rect x="2.6703%" y="852" width="0.0100%" height="15" fill="rgb(210,80,43)" fg:x="534" fg:w="2"/><text x="2.9203%" y="862.50"></text></g><g><title>sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::write_sync (4 samples, 0.02%)</title><rect x="2.6803%" y="852" width="0.0200%" height="15" fill="rgb(247,160,36)" fg:x="536" fg:w="4"/><text x="2.9303%" y="862.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write (3 samples, 0.02%)</title><rect x="2.6853%" y="868" width="0.0150%" height="15" fill="rgb(234,13,49)" fg:x="537" fg:w="3"/><text x="2.9353%" y="878.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write_with (3 samples, 0.02%)</title><rect x="2.6853%" y="884" width="0.0150%" height="15" fill="rgb(234,122,0)" fg:x="537" fg:w="3"/><text x="2.9353%" y="894.50"></text></g><g><title>sqlx_core::net::socket::buffered::WriteBuffer::sanity_check (2 samples, 0.01%)</title><rect x="2.6903%" y="900" width="0.0100%" height="15" fill="rgb(207,146,38)" fg:x="538" fg:w="2"/><text x="2.9403%" y="910.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (2 samples, 0.01%)</title><rect x="2.6903%" y="916" width="0.0100%" height="15" fill="rgb(207,177,25)" fg:x="538" fg:w="2"/><text x="2.9403%" y="926.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.01%)</title><rect x="2.6903%" y="932" width="0.0100%" height="15" fill="rgb(211,178,42)" fg:x="538" fg:w="2"/><text x="2.9403%" y="942.50"></text></g><g><title>hashlink::linked_hash_map::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash::_{{closure}} (6 samples, 0.03%)</title><rect x="2.7153%" y="1044" width="0.0300%" height="15" fill="rgb(230,69,54)" fg:x="543" fg:w="6"/><text x="2.9653%" y="1054.50"></text></g><g><title>hashlink::linked_hash_map::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck::_{{closure}} (6 samples, 0.03%)</title><rect x="2.7153%" y="1060" width="0.0300%" height="15" fill="rgb(214,135,41)" fg:x="543" fg:w="6"/><text x="2.9653%" y="1070.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (6 samples, 0.03%)</title><rect x="2.7153%" y="1076" width="0.0300%" height="15" fill="rgb(237,67,25)" fg:x="543" fg:w="6"/><text x="2.9653%" y="1086.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (6 samples, 0.03%)</title><rect x="2.7153%" y="1092" width="0.0300%" height="15" fill="rgb(222,189,50)" fg:x="543" fg:w="6"/><text x="2.9653%" y="1102.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (6 samples, 0.03%)</title><rect x="2.7153%" y="1108" width="0.0300%" height="15" fill="rgb(245,148,34)" fg:x="543" fg:w="6"/><text x="2.9653%" y="1118.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (6 samples, 0.03%)</title><rect x="2.7153%" y="1124" width="0.0300%" height="15" fill="rgb(222,29,6)" fg:x="543" fg:w="6"/><text x="2.9653%" y="1134.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.03%)</title><rect x="2.7203%" y="1140" width="0.0250%" height="15" fill="rgb(221,189,43)" fg:x="544" fg:w="5"/><text x="2.9703%" y="1150.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find::_{{closure}} (7 samples, 0.04%)</title><rect x="2.7153%" y="1012" width="0.0350%" height="15" fill="rgb(207,36,27)" fg:x="543" fg:w="7"/><text x="2.9653%" y="1022.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search::_{{closure}} (7 samples, 0.04%)</title><rect x="2.7153%" y="1028" width="0.0350%" height="15" fill="rgb(217,90,24)" fg:x="543" fg:w="7"/><text x="2.9653%" y="1038.50"></text></g><g><title>hashlink::linked_hash_map::RawEntryBuilderMut&lt;K,V,S&gt;::from_key_hashed_nocheck (9 samples, 0.05%)</title><rect x="2.7153%" y="916" width="0.0450%" height="15" fill="rgb(224,66,35)" fg:x="543" fg:w="9"/><text x="2.9653%" y="926.50"></text></g><g><title>hashlink::linked_hash_map::RawEntryBuilderMut&lt;K,V,S&gt;::from_hash (9 samples, 0.05%)</title><rect x="2.7153%" y="932" width="0.0450%" height="15" fill="rgb(221,13,50)" fg:x="543" fg:w="9"/><text x="2.9653%" y="942.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::from_hash (9 samples, 0.05%)</title><rect x="2.7153%" y="948" width="0.0450%" height="15" fill="rgb(236,68,49)" fg:x="543" fg:w="9"/><text x="2.9653%" y="958.50"></text></g><g><title>hashbrown::map::RawEntryBuilderMut&lt;K,V,S,A&gt;::search (9 samples, 0.05%)</title><rect x="2.7153%" y="964" width="0.0450%" height="15" fill="rgb(229,146,28)" fg:x="543" fg:w="9"/><text x="2.9653%" y="974.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (9 samples, 0.05%)</title><rect x="2.7153%" y="980" width="0.0450%" height="15" fill="rgb(225,31,38)" fg:x="543" fg:w="9"/><text x="2.9653%" y="990.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.05%)</title><rect x="2.7153%" y="996" width="0.0450%" height="15" fill="rgb(250,208,3)" fg:x="543" fg:w="9"/><text x="2.9653%" y="1006.50"></text></g><g><title>sqlx_core::common::statement_cache::StatementCache&lt;T&gt;::get_mut (17 samples, 0.09%)</title><rect x="2.7153%" y="868" width="0.0850%" height="15" fill="rgb(246,54,23)" fg:x="543" fg:w="17"/><text x="2.9653%" y="878.50"></text></g><g><title>hashlink::lru_cache::LruCache&lt;K,V,S&gt;::get_mut (17 samples, 0.09%)</title><rect x="2.7153%" y="884" width="0.0850%" height="15" fill="rgb(243,76,11)" fg:x="543" fg:w="17"/><text x="2.9653%" y="894.50"></text></g><g><title>hashlink::linked_hash_map::RawEntryBuilderMut&lt;K,V,S&gt;::from_key (17 samples, 0.09%)</title><rect x="2.7153%" y="900" width="0.0850%" height="15" fill="rgb(245,21,50)" fg:x="543" fg:w="17"/><text x="2.9653%" y="910.50"></text></g><g><title>hashlink::linked_hash_map::hash_key (8 samples, 0.04%)</title><rect x="2.7603%" y="916" width="0.0400%" height="15" fill="rgb(228,9,43)" fg:x="552" fg:w="8"/><text x="3.0103%" y="926.50"></text></g><g><title>&lt;core::hash::BuildHasherDefault&lt;H&gt; as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.02%)</title><rect x="2.7803%" y="932" width="0.0200%" height="15" fill="rgb(208,100,47)" fg:x="556" fg:w="4"/><text x="3.0303%" y="942.50"></text></g><g><title>ahash::&lt;impl core::default::Default for ahash::fallback_hash::AHasher&gt;::default (4 samples, 0.02%)</title><rect x="2.7803%" y="948" width="0.0200%" height="15" fill="rgb(232,26,8)" fg:x="556" fg:w="4"/><text x="3.0303%" y="958.50"></text></g><g><title>ahash::random_state::RandomState::with_fixed_keys (3 samples, 0.02%)</title><rect x="2.7853%" y="964" width="0.0150%" height="15" fill="rgb(216,166,38)" fg:x="557" fg:w="3"/><text x="3.0353%" y="974.50"></text></g><g><title>ahash::random_state::get_fixed_seeds (2 samples, 0.01%)</title><rect x="2.7903%" y="980" width="0.0100%" height="15" fill="rgb(251,202,51)" fg:x="558" fg:w="2"/><text x="3.0403%" y="990.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_init (2 samples, 0.01%)</title><rect x="2.7903%" y="996" width="0.0100%" height="15" fill="rgb(254,216,34)" fg:x="558" fg:w="2"/><text x="3.0403%" y="1006.50"></text></g><g><title>once_cell::race::once_box::OnceBox&lt;T&gt;::get_or_try_init (2 samples, 0.01%)</title><rect x="2.7903%" y="1012" width="0.0100%" height="15" fill="rgb(251,32,27)" fg:x="558" fg:w="2"/><text x="3.0403%" y="1022.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="100" width="1.0851%" height="15" fill="rgb(208,127,28)" fg:x="344" fg:w="217"/><text x="1.9702%" y="110.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="116" width="1.0851%" height="15" fill="rgb(224,137,22)" fg:x="344" fg:w="217"/><text x="1.9702%" y="126.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="132" width="1.0851%" height="15" fill="rgb(254,70,32)" fg:x="344" fg:w="217"/><text x="1.9702%" y="142.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (217 samples, 1.09%)</title><rect x="1.7202%" y="148" width="1.0851%" height="15" fill="rgb(229,75,37)" fg:x="344" fg:w="217"/><text x="1.9702%" y="158.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (217 samples, 1.09%)</title><rect x="1.7202%" y="164" width="1.0851%" height="15" fill="rgb(252,64,23)" fg:x="344" fg:w="217"/><text x="1.9702%" y="174.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (217 samples, 1.09%)</title><rect x="1.7202%" y="180" width="1.0851%" height="15" fill="rgb(232,162,48)" fg:x="344" fg:w="217"/><text x="1.9702%" y="190.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (217 samples, 1.09%)</title><rect x="1.7202%" y="196" width="1.0851%" height="15" fill="rgb(246,160,12)" fg:x="344" fg:w="217"/><text x="1.9702%" y="206.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (217 samples, 1.09%)</title><rect x="1.7202%" y="212" width="1.0851%" height="15" fill="rgb(247,166,0)" fg:x="344" fg:w="217"/><text x="1.9702%" y="222.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="228" width="1.0851%" height="15" fill="rgb(249,219,21)" fg:x="344" fg:w="217"/><text x="1.9702%" y="238.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="244" width="1.0851%" height="15" fill="rgb(205,209,3)" fg:x="344" fg:w="217"/><text x="1.9702%" y="254.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="260" width="1.0851%" height="15" fill="rgb(243,44,1)" fg:x="344" fg:w="217"/><text x="1.9702%" y="270.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="276" width="1.0851%" height="15" fill="rgb(206,159,16)" fg:x="344" fg:w="217"/><text x="1.9702%" y="286.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="292" width="1.0851%" height="15" fill="rgb(244,77,30)" fg:x="344" fg:w="217"/><text x="1.9702%" y="302.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="308" width="1.0851%" height="15" fill="rgb(218,69,12)" fg:x="344" fg:w="217"/><text x="1.9702%" y="318.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="324" width="1.0851%" height="15" fill="rgb(212,87,7)" fg:x="344" fg:w="217"/><text x="1.9702%" y="334.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="340" width="1.0851%" height="15" fill="rgb(245,114,25)" fg:x="344" fg:w="217"/><text x="1.9702%" y="350.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (217 samples, 1.09%)</title><rect x="1.7202%" y="356" width="1.0851%" height="15" fill="rgb(210,61,42)" fg:x="344" fg:w="217"/><text x="1.9702%" y="366.50"></text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="372" width="1.0851%" height="15" fill="rgb(211,52,33)" fg:x="344" fg:w="217"/><text x="1.9702%" y="382.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="388" width="1.0851%" height="15" fill="rgb(234,58,33)" fg:x="344" fg:w="217"/><text x="1.9702%" y="398.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="404" width="1.0851%" height="15" fill="rgb(220,115,36)" fg:x="344" fg:w="217"/><text x="1.9702%" y="414.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (217 samples, 1.09%)</title><rect x="1.7202%" y="420" width="1.0851%" height="15" fill="rgb(243,153,54)" fg:x="344" fg:w="217"/><text x="1.9702%" y="430.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}} (217 samples, 1.09%)</title><rect x="1.7202%" y="436" width="1.0851%" height="15" fill="rgb(251,47,18)" fg:x="344" fg:w="217"/><text x="1.9702%" y="446.50"></text></g><g><title>rust_axum::read_users::_{{closure}} (215 samples, 1.08%)</title><rect x="1.7302%" y="452" width="1.0751%" height="15" fill="rgb(242,102,42)" fg:x="346" fg:w="215"/><text x="1.9802%" y="462.50"></text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_all::_{{closure}} (201 samples, 1.01%)</title><rect x="1.8002%" y="468" width="1.0051%" height="15" fill="rgb(234,31,38)" fg:x="360" fg:w="201"/><text x="2.0502%" y="478.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="484" width="1.0051%" height="15" fill="rgb(221,117,51)" fg:x="360" fg:w="201"/><text x="2.0502%" y="494.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="500" width="1.0051%" height="15" fill="rgb(212,20,18)" fg:x="360" fg:w="201"/><text x="2.0502%" y="510.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="516" width="1.0051%" height="15" fill="rgb(245,133,36)" fg:x="360" fg:w="201"/><text x="2.0502%" y="526.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_filter_map::TryFilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="532" width="1.0051%" height="15" fill="rgb(212,6,19)" fg:x="360" fg:w="201"/><text x="2.0502%" y="542.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="548" width="1.0051%" height="15" fill="rgb(218,1,36)" fg:x="360" fg:w="201"/><text x="2.0502%" y="558.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="564" width="1.0051%" height="15" fill="rgb(246,84,54)" fg:x="360" fg:w="201"/><text x="2.0502%" y="574.50"></text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="580" width="1.0051%" height="15" fill="rgb(242,110,6)" fg:x="360" fg:w="201"/><text x="2.0502%" y="590.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="596" width="1.0051%" height="15" fill="rgb(214,47,5)" fg:x="360" fg:w="201"/><text x="2.0502%" y="606.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="612" width="1.0051%" height="15" fill="rgb(218,159,25)" fg:x="360" fg:w="201"/><text x="2.0502%" y="622.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="628" width="1.0051%" height="15" fill="rgb(215,211,28)" fg:x="360" fg:w="201"/><text x="2.0502%" y="638.50"></text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new::_{{closure}} (201 samples, 1.01%)</title><rect x="1.8002%" y="644" width="1.0051%" height="15" fill="rgb(238,59,32)" fg:x="360" fg:w="201"/><text x="2.0502%" y="654.50"></text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_many::_{{closure}}::_{{closure}} (201 samples, 1.01%)</title><rect x="1.8002%" y="660" width="1.0051%" height="15" fill="rgb(226,82,3)" fg:x="360" fg:w="201"/><text x="2.0502%" y="670.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_next::TryNext&lt;St&gt; as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="676" width="1.0051%" height="15" fill="rgb(240,164,32)" fg:x="360" fg:w="201"/><text x="2.0502%" y="686.50"></text></g><g><title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (201 samples, 1.01%)</title><rect x="1.8002%" y="692" width="1.0051%" height="15" fill="rgb(232,46,7)" fg:x="360" fg:w="201"/><text x="2.0502%" y="702.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="708" width="1.0051%" height="15" fill="rgb(229,129,53)" fg:x="360" fg:w="201"/><text x="2.0502%" y="718.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="724" width="1.0051%" height="15" fill="rgb(234,188,29)" fg:x="360" fg:w="201"/><text x="2.0502%" y="734.50"></text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (201 samples, 1.01%)</title><rect x="1.8002%" y="740" width="1.0051%" height="15" fill="rgb(246,141,4)" fg:x="360" fg:w="201"/><text x="2.0502%" y="750.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="756" width="1.0051%" height="15" fill="rgb(229,23,39)" fg:x="360" fg:w="201"/><text x="2.0502%" y="766.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="772" width="1.0051%" height="15" fill="rgb(206,12,3)" fg:x="360" fg:w="201"/><text x="2.0502%" y="782.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (201 samples, 1.01%)</title><rect x="1.8002%" y="788" width="1.0051%" height="15" fill="rgb(252,226,20)" fg:x="360" fg:w="201"/><text x="2.0502%" y="798.50"></text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new::_{{closure}} (201 samples, 1.01%)</title><rect x="1.8002%" y="804" width="1.0051%" height="15" fill="rgb(216,123,35)" fg:x="360" fg:w="201"/><text x="2.0502%" y="814.50"></text></g><g><title>sqlx_postgres::connection::executor::_&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many::_{{closure}}::_{{closure}} (201 samples, 1.01%)</title><rect x="1.8002%" y="820" width="1.0051%" height="15" fill="rgb(212,68,40)" fg:x="360" fg:w="201"/><text x="2.0502%" y="830.50"></text></g><g><title>sqlx_postgres::connection::executor::_&lt;impl sqlx_postgres::connection::PgConnection&gt;::run::_{{closure}} (200 samples, 1.00%)</title><rect x="1.8052%" y="836" width="1.0001%" height="15" fill="rgb(254,125,32)" fg:x="361" fg:w="200"/><text x="2.0552%" y="846.50"></text></g><g><title>sqlx_postgres::connection::executor::_&lt;impl sqlx_postgres::connection::PgConnection&gt;::get_or_prepare::_{{closure}} (21 samples, 0.11%)</title><rect x="2.7003%" y="852" width="0.1050%" height="15" fill="rgb(253,97,22)" fg:x="540" fg:w="21"/><text x="2.9503%" y="862.50"></text></g><g><title>&lt;http::method::Method as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="2.9153%" y="308" width="0.0150%" height="15" fill="rgb(241,101,14)" fg:x="583" fg:w="3"/><text x="3.1653%" y="318.50"></text></g><g><title>&lt;http::method::Inner as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="2.9153%" y="324" width="0.0150%" height="15" fill="rgb(238,103,29)" fg:x="583" fg:w="3"/><text x="3.1653%" y="334.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="2.9353%" y="308" width="0.0100%" height="15" fill="rgb(233,195,47)" fg:x="587" fg:w="2"/><text x="3.1853%" y="318.50"></text></g><g><title>bytes::bytes::Bytes::slice (9 samples, 0.05%)</title><rect x="2.9453%" y="308" width="0.0450%" height="15" fill="rgb(246,218,30)" fg:x="589" fg:w="9"/><text x="3.1953%" y="318.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::clone::Clone&gt;::clone (7 samples, 0.04%)</title><rect x="2.9553%" y="324" width="0.0350%" height="15" fill="rgb(219,145,47)" fg:x="591" fg:w="7"/><text x="3.2053%" y="334.50"></text></g><g><title>bytes::bytes_mut::shared_v_clone (5 samples, 0.03%)</title><rect x="2.9653%" y="340" width="0.0250%" height="15" fill="rgb(243,12,26)" fg:x="593" fg:w="5"/><text x="3.2153%" y="350.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.01%)</title><rect x="2.9803%" y="356" width="0.0100%" height="15" fill="rgb(214,87,16)" fg:x="596" fg:w="2"/><text x="3.2303%" y="366.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="2.9803%" y="372" width="0.0100%" height="15" fill="rgb(208,99,42)" fg:x="596" fg:w="2"/><text x="3.2303%" y="382.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (3 samples, 0.02%)</title><rect x="3.0053%" y="324" width="0.0150%" height="15" fill="rgb(253,99,2)" fg:x="601" fg:w="3"/><text x="3.2553%" y="334.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (10 samples, 0.05%)</title><rect x="2.9953%" y="308" width="0.0500%" height="15" fill="rgb(220,168,23)" fg:x="599" fg:w="10"/><text x="3.2453%" y="318.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (5 samples, 0.03%)</title><rect x="3.0203%" y="324" width="0.0250%" height="15" fill="rgb(242,38,24)" fg:x="604" fg:w="5"/><text x="3.2703%" y="334.50"></text></g><g><title>bytes::bytes_mut::BytesMut::promote_to_shared (5 samples, 0.03%)</title><rect x="3.0203%" y="340" width="0.0250%" height="15" fill="rgb(225,182,9)" fg:x="604" fg:w="5"/><text x="3.2703%" y="350.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.03%)</title><rect x="3.0203%" y="356" width="0.0250%" height="15" fill="rgb(243,178,37)" fg:x="604" fg:w="5"/><text x="3.2703%" y="366.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.03%)</title><rect x="3.0203%" y="372" width="0.0250%" height="15" fill="rgb(232,139,19)" fg:x="604" fg:w="5"/><text x="3.2703%" y="382.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.03%)</title><rect x="3.0203%" y="388" width="0.0250%" height="15" fill="rgb(225,201,24)" fg:x="604" fg:w="5"/><text x="3.2703%" y="398.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.03%)</title><rect x="3.0203%" y="404" width="0.0250%" height="15" fill="rgb(221,47,46)" fg:x="604" fg:w="5"/><text x="3.2703%" y="414.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.03%)</title><rect x="3.0203%" y="420" width="0.0250%" height="15" fill="rgb(249,23,13)" fg:x="604" fg:w="5"/><text x="3.2703%" y="430.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.03%)</title><rect x="3.0203%" y="436" width="0.0250%" height="15" fill="rgb(219,9,5)" fg:x="604" fg:w="5"/><text x="3.2703%" y="446.50"></text></g><g><title>core::array::_&lt;impl core::ops::index::Index&lt;I&gt; for [T: N]&gt;::index (3 samples, 0.02%)</title><rect x="3.0453%" y="308" width="0.0150%" height="15" fill="rgb(254,171,16)" fg:x="609" fg:w="3"/><text x="3.2953%" y="318.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="3.0453%" y="324" width="0.0150%" height="15" fill="rgb(230,171,20)" fg:x="609" fg:w="3"/><text x="3.2953%" y="334.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="3.0453%" y="340" width="0.0150%" height="15" fill="rgb(210,71,41)" fg:x="609" fg:w="3"/><text x="3.2953%" y="350.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="3.0453%" y="356" width="0.0150%" height="15" fill="rgb(206,173,20)" fg:x="609" fg:w="3"/><text x="3.2953%" y="366.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (2 samples, 0.01%)</title><rect x="3.0653%" y="308" width="0.0100%" height="15" fill="rgb(233,88,34)" fg:x="613" fg:w="2"/><text x="3.3153%" y="318.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;http::method::Method&gt;&gt; (3 samples, 0.02%)</title><rect x="3.0753%" y="308" width="0.0150%" height="15" fill="rgb(223,209,46)" fg:x="615" fg:w="3"/><text x="3.3253%" y="318.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (2 samples, 0.01%)</title><rect x="3.0953%" y="372" width="0.0100%" height="15" fill="rgb(250,43,18)" fg:x="619" fg:w="2"/><text x="3.3453%" y="382.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (2 samples, 0.01%)</title><rect x="3.0953%" y="388" width="0.0100%" height="15" fill="rgb(208,13,10)" fg:x="619" fg:w="2"/><text x="3.3453%" y="398.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="3.1353%" y="548" width="0.0100%" height="15" fill="rgb(212,200,36)" fg:x="627" fg:w="2"/><text x="3.3853%" y="558.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.05%)</title><rect x="3.1103%" y="532" width="0.0450%" height="15" fill="rgb(225,90,30)" fg:x="622" fg:w="9"/><text x="3.3603%" y="542.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="3.1453%" y="548" width="0.0100%" height="15" fill="rgb(236,182,39)" fg:x="629" fg:w="2"/><text x="3.3953%" y="558.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="3.1553%" y="532" width="0.0100%" height="15" fill="rgb(212,144,35)" fg:x="631" fg:w="2"/><text x="3.4053%" y="542.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.06%)</title><rect x="3.1103%" y="436" width="0.0600%" height="15" fill="rgb(228,63,44)" fg:x="622" fg:w="12"/><text x="3.3603%" y="446.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.06%)</title><rect x="3.1103%" y="452" width="0.0600%" height="15" fill="rgb(228,109,6)" fg:x="622" fg:w="12"/><text x="3.3603%" y="462.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.06%)</title><rect x="3.1103%" y="468" width="0.0600%" height="15" fill="rgb(238,117,24)" fg:x="622" fg:w="12"/><text x="3.3603%" y="478.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.06%)</title><rect x="3.1103%" y="484" width="0.0600%" height="15" fill="rgb(242,26,26)" fg:x="622" fg:w="12"/><text x="3.3603%" y="494.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.06%)</title><rect x="3.1103%" y="500" width="0.0600%" height="15" fill="rgb(221,92,48)" fg:x="622" fg:w="12"/><text x="3.3603%" y="510.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.06%)</title><rect x="3.1103%" y="516" width="0.0600%" height="15" fill="rgb(209,209,32)" fg:x="622" fg:w="12"/><text x="3.3603%" y="526.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (17 samples, 0.09%)</title><rect x="3.0903%" y="356" width="0.0850%" height="15" fill="rgb(221,70,22)" fg:x="618" fg:w="17"/><text x="3.3403%" y="366.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (14 samples, 0.07%)</title><rect x="3.1053%" y="372" width="0.0700%" height="15" fill="rgb(248,145,5)" fg:x="621" fg:w="14"/><text x="3.3553%" y="382.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.07%)</title><rect x="3.1053%" y="388" width="0.0700%" height="15" fill="rgb(226,116,26)" fg:x="621" fg:w="14"/><text x="3.3553%" y="398.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.07%)</title><rect x="3.1053%" y="404" width="0.0700%" height="15" fill="rgb(244,5,17)" fg:x="621" fg:w="14"/><text x="3.3553%" y="414.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.07%)</title><rect x="3.1053%" y="420" width="0.0700%" height="15" fill="rgb(252,159,33)" fg:x="621" fg:w="14"/><text x="3.3553%" y="430.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.01%)</title><rect x="3.1953%" y="388" width="0.0100%" height="15" fill="rgb(206,71,0)" fg:x="639" fg:w="2"/><text x="3.4453%" y="398.50"></text></g><g><title>__GI___libc_free (6 samples, 0.03%)</title><rect x="3.2053%" y="388" width="0.0300%" height="15" fill="rgb(233,118,54)" fg:x="641" fg:w="6"/><text x="3.4553%" y="398.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (31 samples, 0.16%)</title><rect x="3.0903%" y="308" width="0.1550%" height="15" fill="rgb(234,83,48)" fg:x="618" fg:w="31"/><text x="3.3403%" y="318.50"></text></g><g><title>&lt;http::uri::Uri as core::str::traits::FromStr&gt;::from_str (31 samples, 0.16%)</title><rect x="3.0903%" y="324" width="0.1550%" height="15" fill="rgb(228,3,54)" fg:x="618" fg:w="31"/><text x="3.3403%" y="334.50"></text></g><g><title>&lt;http::uri::Uri as core::convert::TryFrom&lt;&amp;[u8]&gt;&gt;::try_from (31 samples, 0.16%)</title><rect x="3.0903%" y="340" width="0.1550%" height="15" fill="rgb(226,155,13)" fg:x="618" fg:w="31"/><text x="3.3403%" y="350.50"></text></g><g><title>http::uri::Uri::from_shared (14 samples, 0.07%)</title><rect x="3.1753%" y="356" width="0.0700%" height="15" fill="rgb(241,28,37)" fg:x="635" fg:w="14"/><text x="3.4253%" y="366.50"></text></g><g><title>bytes::bytes::promotable_even_drop (13 samples, 0.07%)</title><rect x="3.1803%" y="372" width="0.0650%" height="15" fill="rgb(233,93,10)" fg:x="636" fg:w="13"/><text x="3.4303%" y="382.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.01%)</title><rect x="3.2353%" y="388" width="0.0100%" height="15" fill="rgb(225,113,19)" fg:x="647" fg:w="2"/><text x="3.4853%" y="398.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.01%)</title><rect x="3.2353%" y="404" width="0.0100%" height="15" fill="rgb(241,2,18)" fg:x="647" fg:w="2"/><text x="3.4853%" y="414.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_entry (6 samples, 0.03%)</title><rect x="3.2653%" y="356" width="0.0300%" height="15" fill="rgb(228,207,21)" fg:x="653" fg:w="6"/><text x="3.5153%" y="366.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.02%)</title><rect x="3.2753%" y="372" width="0.0200%" height="15" fill="rgb(213,211,35)" fg:x="655" fg:w="4"/><text x="3.5253%" y="382.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="3.2803%" y="388" width="0.0150%" height="15" fill="rgb(209,83,10)" fg:x="656" fg:w="3"/><text x="3.5303%" y="398.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (5 samples, 0.03%)</title><rect x="3.2953%" y="356" width="0.0250%" height="15" fill="rgb(209,164,1)" fg:x="659" fg:w="5"/><text x="3.5453%" y="366.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append (19 samples, 0.10%)</title><rect x="3.2453%" y="308" width="0.0950%" height="15" fill="rgb(213,184,43)" fg:x="649" fg:w="19"/><text x="3.4953%" y="318.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::append (19 samples, 0.10%)</title><rect x="3.2453%" y="324" width="0.0950%" height="15" fill="rgb(231,61,34)" fg:x="649" fg:w="19"/><text x="3.4953%" y="334.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::append2 (19 samples, 0.10%)</title><rect x="3.2453%" y="340" width="0.0950%" height="15" fill="rgb(235,75,3)" fg:x="649" fg:w="19"/><text x="3.4953%" y="350.50"></text></g><g><title>http::header::map::Pos::resolve (4 samples, 0.02%)</title><rect x="3.3203%" y="356" width="0.0200%" height="15" fill="rgb(220,106,47)" fg:x="664" fg:w="4"/><text x="3.5703%" y="366.50"></text></g><g><title>http::header::map::Pos::is_some (4 samples, 0.02%)</title><rect x="3.3203%" y="372" width="0.0200%" height="15" fill="rgb(210,196,33)" fg:x="664" fg:w="4"/><text x="3.5703%" y="382.50"></text></g><g><title>http::header::map::Pos::is_none (4 samples, 0.02%)</title><rect x="3.3203%" y="388" width="0.0200%" height="15" fill="rgb(229,154,42)" fg:x="664" fg:w="4"/><text x="3.5703%" y="398.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve (2 samples, 0.01%)</title><rect x="3.3403%" y="308" width="0.0100%" height="15" fill="rgb(228,114,26)" fg:x="668" fg:w="2"/><text x="3.5903%" y="318.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.05%)</title><rect x="3.3653%" y="340" width="0.0450%" height="15" fill="rgb(208,144,1)" fg:x="673" fg:w="9"/><text x="3.6153%" y="350.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.05%)</title><rect x="3.3653%" y="356" width="0.0450%" height="15" fill="rgb(239,112,37)" fg:x="673" fg:w="9"/><text x="3.6153%" y="366.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (8 samples, 0.04%)</title><rect x="3.3703%" y="372" width="0.0400%" height="15" fill="rgb(210,96,50)" fg:x="674" fg:w="8"/><text x="3.6203%" y="382.50"></text></g><g><title>http::header::name::parse_hdr::_{{closure}} (8 samples, 0.04%)</title><rect x="3.3703%" y="388" width="0.0400%" height="15" fill="rgb(222,178,2)" fg:x="674" fg:w="8"/><text x="3.6203%" y="398.50"></text></g><g><title>http::header::name::HeaderName::from_bytes (31 samples, 0.16%)</title><rect x="3.3503%" y="308" width="0.1550%" height="15" fill="rgb(226,74,18)" fg:x="670" fg:w="31"/><text x="3.6003%" y="318.50"></text></g><g><title>http::header::name::parse_hdr (28 samples, 0.14%)</title><rect x="3.3653%" y="324" width="0.1400%" height="15" fill="rgb(225,67,54)" fg:x="673" fg:w="28"/><text x="3.6153%" y="334.50"></text></g><g><title>http::header::name::StandardHeader::from_bytes (19 samples, 0.10%)</title><rect x="3.4103%" y="340" width="0.0950%" height="15" fill="rgb(251,92,32)" fg:x="682" fg:w="19"/><text x="3.6603%" y="350.50"></text></g><g><title>httparse::Request::parse_with_uninit_headers (3 samples, 0.02%)</title><rect x="3.5104%" y="308" width="0.0150%" height="15" fill="rgb(228,149,22)" fg:x="702" fg:w="3"/><text x="3.7604%" y="318.50"></text></g><g><title>httparse::Request::parse_with_config_and_uninit_headers (3 samples, 0.02%)</title><rect x="3.5104%" y="324" width="0.0150%" height="15" fill="rgb(243,54,13)" fg:x="702" fg:w="3"/><text x="3.7604%" y="334.50"></text></g><g><title>httparse::parse_headers_iter_uninit (3 samples, 0.02%)</title><rect x="3.5104%" y="340" width="0.0150%" height="15" fill="rgb(243,180,28)" fg:x="702" fg:w="3"/><text x="3.7604%" y="350.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (146 samples, 0.73%)</title><rect x="2.8053%" y="212" width="0.7301%" height="15" fill="rgb(208,167,24)" fg:x="561" fg:w="146"/><text x="3.0553%" y="222.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (146 samples, 0.73%)</title><rect x="2.8053%" y="228" width="0.7301%" height="15" fill="rgb(245,73,45)" fg:x="561" fg:w="146"/><text x="3.0553%" y="238.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (146 samples, 0.73%)</title><rect x="2.8053%" y="244" width="0.7301%" height="15" fill="rgb(237,203,48)" fg:x="561" fg:w="146"/><text x="3.0553%" y="254.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (146 samples, 0.73%)</title><rect x="2.8053%" y="260" width="0.7301%" height="15" fill="rgb(211,197,16)" fg:x="561" fg:w="146"/><text x="3.0553%" y="270.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (146 samples, 0.73%)</title><rect x="2.8053%" y="276" width="0.7301%" height="15" fill="rgb(243,99,51)" fg:x="561" fg:w="146"/><text x="3.0553%" y="286.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::parse (146 samples, 0.73%)</title><rect x="2.8053%" y="292" width="0.7301%" height="15" fill="rgb(215,123,29)" fg:x="561" fg:w="146"/><text x="3.0553%" y="302.50"></text></g><g><title>hyper::proto::h1::role::record_header_indices (2 samples, 0.01%)</title><rect x="3.5254%" y="308" width="0.0100%" height="15" fill="rgb(239,186,37)" fg:x="705" fg:w="2"/><text x="3.7754%" y="318.50"></text></g><g><title>&lt;rust_axum::DatabaseConnection as axum_core::extract::FromRequestParts&lt;S&gt;&gt;::from_request_parts::_{{closure}} (7 samples, 0.04%)</title><rect x="3.5704%" y="516" width="0.0350%" height="15" fill="rgb(252,136,39)" fg:x="714" fg:w="7"/><text x="3.8204%" y="526.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11 samples, 0.06%)</title><rect x="3.5654%" y="500" width="0.0550%" height="15" fill="rgb(223,213,32)" fg:x="713" fg:w="11"/><text x="3.8154%" y="510.50"></text></g><g><title>core::pin::Pin&lt;&amp;mut core::pin::Pin&lt;P&gt;&gt;::as_deref_mut (3 samples, 0.02%)</title><rect x="3.6054%" y="516" width="0.0150%" height="15" fill="rgb(233,115,5)" fg:x="721" fg:w="3"/><text x="3.8554%" y="526.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (3 samples, 0.02%)</title><rect x="3.6054%" y="532" width="0.0150%" height="15" fill="rgb(207,226,44)" fg:x="721" fg:w="3"/><text x="3.8554%" y="542.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.02%)</title><rect x="3.6054%" y="548" width="0.0150%" height="15" fill="rgb(208,126,0)" fg:x="721" fg:w="3"/><text x="3.8554%" y="558.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.10%)</title><rect x="3.6204%" y="548" width="0.0950%" height="15" fill="rgb(244,66,21)" fg:x="724" fg:w="19"/><text x="3.8704%" y="558.50"></text></g><g><title>__memmove_avx_unaligned (3 samples, 0.02%)</title><rect x="3.7154%" y="548" width="0.0150%" height="15" fill="rgb(222,97,12)" fg:x="743" fg:w="3"/><text x="3.9654%" y="558.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.06%)</title><rect x="3.7304%" y="612" width="0.0600%" height="15" fill="rgb(219,213,19)" fg:x="746" fg:w="12"/><text x="3.9804%" y="622.50"></text></g><g><title>_int_malloc (10 samples, 0.05%)</title><rect x="3.7404%" y="628" width="0.0500%" height="15" fill="rgb(252,169,30)" fg:x="748" fg:w="10"/><text x="3.9904%" y="638.50"></text></g><g><title>unlink_chunk (2 samples, 0.01%)</title><rect x="3.7804%" y="644" width="0.0100%" height="15" fill="rgb(206,32,51)" fg:x="756" fg:w="2"/><text x="4.0304%" y="654.50"></text></g><g><title>&lt;rust_axum::DatabaseConnection as axum_core::extract::FromRequestParts&lt;S&gt;&gt;::from_request_parts (37 samples, 0.19%)</title><rect x="3.6204%" y="500" width="0.1850%" height="15" fill="rgb(250,172,42)" fg:x="724" fg:w="37"/><text x="3.8704%" y="510.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (37 samples, 0.19%)</title><rect x="3.6204%" y="516" width="0.1850%" height="15" fill="rgb(209,34,43)" fg:x="724" fg:w="37"/><text x="3.8704%" y="526.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (37 samples, 0.19%)</title><rect x="3.6204%" y="532" width="0.1850%" height="15" fill="rgb(223,11,35)" fg:x="724" fg:w="37"/><text x="3.8704%" y="542.50"></text></g><g><title>alloc::alloc::exchange_malloc (15 samples, 0.08%)</title><rect x="3.7304%" y="548" width="0.0750%" height="15" fill="rgb(251,219,26)" fg:x="746" fg:w="15"/><text x="3.9804%" y="558.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.08%)</title><rect x="3.7304%" y="564" width="0.0750%" height="15" fill="rgb(231,119,3)" fg:x="746" fg:w="15"/><text x="3.9804%" y="574.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.08%)</title><rect x="3.7304%" y="580" width="0.0750%" height="15" fill="rgb(216,97,11)" fg:x="746" fg:w="15"/><text x="3.9804%" y="590.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.08%)</title><rect x="3.7304%" y="596" width="0.0750%" height="15" fill="rgb(223,59,9)" fg:x="746" fg:w="15"/><text x="3.9804%" y="606.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="3.7904%" y="612" width="0.0150%" height="15" fill="rgb(233,93,31)" fg:x="758" fg:w="3"/><text x="4.0404%" y="622.50"></text></g><g><title>__GI___libc_free (6 samples, 0.03%)</title><rect x="3.8054%" y="500" width="0.0300%" height="15" fill="rgb(239,81,33)" fg:x="761" fg:w="6"/><text x="4.0554%" y="510.50"></text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="3.8104%" y="516" width="0.0250%" height="15" fill="rgb(213,120,34)" fg:x="762" fg:w="5"/><text x="4.0604%" y="526.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="3.8354%" y="500" width="0.0100%" height="15" fill="rgb(243,49,53)" fg:x="767" fg:w="2"/><text x="4.0854%" y="510.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="3.8454%" y="500" width="0.0100%" height="15" fill="rgb(247,216,33)" fg:x="769" fg:w="2"/><text x="4.0954%" y="510.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::result::Result&lt;rust_axum::DatabaseConnection,(http::status::StatusCode,alloc::string::String)&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="3.8554%" y="500" width="0.0150%" height="15" fill="rgb(226,26,14)" fg:x="771" fg:w="3"/><text x="4.1054%" y="510.50"></text></g><g><title>__GI___lll_lock_wake_private (2 samples, 0.01%)</title><rect x="3.8804%" y="596" width="0.0100%" height="15" fill="rgb(215,49,53)" fg:x="776" fg:w="2"/><text x="4.1304%" y="606.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.8804%" y="612" width="0.0100%" height="15" fill="rgb(245,162,40)" fg:x="776" fg:w="2"/><text x="4.1304%" y="622.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.8804%" y="628" width="0.0100%" height="15" fill="rgb(229,68,17)" fg:x="776" fg:w="2"/><text x="4.1304%" y="638.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.8804%" y="644" width="0.0100%" height="15" fill="rgb(213,182,10)" fg:x="776" fg:w="2"/><text x="4.1304%" y="654.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.8804%" y="660" width="0.0100%" height="15" fill="rgb(245,125,30)" fg:x="776" fg:w="2"/><text x="4.1304%" y="670.50"></text></g><g><title>__GI___lll_lock_wait_private (2 samples, 0.01%)</title><rect x="3.9254%" y="612" width="0.0100%" height="15" fill="rgb(232,202,2)" fg:x="785" fg:w="2"/><text x="4.1754%" y="622.50"></text></g><g><title>futex_wait (2 samples, 0.01%)</title><rect x="3.9254%" y="628" width="0.0100%" height="15" fill="rgb(237,140,51)" fg:x="785" fg:w="2"/><text x="4.1754%" y="638.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.9254%" y="644" width="0.0100%" height="15" fill="rgb(236,157,25)" fg:x="785" fg:w="2"/><text x="4.1754%" y="654.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.9254%" y="660" width="0.0100%" height="15" fill="rgb(219,209,0)" fg:x="785" fg:w="2"/><text x="4.1754%" y="670.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.9254%" y="676" width="0.0100%" height="15" fill="rgb(240,116,54)" fg:x="785" fg:w="2"/><text x="4.1754%" y="686.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.9254%" y="692" width="0.0100%" height="15" fill="rgb(216,10,36)" fg:x="785" fg:w="2"/><text x="4.1754%" y="702.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.9254%" y="708" width="0.0100%" height="15" fill="rgb(222,72,44)" fg:x="785" fg:w="2"/><text x="4.1754%" y="718.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="3.9254%" y="724" width="0.0100%" height="15" fill="rgb(232,159,9)" fg:x="785" fg:w="2"/><text x="4.1754%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;rust_axum::DatabaseConnection,(http::status::StatusCode,alloc::string::String)&gt;+core::marker::Send&gt;&gt;&gt; (14 samples, 0.07%)</title><rect x="3.8704%" y="500" width="0.0700%" height="15" fill="rgb(210,39,32)" fg:x="774" fg:w="14"/><text x="4.1204%" y="510.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;rust_axum::DatabaseConnection,(http::status::StatusCode,alloc::string::String)&gt;+core::marker::Send&gt;&gt; (14 samples, 0.07%)</title><rect x="3.8704%" y="516" width="0.0700%" height="15" fill="rgb(216,194,45)" fg:x="774" fg:w="14"/><text x="4.1204%" y="526.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.07%)</title><rect x="3.8704%" y="532" width="0.0700%" height="15" fill="rgb(218,18,35)" fg:x="774" fg:w="14"/><text x="4.1204%" y="542.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (14 samples, 0.07%)</title><rect x="3.8704%" y="548" width="0.0700%" height="15" fill="rgb(207,83,51)" fg:x="774" fg:w="14"/><text x="4.1204%" y="558.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.07%)</title><rect x="3.8704%" y="564" width="0.0700%" height="15" fill="rgb(225,63,43)" fg:x="774" fg:w="14"/><text x="4.1204%" y="574.50"></text></g><g><title>__GI___libc_free (14 samples, 0.07%)</title><rect x="3.8704%" y="580" width="0.0700%" height="15" fill="rgb(207,57,36)" fg:x="774" fg:w="14"/><text x="4.1204%" y="590.50"></text></g><g><title>_int_free (10 samples, 0.05%)</title><rect x="3.8904%" y="596" width="0.0500%" height="15" fill="rgb(216,99,33)" fg:x="778" fg:w="10"/><text x="4.1404%" y="606.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="3.9454%" y="628" width="0.0100%" height="15" fill="rgb(225,42,16)" fg:x="789" fg:w="2"/><text x="4.1954%" y="638.50"></text></g><g><title>__GI___libc_free (7 samples, 0.04%)</title><rect x="3.9754%" y="756" width="0.0350%" height="15" fill="rgb(220,201,45)" fg:x="795" fg:w="7"/><text x="4.2254%" y="766.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="3.9904%" y="772" width="0.0200%" height="15" fill="rgb(225,33,4)" fg:x="798" fg:w="4"/><text x="4.2404%" y="782.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="3.9754%" y="708" width="0.0400%" height="15" fill="rgb(224,33,50)" fg:x="795" fg:w="8"/><text x="4.2254%" y="718.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.04%)</title><rect x="3.9754%" y="724" width="0.0400%" height="15" fill="rgb(246,198,51)" fg:x="795" fg:w="8"/><text x="4.2254%" y="734.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.04%)</title><rect x="3.9754%" y="740" width="0.0400%" height="15" fill="rgb(205,22,4)" fg:x="795" fg:w="8"/><text x="4.2254%" y="750.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::extract::matched_path::MatchedPath&gt; (8 samples, 0.04%)</title><rect x="4.0154%" y="708" width="0.0400%" height="15" fill="rgb(206,3,8)" fg:x="803" fg:w="8"/><text x="4.2654%" y="718.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (8 samples, 0.04%)</title><rect x="4.0154%" y="724" width="0.0400%" height="15" fill="rgb(251,23,15)" fg:x="803" fg:w="8"/><text x="4.2654%" y="734.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="4.0154%" y="740" width="0.0400%" height="15" fill="rgb(252,88,28)" fg:x="803" fg:w="8"/><text x="4.2654%" y="750.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (3 samples, 0.02%)</title><rect x="4.0404%" y="756" width="0.0150%" height="15" fill="rgb(212,127,14)" fg:x="808" fg:w="3"/><text x="4.2904%" y="766.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.02%)</title><rect x="4.0404%" y="772" width="0.0150%" height="15" fill="rgb(247,145,37)" fg:x="808" fg:w="3"/><text x="4.2904%" y="782.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::url_params::UrlParams&gt; (5 samples, 0.03%)</title><rect x="4.0554%" y="708" width="0.0250%" height="15" fill="rgb(209,117,53)" fg:x="811" fg:w="5"/><text x="4.3054%" y="718.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (30 samples, 0.15%)</title><rect x="3.9604%" y="644" width="0.1500%" height="15" fill="rgb(212,90,42)" fg:x="792" fg:w="30"/><text x="4.2104%" y="654.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (30 samples, 0.15%)</title><rect x="3.9604%" y="660" width="0.1500%" height="15" fill="rgb(218,164,37)" fg:x="792" fg:w="30"/><text x="4.2104%" y="670.50"></text></g><g><title>core::ptr::drop_in_place&lt;(core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;)&gt; (30 samples, 0.15%)</title><rect x="3.9604%" y="676" width="0.1500%" height="15" fill="rgb(246,65,34)" fg:x="792" fg:w="30"/><text x="4.2104%" y="686.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;&gt; (27 samples, 0.14%)</title><rect x="3.9754%" y="692" width="0.1350%" height="15" fill="rgb(231,100,33)" fg:x="795" fg:w="27"/><text x="4.2254%" y="702.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (6 samples, 0.03%)</title><rect x="4.0804%" y="708" width="0.0300%" height="15" fill="rgb(228,126,14)" fg:x="816" fg:w="6"/><text x="4.3304%" y="718.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::scheme::Scheme&gt; (2 samples, 0.01%)</title><rect x="4.1004%" y="724" width="0.0100%" height="15" fill="rgb(215,173,21)" fg:x="820" fg:w="2"/><text x="4.3504%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::scheme::Scheme2&gt; (2 samples, 0.01%)</title><rect x="4.1004%" y="740" width="0.0100%" height="15" fill="rgb(210,6,40)" fg:x="820" fg:w="2"/><text x="4.3504%" y="750.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (32 samples, 0.16%)</title><rect x="3.9554%" y="628" width="0.1600%" height="15" fill="rgb(212,48,18)" fg:x="791" fg:w="32"/><text x="4.2054%" y="638.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.20%)</title><rect x="3.9454%" y="612" width="0.2000%" height="15" fill="rgb(230,214,11)" fg:x="789" fg:w="40"/><text x="4.1954%" y="622.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::is_empty_singleton (6 samples, 0.03%)</title><rect x="4.1154%" y="628" width="0.0300%" height="15" fill="rgb(254,105,39)" fg:x="823" fg:w="6"/><text x="4.3654%" y="638.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::extensions::Extensions&gt; (46 samples, 0.23%)</title><rect x="3.9404%" y="516" width="0.2300%" height="15" fill="rgb(245,158,5)" fg:x="788" fg:w="46"/><text x="4.1904%" y="526.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt;&gt; (46 samples, 0.23%)</title><rect x="3.9404%" y="532" width="0.2300%" height="15" fill="rgb(249,208,11)" fg:x="788" fg:w="46"/><text x="4.1904%" y="542.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt;&gt; (46 samples, 0.23%)</title><rect x="3.9404%" y="548" width="0.2300%" height="15" fill="rgb(210,39,28)" fg:x="788" fg:w="46"/><text x="4.1904%" y="558.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt; (45 samples, 0.23%)</title><rect x="3.9454%" y="564" width="0.2250%" height="15" fill="rgb(211,56,53)" fg:x="789" fg:w="45"/><text x="4.1954%" y="574.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;,core::hash::BuildHasherDefault&lt;http::extensions::IdHasher&gt;&gt;&gt; (45 samples, 0.23%)</title><rect x="3.9454%" y="580" width="0.2250%" height="15" fill="rgb(226,201,30)" fg:x="789" fg:w="45"/><text x="4.1954%" y="590.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(core::any::TypeId,alloc::boxed::Box&lt;dyn core::any::Any+core::marker::Send+core::marker::Sync&gt;)&gt;&gt; (45 samples, 0.23%)</title><rect x="3.9454%" y="596" width="0.2250%" height="15" fill="rgb(239,101,34)" fg:x="789" fg:w="45"/><text x="4.1954%" y="606.50"></text></g><g><title>__GI___libc_free (5 samples, 0.03%)</title><rect x="4.1454%" y="612" width="0.0250%" height="15" fill="rgb(226,209,5)" fg:x="829" fg:w="5"/><text x="4.3954%" y="622.50"></text></g><g><title>_int_free (2 samples, 0.01%)</title><rect x="4.1604%" y="628" width="0.0100%" height="15" fill="rgb(250,105,47)" fg:x="832" fg:w="2"/><text x="4.4104%" y="638.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;[http::header::map::Pos]&gt;&gt; (6 samples, 0.03%)</title><rect x="4.1804%" y="532" width="0.0300%" height="15" fill="rgb(230,72,3)" fg:x="836" fg:w="6"/><text x="4.4304%" y="542.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.03%)</title><rect x="4.1804%" y="548" width="0.0300%" height="15" fill="rgb(232,218,39)" fg:x="836" fg:w="6"/><text x="4.4304%" y="558.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.03%)</title><rect x="4.1804%" y="564" width="0.0300%" height="15" fill="rgb(248,166,6)" fg:x="836" fg:w="6"/><text x="4.4304%" y="574.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.03%)</title><rect x="4.1804%" y="580" width="0.0300%" height="15" fill="rgb(247,89,20)" fg:x="836" fg:w="6"/><text x="4.4304%" y="590.50"></text></g><g><title>__GI___libc_free (6 samples, 0.03%)</title><rect x="4.1804%" y="596" width="0.0300%" height="15" fill="rgb(248,130,54)" fg:x="836" fg:w="6"/><text x="4.4304%" y="606.50"></text></g><g><title>_int_free (2 samples, 0.01%)</title><rect x="4.2004%" y="612" width="0.0100%" height="15" fill="rgb(234,196,4)" fg:x="840" fg:w="2"/><text x="4.4504%" y="622.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::name::HeaderName&gt; (3 samples, 0.02%)</title><rect x="4.2154%" y="596" width="0.0150%" height="15" fill="rgb(250,143,31)" fg:x="843" fg:w="3"/><text x="4.4654%" y="606.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::name::Repr&lt;http::header::name::Custom&gt;&gt; (3 samples, 0.02%)</title><rect x="4.2154%" y="612" width="0.0150%" height="15" fill="rgb(211,110,34)" fg:x="843" fg:w="3"/><text x="4.4654%" y="622.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.16%)</title><rect x="4.2104%" y="548" width="0.1550%" height="15" fill="rgb(215,124,48)" fg:x="842" fg:w="31"/><text x="4.4604%" y="558.50"></text></g><g><title>core::ptr::drop_in_place&lt;[http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;]&gt; (30 samples, 0.15%)</title><rect x="4.2154%" y="564" width="0.1500%" height="15" fill="rgb(216,46,13)" fg:x="843" fg:w="30"/><text x="4.4654%" y="574.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;&gt; (30 samples, 0.15%)</title><rect x="4.2154%" y="580" width="0.1500%" height="15" fill="rgb(205,184,25)" fg:x="843" fg:w="30"/><text x="4.4654%" y="590.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::value::HeaderValue&gt; (27 samples, 0.14%)</title><rect x="4.2304%" y="596" width="0.1350%" height="15" fill="rgb(228,1,10)" fg:x="846" fg:w="27"/><text x="4.4804%" y="606.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (27 samples, 0.14%)</title><rect x="4.2304%" y="612" width="0.1350%" height="15" fill="rgb(213,116,27)" fg:x="846" fg:w="27"/><text x="4.4804%" y="622.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (27 samples, 0.14%)</title><rect x="4.2304%" y="628" width="0.1350%" height="15" fill="rgb(241,95,50)" fg:x="846" fg:w="27"/><text x="4.4804%" y="638.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (26 samples, 0.13%)</title><rect x="4.2354%" y="644" width="0.1300%" height="15" fill="rgb(238,48,32)" fg:x="847" fg:w="26"/><text x="4.4854%" y="654.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (26 samples, 0.13%)</title><rect x="4.2354%" y="660" width="0.1300%" height="15" fill="rgb(235,113,49)" fg:x="847" fg:w="26"/><text x="4.4854%" y="670.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (24 samples, 0.12%)</title><rect x="4.2454%" y="676" width="0.1200%" height="15" fill="rgb(205,127,43)" fg:x="849" fg:w="24"/><text x="4.4954%" y="686.50"></text></g><g><title>bytes::bytes_mut::release_shared (24 samples, 0.12%)</title><rect x="4.2454%" y="692" width="0.1200%" height="15" fill="rgb(250,162,2)" fg:x="849" fg:w="24"/><text x="4.4954%" y="702.50"></text></g><g><title>core::mem::drop (17 samples, 0.09%)</title><rect x="4.2804%" y="708" width="0.0850%" height="15" fill="rgb(220,13,41)" fg:x="856" fg:w="17"/><text x="4.5304%" y="718.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (17 samples, 0.09%)</title><rect x="4.2804%" y="724" width="0.0850%" height="15" fill="rgb(249,221,25)" fg:x="856" fg:w="17"/><text x="4.5304%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (17 samples, 0.09%)</title><rect x="4.2804%" y="740" width="0.0850%" height="15" fill="rgb(215,208,19)" fg:x="856" fg:w="17"/><text x="4.5304%" y="750.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (17 samples, 0.09%)</title><rect x="4.2804%" y="756" width="0.0850%" height="15" fill="rgb(236,175,2)" fg:x="856" fg:w="17"/><text x="4.5304%" y="766.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (17 samples, 0.09%)</title><rect x="4.2804%" y="772" width="0.0850%" height="15" fill="rgb(241,52,2)" fg:x="856" fg:w="17"/><text x="4.5304%" y="782.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.09%)</title><rect x="4.2804%" y="788" width="0.0850%" height="15" fill="rgb(248,140,14)" fg:x="856" fg:w="17"/><text x="4.5304%" y="798.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (17 samples, 0.09%)</title><rect x="4.2804%" y="804" width="0.0850%" height="15" fill="rgb(253,22,42)" fg:x="856" fg:w="17"/><text x="4.5304%" y="814.50"></text></g><g><title>alloc::alloc::dealloc (17 samples, 0.09%)</title><rect x="4.2804%" y="820" width="0.0850%" height="15" fill="rgb(234,61,47)" fg:x="856" fg:w="17"/><text x="4.5304%" y="830.50"></text></g><g><title>__GI___libc_free (17 samples, 0.09%)</title><rect x="4.2804%" y="836" width="0.0850%" height="15" fill="rgb(208,226,15)" fg:x="856" fg:w="17"/><text x="4.5304%" y="846.50"></text></g><g><title>_int_free (9 samples, 0.05%)</title><rect x="4.3204%" y="852" width="0.0450%" height="15" fill="rgb(217,221,4)" fg:x="864" fg:w="9"/><text x="4.5704%" y="862.50"></text></g><g><title>malloc_consolidate (2 samples, 0.01%)</title><rect x="4.3554%" y="868" width="0.0100%" height="15" fill="rgb(212,174,34)" fg:x="871" fg:w="2"/><text x="4.6054%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;&gt;&gt; (34 samples, 0.17%)</title><rect x="4.2104%" y="532" width="0.1700%" height="15" fill="rgb(253,83,4)" fg:x="842" fg:w="34"/><text x="4.4604%" y="542.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="4.3654%" y="548" width="0.0150%" height="15" fill="rgb(250,195,49)" fg:x="873" fg:w="3"/><text x="4.6154%" y="558.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="4.3654%" y="564" width="0.0150%" height="15" fill="rgb(241,192,25)" fg:x="873" fg:w="3"/><text x="4.6154%" y="574.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="4.3654%" y="580" width="0.0150%" height="15" fill="rgb(208,124,10)" fg:x="873" fg:w="3"/><text x="4.6154%" y="590.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="4.3654%" y="596" width="0.0150%" height="15" fill="rgb(222,33,0)" fg:x="873" fg:w="3"/><text x="4.6154%" y="606.50"></text></g><g><title>__GI___libc_free (3 samples, 0.02%)</title><rect x="4.3654%" y="612" width="0.0150%" height="15" fill="rgb(234,209,28)" fg:x="873" fg:w="3"/><text x="4.6154%" y="622.50"></text></g><g><title>_int_free (2 samples, 0.01%)</title><rect x="4.3704%" y="628" width="0.0100%" height="15" fill="rgb(224,11,23)" fg:x="874" fg:w="2"/><text x="4.6204%" y="638.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (43 samples, 0.22%)</title><rect x="4.1704%" y="516" width="0.2150%" height="15" fill="rgb(232,99,1)" fg:x="834" fg:w="43"/><text x="4.4204%" y="526.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::request::Parts&gt; (91 samples, 0.46%)</title><rect x="3.9404%" y="500" width="0.4550%" height="15" fill="rgb(237,95,45)" fg:x="788" fg:w="91"/><text x="4.1904%" y="510.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (2 samples, 0.01%)</title><rect x="4.3854%" y="516" width="0.0100%" height="15" fill="rgb(208,109,11)" fg:x="877" fg:w="2"/><text x="4.6354%" y="526.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::body::body::Body&gt; (4 samples, 0.02%)</title><rect x="4.3954%" y="500" width="0.0200%" height="15" fill="rgb(216,190,48)" fg:x="879" fg:w="4"/><text x="4.6454%" y="510.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (177 samples, 0.89%)</title><rect x="3.5354%" y="468" width="0.8851%" height="15" fill="rgb(251,171,36)" fg:x="707" fg:w="177"/><text x="3.7854%" y="478.50"></text></g><g><title>&lt;T as axum_core::extract::FromRequest&lt;S,B,axum_core::extract::private::ViaParts&gt;&gt;::from_request::_{{closure}} (177 samples, 0.89%)</title><rect x="3.5354%" y="484" width="0.8851%" height="15" fill="rgb(230,62,22)" fg:x="707" fg:w="177"/><text x="3.7854%" y="494.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="4.4204%" y="532" width="0.0100%" height="15" fill="rgb(225,114,35)" fg:x="884" fg:w="2"/><text x="4.6704%" y="542.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::handle::Handle&gt; (3 samples, 0.02%)</title><rect x="4.4304%" y="532" width="0.0150%" height="15" fill="rgb(215,118,42)" fg:x="886" fg:w="3"/><text x="4.6804%" y="542.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Handle&gt; (3 samples, 0.02%)</title><rect x="4.4304%" y="548" width="0.0150%" height="15" fill="rgb(243,119,21)" fg:x="886" fg:w="3"/><text x="4.6804%" y="558.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt; (3 samples, 0.02%)</title><rect x="4.4304%" y="564" width="0.0150%" height="15" fill="rgb(252,177,53)" fg:x="886" fg:w="3"/><text x="4.6804%" y="574.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="4.4304%" y="580" width="0.0150%" height="15" fill="rgb(237,209,29)" fg:x="886" fg:w="3"/><text x="4.6804%" y="590.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (9 samples, 0.05%)</title><rect x="4.4504%" y="596" width="0.0450%" height="15" fill="rgb(212,65,23)" fg:x="890" fg:w="9"/><text x="4.7004%" y="606.50"></text></g><g><title>tokio::runtime::handle::Handle::try_current::_{{closure}} (9 samples, 0.05%)</title><rect x="4.4504%" y="612" width="0.0450%" height="15" fill="rgb(230,222,46)" fg:x="890" fg:w="9"/><text x="4.7004%" y="622.50"></text></g><g><title>&lt;tokio::runtime::scheduler::Handle as core::clone::Clone&gt;::clone (9 samples, 0.05%)</title><rect x="4.4504%" y="628" width="0.0450%" height="15" fill="rgb(215,135,32)" fg:x="890" fg:w="9"/><text x="4.7004%" y="638.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;&gt; (16 samples, 0.08%)</title><rect x="4.4204%" y="484" width="0.0800%" height="15" fill="rgb(246,101,22)" fg:x="884" fg:w="16"/><text x="4.6704%" y="494.50"></text></g><g><title>&lt;sqlx_core::pool::connection::PoolConnection&lt;DB&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.08%)</title><rect x="4.4204%" y="500" width="0.0800%" height="15" fill="rgb(206,107,13)" fg:x="884" fg:w="16"/><text x="4.6704%" y="510.50"></text></g><g><title>sqlx_core::rt::spawn (16 samples, 0.08%)</title><rect x="4.4204%" y="516" width="0.0800%" height="15" fill="rgb(250,100,44)" fg:x="884" fg:w="16"/><text x="4.6704%" y="526.50"></text></g><g><title>tokio::runtime::handle::Handle::try_current (10 samples, 0.05%)</title><rect x="4.4504%" y="532" width="0.0500%" height="15" fill="rgb(231,147,38)" fg:x="890" fg:w="10"/><text x="4.7004%" y="542.50"></text></g><g><title>tokio::runtime::context::current::with_current (10 samples, 0.05%)</title><rect x="4.4504%" y="548" width="0.0500%" height="15" fill="rgb(229,8,40)" fg:x="890" fg:w="10"/><text x="4.7004%" y="558.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.05%)</title><rect x="4.4504%" y="564" width="0.0500%" height="15" fill="rgb(221,135,30)" fg:x="890" fg:w="10"/><text x="4.7004%" y="574.50"></text></g><g><title>tokio::runtime::context::current::with_current::_{{closure}} (10 samples, 0.05%)</title><rect x="4.4504%" y="580" width="0.0500%" height="15" fill="rgb(249,193,18)" fg:x="890" fg:w="10"/><text x="4.7004%" y="590.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (8 samples, 0.04%)</title><rect x="4.5355%" y="820" width="0.0400%" height="15" fill="rgb(209,133,39)" fg:x="907" fg:w="8"/><text x="4.7855%" y="830.50"></text></g><g><title>__GI___libc_free (6 samples, 0.03%)</title><rect x="4.7005%" y="836" width="0.0300%" height="15" fill="rgb(232,100,14)" fg:x="940" fg:w="6"/><text x="4.9505%" y="846.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="4.7105%" y="852" width="0.0200%" height="15" fill="rgb(224,185,1)" fg:x="942" fg:w="4"/><text x="4.9605%" y="862.50"></text></g><g><title>&lt;futures_channel::mpsc::BoundedSenderInner&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="4.7405%" y="884" width="0.0100%" height="15" fill="rgb(223,139,8)" fg:x="948" fg:w="2"/><text x="4.9905%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="4.7355%" y="836" width="0.0250%" height="15" fill="rgb(232,213,38)" fg:x="947" fg:w="5"/><text x="4.9855%" y="846.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="4.7355%" y="852" width="0.0250%" height="15" fill="rgb(207,94,22)" fg:x="947" fg:w="5"/><text x="4.9855%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="4.7405%" y="868" width="0.0200%" height="15" fill="rgb(219,183,54)" fg:x="948" fg:w="4"/><text x="4.9905%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="4.7505%" y="884" width="0.0100%" height="15" fill="rgb(216,185,54)" fg:x="950" fg:w="2"/><text x="5.0005%" y="894.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="4.7505%" y="900" width="0.0100%" height="15" fill="rgb(254,217,39)" fg:x="950" fg:w="2"/><text x="5.0005%" y="910.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (3 samples, 0.02%)</title><rect x="5.1405%" y="852" width="0.0150%" height="15" fill="rgb(240,178,23)" fg:x="1028" fg:w="3"/><text x="5.3905%" y="862.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="5.1405%" y="868" width="0.0150%" height="15" fill="rgb(218,11,47)" fg:x="1028" fg:w="3"/><text x="5.3905%" y="878.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (52 samples, 0.26%)</title><rect x="5.1555%" y="852" width="0.2600%" height="15" fill="rgb(218,51,51)" fg:x="1031" fg:w="52"/><text x="5.4055%" y="862.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (8 samples, 0.04%)</title><rect x="5.5856%" y="948" width="0.0400%" height="15" fill="rgb(238,126,27)" fg:x="1117" fg:w="8"/><text x="5.8356%" y="958.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (22 samples, 0.11%)</title><rect x="5.5456%" y="884" width="0.1100%" height="15" fill="rgb(249,202,22)" fg:x="1109" fg:w="22"/><text x="5.7956%" y="894.50"></text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::poll_ready (22 samples, 0.11%)</title><rect x="5.5456%" y="900" width="0.1100%" height="15" fill="rgb(254,195,49)" fg:x="1109" fg:w="22"/><text x="5.7956%" y="910.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::poll_ready (22 samples, 0.11%)</title><rect x="5.5456%" y="916" width="0.1100%" height="15" fill="rgb(208,123,14)" fg:x="1109" fg:w="22"/><text x="5.7956%" y="926.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_ready (21 samples, 0.11%)</title><rect x="5.5506%" y="932" width="0.1050%" height="15" fill="rgb(224,200,8)" fg:x="1110" fg:w="21"/><text x="5.8006%" y="942.50"></text></g><g><title>futures_channel::mpsc::decode_state (6 samples, 0.03%)</title><rect x="5.6256%" y="948" width="0.0300%" height="15" fill="rgb(217,61,36)" fg:x="1125" fg:w="6"/><text x="5.8756%" y="958.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (3 samples, 0.02%)</title><rect x="6.2406%" y="980" width="0.0150%" height="15" fill="rgb(206,35,45)" fg:x="1248" fg:w="3"/><text x="6.4906%" y="990.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="6.2556%" y="980" width="0.0200%" height="15" fill="rgb(217,65,33)" fg:x="1251" fg:w="4"/><text x="6.5056%" y="990.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (4 samples, 0.02%)</title><rect x="6.2556%" y="996" width="0.0200%" height="15" fill="rgb(222,158,48)" fg:x="1251" fg:w="4"/><text x="6.5056%" y="1006.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.02%)</title><rect x="6.2556%" y="1012" width="0.0200%" height="15" fill="rgb(254,2,54)" fg:x="1251" fg:w="4"/><text x="6.5056%" y="1022.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::inc_num_messages (37 samples, 0.19%)</title><rect x="6.2756%" y="980" width="0.1850%" height="15" fill="rgb(250,143,38)" fg:x="1255" fg:w="37"/><text x="6.5256%" y="990.50"></text></g><g><title>futures_channel::mpsc::encode_state (6 samples, 0.03%)</title><rect x="6.4306%" y="996" width="0.0300%" height="15" fill="rgb(248,25,0)" fg:x="1286" fg:w="6"/><text x="6.6806%" y="1006.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (48 samples, 0.24%)</title><rect x="6.4706%" y="996" width="0.2400%" height="15" fill="rgb(206,152,27)" fg:x="1294" fg:w="48"/><text x="6.7206%" y="1006.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (40 samples, 0.20%)</title><rect x="6.7207%" y="996" width="0.2000%" height="15" fill="rgb(240,77,30)" fg:x="1344" fg:w="40"/><text x="6.9707%" y="1006.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.20%)</title><rect x="6.7207%" y="1012" width="0.2000%" height="15" fill="rgb(231,5,3)" fg:x="1344" fg:w="40"/><text x="6.9707%" y="1022.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (40 samples, 0.20%)</title><rect x="6.7207%" y="1028" width="0.2000%" height="15" fill="rgb(207,226,32)" fg:x="1344" fg:w="40"/><text x="6.9707%" y="1038.50"></text></g><g><title>futures_channel::mpsc::decode_state (4 samples, 0.02%)</title><rect x="6.9207%" y="996" width="0.0200%" height="15" fill="rgb(222,207,47)" fg:x="1384" fg:w="4"/><text x="7.1707%" y="1006.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (34 samples, 0.17%)</title><rect x="6.9407%" y="1012" width="0.1700%" height="15" fill="rgb(229,115,45)" fg:x="1388" fg:w="34"/><text x="7.1907%" y="1022.50"></text></g><g><title>core::sync::atomic::atomic_store (34 samples, 0.17%)</title><rect x="6.9407%" y="1028" width="0.1700%" height="15" fill="rgb(224,191,6)" fg:x="1388" fg:w="34"/><text x="7.1907%" y="1038.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (10 samples, 0.05%)</title><rect x="7.1107%" y="1012" width="0.0500%" height="15" fill="rgb(230,227,24)" fg:x="1422" fg:w="10"/><text x="7.3607%" y="1022.50"></text></g><g><title>core::sync::atomic::atomic_swap (10 samples, 0.05%)</title><rect x="7.1107%" y="1028" width="0.0500%" height="15" fill="rgb(228,80,19)" fg:x="1422" fg:w="10"/><text x="7.3607%" y="1038.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="7.4207%" y="1124" width="0.0200%" height="15" fill="rgb(247,229,0)" fg:x="1484" fg:w="4"/><text x="7.6707%" y="1134.50"></text></g><g><title>unlink_chunk (2 samples, 0.01%)</title><rect x="7.4307%" y="1140" width="0.0100%" height="15" fill="rgb(237,194,15)" fg:x="1486" fg:w="2"/><text x="7.6807%" y="1150.50"></text></g><g><title>__GI___libc_malloc (22 samples, 0.11%)</title><rect x="7.3457%" y="1108" width="0.1100%" height="15" fill="rgb(219,203,20)" fg:x="1469" fg:w="22"/><text x="7.5957%" y="1118.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="7.4407%" y="1124" width="0.0150%" height="15" fill="rgb(234,128,8)" fg:x="1488" fg:w="3"/><text x="7.6907%" y="1134.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="7.4557%" y="1108" width="0.0100%" height="15" fill="rgb(248,202,8)" fg:x="1491" fg:w="2"/><text x="7.7057%" y="1118.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (110 samples, 0.55%)</title><rect x="6.9407%" y="996" width="0.5501%" height="15" fill="rgb(206,104,37)" fg:x="1388" fg:w="110"/><text x="7.1907%" y="1006.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (66 samples, 0.33%)</title><rect x="7.1607%" y="1012" width="0.3300%" height="15" fill="rgb(223,8,27)" fg:x="1432" fg:w="66"/><text x="7.4107%" y="1022.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (66 samples, 0.33%)</title><rect x="7.1607%" y="1028" width="0.3300%" height="15" fill="rgb(216,217,28)" fg:x="1432" fg:w="66"/><text x="7.4107%" y="1038.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.16%)</title><rect x="7.3307%" y="1044" width="0.1600%" height="15" fill="rgb(249,199,1)" fg:x="1466" fg:w="32"/><text x="7.5807%" y="1054.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (31 samples, 0.16%)</title><rect x="7.3357%" y="1060" width="0.1550%" height="15" fill="rgb(240,85,17)" fg:x="1467" fg:w="31"/><text x="7.5857%" y="1070.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (31 samples, 0.16%)</title><rect x="7.3357%" y="1076" width="0.1550%" height="15" fill="rgb(206,108,45)" fg:x="1467" fg:w="31"/><text x="7.5857%" y="1086.50"></text></g><g><title>alloc::alloc::alloc (31 samples, 0.16%)</title><rect x="7.3357%" y="1092" width="0.1550%" height="15" fill="rgb(245,210,41)" fg:x="1467" fg:w="31"/><text x="7.5857%" y="1102.50"></text></g><g><title>__rust_alloc (5 samples, 0.03%)</title><rect x="7.4657%" y="1108" width="0.0250%" height="15" fill="rgb(206,13,37)" fg:x="1493" fg:w="5"/><text x="7.7157%" y="1118.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="7.4907%" y="1012" width="0.0200%" height="15" fill="rgb(250,61,18)" fg:x="1498" fg:w="4"/><text x="7.7407%" y="1022.50"></text></g><g><title>std::sync::poison::Flag::guard (4 samples, 0.02%)</title><rect x="7.4907%" y="1028" width="0.0200%" height="15" fill="rgb(235,172,48)" fg:x="1498" fg:w="4"/><text x="7.7407%" y="1038.50"></text></g><g><title>std::thread::panicking (4 samples, 0.02%)</title><rect x="7.4907%" y="1044" width="0.0200%" height="15" fill="rgb(249,201,17)" fg:x="1498" fg:w="4"/><text x="7.7407%" y="1054.50"></text></g><g><title>std::panicking::panicking (4 samples, 0.02%)</title><rect x="7.4907%" y="1060" width="0.0200%" height="15" fill="rgb(219,208,6)" fg:x="1498" fg:w="4"/><text x="7.7407%" y="1070.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (4 samples, 0.02%)</title><rect x="7.4907%" y="1076" width="0.0200%" height="15" fill="rgb(248,31,23)" fg:x="1498" fg:w="4"/><text x="7.7407%" y="1086.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.02%)</title><rect x="7.4957%" y="1092" width="0.0150%" height="15" fill="rgb(245,15,42)" fg:x="1499" fg:w="3"/><text x="7.7457%" y="1102.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="7.4957%" y="1108" width="0.0150%" height="15" fill="rgb(222,217,39)" fg:x="1499" fg:w="3"/><text x="7.7457%" y="1118.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::park (268 samples, 1.34%)</title><rect x="6.4606%" y="980" width="1.3401%" height="15" fill="rgb(210,219,27)" fg:x="1292" fg:w="268"/><text x="6.7106%" y="990.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (62 samples, 0.31%)</title><rect x="7.4907%" y="996" width="0.3100%" height="15" fill="rgb(252,166,36)" fg:x="1498" fg:w="62"/><text x="7.7407%" y="1006.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (58 samples, 0.29%)</title><rect x="7.5108%" y="1012" width="0.2900%" height="15" fill="rgb(245,132,34)" fg:x="1502" fg:w="58"/><text x="7.7608%" y="1022.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (58 samples, 0.29%)</title><rect x="7.5108%" y="1028" width="0.2900%" height="15" fill="rgb(236,54,3)" fg:x="1502" fg:w="58"/><text x="7.7608%" y="1038.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (58 samples, 0.29%)</title><rect x="7.5108%" y="1044" width="0.2900%" height="15" fill="rgb(241,173,43)" fg:x="1502" fg:w="58"/><text x="7.7608%" y="1054.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (4 samples, 0.02%)</title><rect x="7.8058%" y="1012" width="0.0200%" height="15" fill="rgb(215,190,9)" fg:x="1561" fg:w="4"/><text x="8.0558%" y="1022.50"></text></g><g><title>core::sync::atomic::atomic_store (4 samples, 0.02%)</title><rect x="7.8058%" y="1028" width="0.0200%" height="15" fill="rgb(242,101,16)" fg:x="1561" fg:w="4"/><text x="8.0558%" y="1038.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (2 samples, 0.01%)</title><rect x="7.8258%" y="1012" width="0.0100%" height="15" fill="rgb(223,190,21)" fg:x="1565" fg:w="2"/><text x="8.0758%" y="1022.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.01%)</title><rect x="7.8258%" y="1028" width="0.0100%" height="15" fill="rgb(215,228,25)" fg:x="1565" fg:w="2"/><text x="8.0758%" y="1038.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.12%)</title><rect x="8.0758%" y="1108" width="0.1150%" height="15" fill="rgb(225,36,22)" fg:x="1615" fg:w="23"/><text x="8.3258%" y="1118.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="8.1758%" y="1124" width="0.0150%" height="15" fill="rgb(251,106,46)" fg:x="1635" fg:w="3"/><text x="8.4258%" y="1134.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="8.1908%" y="1108" width="0.0100%" height="15" fill="rgb(208,90,1)" fg:x="1638" fg:w="2"/><text x="8.4408%" y="1118.50"></text></g><g><title>__rust_alloc (4 samples, 0.02%)</title><rect x="8.2008%" y="1108" width="0.0200%" height="15" fill="rgb(243,10,4)" fg:x="1640" fg:w="4"/><text x="8.4508%" y="1118.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (84 samples, 0.42%)</title><rect x="7.8058%" y="996" width="0.4200%" height="15" fill="rgb(212,137,27)" fg:x="1561" fg:w="84"/><text x="8.0558%" y="1006.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (78 samples, 0.39%)</title><rect x="7.8358%" y="1012" width="0.3900%" height="15" fill="rgb(231,220,49)" fg:x="1567" fg:w="78"/><text x="8.0858%" y="1022.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (78 samples, 0.39%)</title><rect x="7.8358%" y="1028" width="0.3900%" height="15" fill="rgb(237,96,20)" fg:x="1567" fg:w="78"/><text x="8.0858%" y="1038.50"></text></g><g><title>alloc::alloc::exchange_malloc (30 samples, 0.15%)</title><rect x="8.0758%" y="1044" width="0.1500%" height="15" fill="rgb(239,229,30)" fg:x="1615" fg:w="30"/><text x="8.3258%" y="1054.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 0.15%)</title><rect x="8.0758%" y="1060" width="0.1500%" height="15" fill="rgb(219,65,33)" fg:x="1615" fg:w="30"/><text x="8.3258%" y="1070.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 0.15%)</title><rect x="8.0758%" y="1076" width="0.1500%" height="15" fill="rgb(243,134,7)" fg:x="1615" fg:w="30"/><text x="8.3258%" y="1086.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 0.15%)</title><rect x="8.0758%" y="1092" width="0.1500%" height="15" fill="rgb(216,177,54)" fg:x="1615" fg:w="30"/><text x="8.3258%" y="1102.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::do_send_b (528 samples, 2.64%)</title><rect x="6.1856%" y="964" width="2.6403%" height="15" fill="rgb(211,160,20)" fg:x="1237" fg:w="528"/><text x="6.4356%" y="974.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::queue_push_and_signal (205 samples, 1.03%)</title><rect x="7.8008%" y="980" width="1.0251%" height="15" fill="rgb(239,85,39)" fg:x="1560" fg:w="205"/><text x="8.0508%" y="990.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (120 samples, 0.60%)</title><rect x="8.2258%" y="996" width="0.6001%" height="15" fill="rgb(232,125,22)" fg:x="1645" fg:w="120"/><text x="8.4758%" y="1006.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::take (69 samples, 0.35%)</title><rect x="8.4808%" y="1012" width="0.3450%" height="15" fill="rgb(244,57,34)" fg:x="1696" fg:w="69"/><text x="8.7308%" y="1022.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (69 samples, 0.35%)</title><rect x="8.4808%" y="1028" width="0.3450%" height="15" fill="rgb(214,203,32)" fg:x="1696" fg:w="69"/><text x="8.7308%" y="1038.50"></text></g><g><title>core::sync::atomic::atomic_or (69 samples, 0.35%)</title><rect x="8.4808%" y="1044" width="0.3450%" height="15" fill="rgb(207,58,43)" fg:x="1696" fg:w="69"/><text x="8.7308%" y="1054.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (649 samples, 3.25%)</title><rect x="5.6556%" y="884" width="3.2453%" height="15" fill="rgb(215,193,15)" fg:x="1131" fg:w="649"/><text x="5.9056%" y="894.50">&lt;&amp;m..</text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::start_send (629 samples, 3.15%)</title><rect x="5.7556%" y="900" width="3.1453%" height="15" fill="rgb(232,15,44)" fg:x="1151" fg:w="629"/><text x="6.0056%" y="910.50">fut..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::start_send (553 samples, 2.77%)</title><rect x="6.1356%" y="916" width="2.7653%" height="15" fill="rgb(212,3,48)" fg:x="1227" fg:w="553"/><text x="6.3856%" y="926.50">fu..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (553 samples, 2.77%)</title><rect x="6.1356%" y="932" width="2.7653%" height="15" fill="rgb(218,128,7)" fg:x="1227" fg:w="553"/><text x="6.3856%" y="942.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (553 samples, 2.77%)</title><rect x="6.1356%" y="948" width="2.7653%" height="15" fill="rgb(226,216,39)" fg:x="1227" fg:w="553"/><text x="6.3856%" y="958.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (15 samples, 0.08%)</title><rect x="8.8259%" y="964" width="0.0750%" height="15" fill="rgb(243,47,51)" fg:x="1765" fg:w="15"/><text x="9.0759%" y="974.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (10 samples, 0.05%)</title><rect x="8.9009%" y="884" width="0.0500%" height="15" fill="rgb(241,183,40)" fg:x="1780" fg:w="10"/><text x="9.1509%" y="894.50"></text></g><g><title>&lt;futures_util::sink::feed::Feed&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (689 samples, 3.45%)</title><rect x="5.5206%" y="868" width="3.4453%" height="15" fill="rgb(231,217,32)" fg:x="1104" fg:w="689"/><text x="5.7706%" y="878.50">&lt;fu..</text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.02%)</title><rect x="8.9509%" y="884" width="0.0150%" height="15" fill="rgb(229,61,38)" fg:x="1790" fg:w="3"/><text x="9.2009%" y="894.50"></text></g><g><title>core::mem::replace (3 samples, 0.02%)</title><rect x="8.9509%" y="900" width="0.0150%" height="15" fill="rgb(225,210,5)" fg:x="1790" fg:w="3"/><text x="9.2009%" y="910.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="8.9509%" y="916" width="0.0150%" height="15" fill="rgb(231,79,45)" fg:x="1790" fg:w="3"/><text x="9.2009%" y="926.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="8.9659%" y="868" width="0.0100%" height="15" fill="rgb(224,100,7)" fg:x="1793" fg:w="2"/><text x="9.2159%" y="878.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="9.0409%" y="916" width="0.0100%" height="15" fill="rgb(241,198,18)" fg:x="1808" fg:w="2"/><text x="9.2909%" y="926.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="9.0409%" y="932" width="0.0100%" height="15" fill="rgb(252,97,53)" fg:x="1808" fg:w="2"/><text x="9.2909%" y="942.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="9.0409%" y="948" width="0.0100%" height="15" fill="rgb(220,88,7)" fg:x="1808" fg:w="2"/><text x="9.2909%" y="958.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="9.0509%" y="916" width="0.0100%" height="15" fill="rgb(213,176,14)" fg:x="1810" fg:w="2"/><text x="9.3009%" y="926.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="9.0509%" y="932" width="0.0100%" height="15" fill="rgb(246,73,7)" fg:x="1810" fg:w="2"/><text x="9.3009%" y="942.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (65 samples, 0.33%)</title><rect x="9.4759%" y="932" width="0.3250%" height="15" fill="rgb(245,64,36)" fg:x="1895" fg:w="65"/><text x="9.7259%" y="942.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked::_{{closure}} (64 samples, 0.32%)</title><rect x="9.4809%" y="948" width="0.3200%" height="15" fill="rgb(245,80,10)" fg:x="1896" fg:w="64"/><text x="9.7309%" y="958.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (64 samples, 0.32%)</title><rect x="9.4809%" y="964" width="0.3200%" height="15" fill="rgb(232,107,50)" fg:x="1896" fg:w="64"/><text x="9.7309%" y="974.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (64 samples, 0.32%)</title><rect x="9.4809%" y="980" width="0.3200%" height="15" fill="rgb(253,3,0)" fg:x="1896" fg:w="64"/><text x="9.7309%" y="990.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (55 samples, 0.28%)</title><rect x="9.5260%" y="996" width="0.2750%" height="15" fill="rgb(212,99,53)" fg:x="1905" fg:w="55"/><text x="9.7760%" y="1006.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (50 samples, 0.25%)</title><rect x="9.8010%" y="932" width="0.2500%" height="15" fill="rgb(249,111,54)" fg:x="1960" fg:w="50"/><text x="10.0510%" y="942.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (50 samples, 0.25%)</title><rect x="9.8010%" y="948" width="0.2500%" height="15" fill="rgb(249,55,30)" fg:x="1960" fg:w="50"/><text x="10.0510%" y="958.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (50 samples, 0.25%)</title><rect x="9.8010%" y="964" width="0.2500%" height="15" fill="rgb(237,47,42)" fg:x="1960" fg:w="50"/><text x="10.0510%" y="974.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (50 samples, 0.25%)</title><rect x="9.8010%" y="980" width="0.2500%" height="15" fill="rgb(211,20,18)" fg:x="1960" fg:w="50"/><text x="10.0510%" y="990.50"></text></g><g><title>core::sync::atomic::atomic_swap (50 samples, 0.25%)</title><rect x="9.8010%" y="996" width="0.2500%" height="15" fill="rgb(231,203,46)" fg:x="1960" fg:w="50"/><text x="10.0510%" y="1006.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (8 samples, 0.04%)</title><rect x="10.0510%" y="948" width="0.0400%" height="15" fill="rgb(237,142,3)" fg:x="2010" fg:w="8"/><text x="10.3010%" y="958.50"></text></g><g><title>std::sync::poison::Flag::guard (8 samples, 0.04%)</title><rect x="10.0510%" y="964" width="0.0400%" height="15" fill="rgb(241,107,1)" fg:x="2010" fg:w="8"/><text x="10.3010%" y="974.50"></text></g><g><title>std::thread::panicking (8 samples, 0.04%)</title><rect x="10.0510%" y="980" width="0.0400%" height="15" fill="rgb(229,83,13)" fg:x="2010" fg:w="8"/><text x="10.3010%" y="990.50"></text></g><g><title>std::panicking::panicking (8 samples, 0.04%)</title><rect x="10.0510%" y="996" width="0.0400%" height="15" fill="rgb(241,91,40)" fg:x="2010" fg:w="8"/><text x="10.3010%" y="1006.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (8 samples, 0.04%)</title><rect x="10.0510%" y="1012" width="0.0400%" height="15" fill="rgb(225,3,45)" fg:x="2010" fg:w="8"/><text x="10.3010%" y="1022.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (268 samples, 1.34%)</title><rect x="9.0609%" y="916" width="1.3401%" height="15" fill="rgb(244,223,14)" fg:x="1812" fg:w="268"/><text x="9.3109%" y="926.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (70 samples, 0.35%)</title><rect x="10.0510%" y="932" width="0.3500%" height="15" fill="rgb(224,124,37)" fg:x="2010" fg:w="70"/><text x="10.3010%" y="942.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (62 samples, 0.31%)</title><rect x="10.0910%" y="948" width="0.3100%" height="15" fill="rgb(251,171,30)" fg:x="2018" fg:w="62"/><text x="10.3410%" y="958.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (5 samples, 0.03%)</title><rect x="10.3760%" y="964" width="0.0250%" height="15" fill="rgb(236,46,54)" fg:x="2075" fg:w="5"/><text x="10.6260%" y="974.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.03%)</title><rect x="10.3760%" y="980" width="0.0250%" height="15" fill="rgb(245,213,5)" fg:x="2075" fg:w="5"/><text x="10.6260%" y="990.50"></text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::poll_flush (299 samples, 1.50%)</title><rect x="8.9759%" y="868" width="1.4951%" height="15" fill="rgb(230,144,27)" fg:x="1795" fg:w="299"/><text x="9.2259%" y="878.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::poll_ready (299 samples, 1.50%)</title><rect x="8.9759%" y="884" width="1.4951%" height="15" fill="rgb(220,86,6)" fg:x="1795" fg:w="299"/><text x="9.2259%" y="894.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_ready (299 samples, 1.50%)</title><rect x="8.9759%" y="900" width="1.4951%" height="15" fill="rgb(240,20,13)" fg:x="1795" fg:w="299"/><text x="9.2259%" y="910.50"></text></g><g><title>futures_channel::mpsc::decode_state (14 samples, 0.07%)</title><rect x="10.4010%" y="916" width="0.0700%" height="15" fill="rgb(217,89,34)" fg:x="2080" fg:w="14"/><text x="10.6510%" y="926.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (1,012 samples, 5.06%)</title><rect x="5.4155%" y="852" width="5.0605%" height="15" fill="rgb(229,13,5)" fg:x="1083" fg:w="1012"/><text x="5.6655%" y="862.50">&lt;futur..</text></g><g><title>&lt;core::task::poll::Poll&lt;core::option::Option&lt;core::result::Result&lt;T,E&gt;&gt;&gt; as core::ops::try_trait::Try&gt;::branch (8 samples, 0.04%)</title><rect x="10.5511%" y="868" width="0.0400%" height="15" fill="rgb(244,67,35)" fg:x="2110" fg:w="8"/><text x="10.8011%" y="878.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (68 samples, 0.34%)</title><rect x="10.5911%" y="868" width="0.3400%" height="15" fill="rgb(221,40,2)" fg:x="2118" fg:w="68"/><text x="10.8411%" y="878.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (5 samples, 0.03%)</title><rect x="11.0061%" y="980" width="0.0250%" height="15" fill="rgb(237,157,21)" fg:x="2201" fg:w="5"/><text x="11.2561%" y="990.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (3 samples, 0.02%)</title><rect x="11.0311%" y="980" width="0.0150%" height="15" fill="rgb(222,94,11)" fg:x="2206" fg:w="3"/><text x="11.2811%" y="990.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3 samples, 0.02%)</title><rect x="11.0311%" y="996" width="0.0150%" height="15" fill="rgb(249,113,6)" fg:x="2206" fg:w="3"/><text x="11.2811%" y="1006.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (5 samples, 0.03%)</title><rect x="11.0461%" y="980" width="0.0250%" height="15" fill="rgb(238,137,36)" fg:x="2209" fg:w="5"/><text x="11.2961%" y="990.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll::_{{closure}} (2 samples, 0.01%)</title><rect x="11.0611%" y="996" width="0.0100%" height="15" fill="rgb(210,102,26)" fg:x="2212" fg:w="2"/><text x="11.3111%" y="1006.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (8 samples, 0.04%)</title><rect x="11.1461%" y="996" width="0.0400%" height="15" fill="rgb(218,30,30)" fg:x="2229" fg:w="8"/><text x="11.3961%" y="1006.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="11.1861%" y="996" width="0.0100%" height="15" fill="rgb(214,67,26)" fg:x="2237" fg:w="2"/><text x="11.4361%" y="1006.50"></text></g><g><title>&lt;futures_channel::mpsc::BoundedSenderInner&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="11.2011%" y="1044" width="0.0100%" height="15" fill="rgb(251,9,53)" fg:x="2240" fg:w="2"/><text x="11.4511%" y="1054.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::close_channel (2 samples, 0.01%)</title><rect x="11.2011%" y="1060" width="0.0100%" height="15" fill="rgb(228,204,25)" fg:x="2240" fg:w="2"/><text x="11.4511%" y="1070.50"></text></g><g><title>futures_channel::mpsc::BoundedInner&lt;T&gt;::set_closed (2 samples, 0.01%)</title><rect x="11.2011%" y="1076" width="0.0100%" height="15" fill="rgb(207,153,8)" fg:x="2240" fg:w="2"/><text x="11.4511%" y="1086.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="11.2011%" y="996" width="0.0200%" height="15" fill="rgb(242,9,16)" fg:x="2240" fg:w="4"/><text x="11.4511%" y="1006.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="11.2011%" y="1012" width="0.0200%" height="15" fill="rgb(217,211,10)" fg:x="2240" fg:w="4"/><text x="11.4511%" y="1022.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="11.2011%" y="1028" width="0.0200%" height="15" fill="rgb(219,228,52)" fg:x="2240" fg:w="4"/><text x="11.4511%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="11.2111%" y="1044" width="0.0100%" height="15" fill="rgb(231,92,29)" fg:x="2242" fg:w="2"/><text x="11.4611%" y="1054.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="11.2111%" y="1060" width="0.0100%" height="15" fill="rgb(232,8,23)" fg:x="2242" fg:w="2"/><text x="11.4611%" y="1070.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::run::{{closure}}::{{closure}}::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="11.2211%" y="996" width="0.0100%" height="15" fill="rgb(216,211,34)" fg:x="2244" fg:w="2"/><text x="11.4711%" y="1006.50"></text></g><g><title>__memcpy_avx_unaligned_erms (18 samples, 0.09%)</title><rect x="12.1762%" y="1028" width="0.0900%" height="15" fill="rgb(236,151,0)" fg:x="2435" fg:w="18"/><text x="12.4262%" y="1038.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (66 samples, 0.33%)</title><rect x="12.1662%" y="1012" width="0.3300%" height="15" fill="rgb(209,168,3)" fg:x="2433" fg:w="66"/><text x="12.4162%" y="1022.50"></text></g><g><title>__memmove_avx_unaligned (46 samples, 0.23%)</title><rect x="12.2662%" y="1028" width="0.2300%" height="15" fill="rgb(208,129,28)" fg:x="2453" fg:w="46"/><text x="12.5162%" y="1038.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (10 samples, 0.05%)</title><rect x="12.4962%" y="1012" width="0.0500%" height="15" fill="rgb(229,78,22)" fg:x="2499" fg:w="10"/><text x="12.7462%" y="1022.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (54 samples, 0.27%)</title><rect x="12.5463%" y="1012" width="0.2700%" height="15" fill="rgb(228,187,13)" fg:x="2509" fg:w="54"/><text x="12.7963%" y="1022.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="12.9413%" y="1092" width="0.0100%" height="15" fill="rgb(240,119,24)" fg:x="2588" fg:w="2"/><text x="13.1913%" y="1102.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (2 samples, 0.01%)</title><rect x="12.9513%" y="1092" width="0.0100%" height="15" fill="rgb(209,194,42)" fg:x="2590" fg:w="2"/><text x="13.2013%" y="1102.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (23 samples, 0.12%)</title><rect x="12.9913%" y="1108" width="0.1150%" height="15" fill="rgb(247,200,46)" fg:x="2598" fg:w="23"/><text x="13.2413%" y="1118.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (38 samples, 0.19%)</title><rect x="12.9413%" y="1044" width="0.1900%" height="15" fill="rgb(218,76,16)" fg:x="2588" fg:w="38"/><text x="13.1913%" y="1054.50"></text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::poll_ready (38 samples, 0.19%)</title><rect x="12.9413%" y="1060" width="0.1900%" height="15" fill="rgb(225,21,48)" fg:x="2588" fg:w="38"/><text x="13.1913%" y="1070.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::poll_ready (38 samples, 0.19%)</title><rect x="12.9413%" y="1076" width="0.1900%" height="15" fill="rgb(239,223,50)" fg:x="2588" fg:w="38"/><text x="13.1913%" y="1086.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_ready (34 samples, 0.17%)</title><rect x="12.9613%" y="1092" width="0.1700%" height="15" fill="rgb(244,45,21)" fg:x="2592" fg:w="34"/><text x="13.2113%" y="1102.50"></text></g><g><title>futures_channel::mpsc::decode_state (5 samples, 0.03%)</title><rect x="13.1063%" y="1108" width="0.0250%" height="15" fill="rgb(232,33,43)" fg:x="2621" fg:w="5"/><text x="13.3563%" y="1118.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (7 samples, 0.04%)</title><rect x="13.6314%" y="1140" width="0.0350%" height="15" fill="rgb(209,8,3)" fg:x="2726" fg:w="7"/><text x="13.8814%" y="1150.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="13.6664%" y="1140" width="0.0150%" height="15" fill="rgb(214,25,53)" fg:x="2733" fg:w="3"/><text x="13.9164%" y="1150.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.02%)</title><rect x="13.6664%" y="1156" width="0.0150%" height="15" fill="rgb(254,186,54)" fg:x="2733" fg:w="3"/><text x="13.9164%" y="1166.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="13.6664%" y="1172" width="0.0150%" height="15" fill="rgb(208,174,49)" fg:x="2733" fg:w="3"/><text x="13.9164%" y="1182.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.02%)</title><rect x="13.8014%" y="1156" width="0.0150%" height="15" fill="rgb(233,191,51)" fg:x="2760" fg:w="3"/><text x="14.0514%" y="1166.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (3 samples, 0.02%)</title><rect x="13.8014%" y="1172" width="0.0150%" height="15" fill="rgb(222,134,10)" fg:x="2760" fg:w="3"/><text x="14.0514%" y="1182.50"></text></g><g><title>futures_channel::mpsc::decode_state (3 samples, 0.02%)</title><rect x="13.8164%" y="1156" width="0.0150%" height="15" fill="rgb(230,226,20)" fg:x="2763" fg:w="3"/><text x="14.0664%" y="1166.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::inc_num_messages (36 samples, 0.18%)</title><rect x="13.6814%" y="1140" width="0.1800%" height="15" fill="rgb(251,111,25)" fg:x="2736" fg:w="36"/><text x="13.9314%" y="1150.50"></text></g><g><title>futures_channel::mpsc::encode_state (6 samples, 0.03%)</title><rect x="13.8314%" y="1156" width="0.0300%" height="15" fill="rgb(224,40,46)" fg:x="2766" fg:w="6"/><text x="14.0814%" y="1166.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (29 samples, 0.15%)</title><rect x="13.8714%" y="1156" width="0.1450%" height="15" fill="rgb(236,108,47)" fg:x="2774" fg:w="29"/><text x="14.1214%" y="1166.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.03%)</title><rect x="14.0164%" y="1156" width="0.0300%" height="15" fill="rgb(234,93,0)" fg:x="2803" fg:w="6"/><text x="14.2664%" y="1166.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (4 samples, 0.02%)</title><rect x="14.0264%" y="1172" width="0.0200%" height="15" fill="rgb(224,213,32)" fg:x="2805" fg:w="4"/><text x="14.2764%" y="1182.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.02%)</title><rect x="14.0264%" y="1188" width="0.0200%" height="15" fill="rgb(251,11,48)" fg:x="2805" fg:w="4"/><text x="14.2764%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (2 samples, 0.01%)</title><rect x="14.0464%" y="1156" width="0.0100%" height="15" fill="rgb(236,173,5)" fg:x="2809" fg:w="2"/><text x="14.2964%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (55 samples, 0.28%)</title><rect x="14.0564%" y="1156" width="0.2750%" height="15" fill="rgb(230,95,12)" fg:x="2811" fg:w="55"/><text x="14.3064%" y="1166.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (55 samples, 0.28%)</title><rect x="14.0564%" y="1172" width="0.2750%" height="15" fill="rgb(232,209,1)" fg:x="2811" fg:w="55"/><text x="14.3064%" y="1182.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (54 samples, 0.27%)</title><rect x="14.0614%" y="1188" width="0.2700%" height="15" fill="rgb(232,6,1)" fg:x="2812" fg:w="54"/><text x="14.3114%" y="1198.50"></text></g><g><title>futures_channel::mpsc::decode_state (7 samples, 0.04%)</title><rect x="14.3314%" y="1156" width="0.0350%" height="15" fill="rgb(210,224,50)" fg:x="2866" fg:w="7"/><text x="14.5814%" y="1166.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (42 samples, 0.21%)</title><rect x="14.3664%" y="1172" width="0.2100%" height="15" fill="rgb(228,127,35)" fg:x="2873" fg:w="42"/><text x="14.6164%" y="1182.50"></text></g><g><title>core::sync::atomic::atomic_store (42 samples, 0.21%)</title><rect x="14.3664%" y="1188" width="0.2100%" height="15" fill="rgb(245,102,45)" fg:x="2873" fg:w="42"/><text x="14.6164%" y="1198.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (5 samples, 0.03%)</title><rect x="14.5765%" y="1172" width="0.0250%" height="15" fill="rgb(214,1,49)" fg:x="2915" fg:w="5"/><text x="14.8265%" y="1182.50"></text></g><g><title>core::sync::atomic::atomic_swap (5 samples, 0.03%)</title><rect x="14.5765%" y="1188" width="0.0250%" height="15" fill="rgb(226,163,40)" fg:x="2915" fg:w="5"/><text x="14.8265%" y="1198.50"></text></g><g><title>_int_malloc (20 samples, 0.10%)</title><rect x="14.8765%" y="1284" width="0.1000%" height="15" fill="rgb(239,212,28)" fg:x="2975" fg:w="20"/><text x="15.1265%" y="1294.50"></text></g><g><title>__GI___libc_malloc (55 samples, 0.28%)</title><rect x="14.7315%" y="1268" width="0.2750%" height="15" fill="rgb(220,20,13)" fg:x="2946" fg:w="55"/><text x="14.9815%" y="1278.50"></text></g><g><title>tcache_get (6 samples, 0.03%)</title><rect x="14.9765%" y="1284" width="0.0300%" height="15" fill="rgb(210,164,35)" fg:x="2995" fg:w="6"/><text x="15.2265%" y="1294.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="15.0065%" y="1268" width="0.0100%" height="15" fill="rgb(248,109,41)" fg:x="3001" fg:w="2"/><text x="15.2565%" y="1278.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (137 samples, 0.69%)</title><rect x="14.3664%" y="1156" width="0.6851%" height="15" fill="rgb(238,23,50)" fg:x="2873" fg:w="137"/><text x="14.6164%" y="1166.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (90 samples, 0.45%)</title><rect x="14.6015%" y="1172" width="0.4500%" height="15" fill="rgb(211,48,49)" fg:x="2920" fg:w="90"/><text x="14.8515%" y="1182.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (90 samples, 0.45%)</title><rect x="14.6015%" y="1188" width="0.4500%" height="15" fill="rgb(223,36,21)" fg:x="2920" fg:w="90"/><text x="14.8515%" y="1198.50"></text></g><g><title>alloc::alloc::exchange_malloc (67 samples, 0.34%)</title><rect x="14.7165%" y="1204" width="0.3350%" height="15" fill="rgb(207,123,46)" fg:x="2943" fg:w="67"/><text x="14.9665%" y="1214.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (66 samples, 0.33%)</title><rect x="14.7215%" y="1220" width="0.3300%" height="15" fill="rgb(240,218,32)" fg:x="2944" fg:w="66"/><text x="14.9715%" y="1230.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (66 samples, 0.33%)</title><rect x="14.7215%" y="1236" width="0.3300%" height="15" fill="rgb(252,5,43)" fg:x="2944" fg:w="66"/><text x="14.9715%" y="1246.50"></text></g><g><title>alloc::alloc::alloc (66 samples, 0.33%)</title><rect x="14.7215%" y="1252" width="0.3300%" height="15" fill="rgb(252,84,19)" fg:x="2944" fg:w="66"/><text x="14.9715%" y="1262.50"></text></g><g><title>__rust_alloc (7 samples, 0.04%)</title><rect x="15.0165%" y="1268" width="0.0350%" height="15" fill="rgb(243,152,39)" fg:x="3003" fg:w="7"/><text x="15.2665%" y="1278.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::park (295 samples, 1.48%)</title><rect x="13.8614%" y="1140" width="1.4751%" height="15" fill="rgb(234,160,15)" fg:x="2772" fg:w="295"/><text x="14.1114%" y="1150.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (57 samples, 0.29%)</title><rect x="15.0515%" y="1156" width="0.2850%" height="15" fill="rgb(237,34,20)" fg:x="3010" fg:w="57"/><text x="15.3015%" y="1166.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (56 samples, 0.28%)</title><rect x="15.0565%" y="1172" width="0.2800%" height="15" fill="rgb(229,97,13)" fg:x="3011" fg:w="56"/><text x="15.3065%" y="1182.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (56 samples, 0.28%)</title><rect x="15.0565%" y="1188" width="0.2800%" height="15" fill="rgb(234,71,50)" fg:x="3011" fg:w="56"/><text x="15.3065%" y="1198.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (56 samples, 0.28%)</title><rect x="15.0565%" y="1204" width="0.2800%" height="15" fill="rgb(253,155,4)" fg:x="3011" fg:w="56"/><text x="15.3065%" y="1214.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (10 samples, 0.05%)</title><rect x="15.3515%" y="1172" width="0.0500%" height="15" fill="rgb(222,185,37)" fg:x="3070" fg:w="10"/><text x="15.6015%" y="1182.50"></text></g><g><title>core::sync::atomic::atomic_store (10 samples, 0.05%)</title><rect x="15.3515%" y="1188" width="0.0500%" height="15" fill="rgb(251,177,13)" fg:x="3070" fg:w="10"/><text x="15.6015%" y="1198.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (6 samples, 0.03%)</title><rect x="15.4015%" y="1172" width="0.0300%" height="15" fill="rgb(250,179,40)" fg:x="3080" fg:w="6"/><text x="15.6515%" y="1182.50"></text></g><g><title>core::sync::atomic::atomic_swap (6 samples, 0.03%)</title><rect x="15.4015%" y="1188" width="0.0300%" height="15" fill="rgb(242,44,2)" fg:x="3080" fg:w="6"/><text x="15.6515%" y="1198.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.10%)</title><rect x="15.7166%" y="1268" width="0.0950%" height="15" fill="rgb(216,177,13)" fg:x="3143" fg:w="19"/><text x="15.9666%" y="1278.50"></text></g><g><title>tcache_get (10 samples, 0.05%)</title><rect x="15.7616%" y="1284" width="0.0500%" height="15" fill="rgb(216,106,43)" fg:x="3152" fg:w="10"/><text x="16.0116%" y="1294.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="15.8116%" y="1268" width="0.0100%" height="15" fill="rgb(216,183,2)" fg:x="3162" fg:w="2"/><text x="16.0616%" y="1278.50"></text></g><g><title>__rust_alloc (3 samples, 0.02%)</title><rect x="15.8216%" y="1268" width="0.0150%" height="15" fill="rgb(249,75,3)" fg:x="3164" fg:w="3"/><text x="16.0716%" y="1278.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (99 samples, 0.50%)</title><rect x="15.3515%" y="1156" width="0.4950%" height="15" fill="rgb(219,67,39)" fg:x="3070" fg:w="99"/><text x="15.6015%" y="1166.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (83 samples, 0.42%)</title><rect x="15.4315%" y="1172" width="0.4150%" height="15" fill="rgb(253,228,2)" fg:x="3086" fg:w="83"/><text x="15.6815%" y="1182.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (83 samples, 0.42%)</title><rect x="15.4315%" y="1188" width="0.4150%" height="15" fill="rgb(235,138,27)" fg:x="3086" fg:w="83"/><text x="15.6815%" y="1198.50"></text></g><g><title>alloc::alloc::exchange_malloc (28 samples, 0.14%)</title><rect x="15.7066%" y="1204" width="0.1400%" height="15" fill="rgb(236,97,51)" fg:x="3141" fg:w="28"/><text x="15.9566%" y="1214.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.14%)</title><rect x="15.7116%" y="1220" width="0.1350%" height="15" fill="rgb(240,80,30)" fg:x="3142" fg:w="27"/><text x="15.9616%" y="1230.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.14%)</title><rect x="15.7116%" y="1236" width="0.1350%" height="15" fill="rgb(230,178,19)" fg:x="3142" fg:w="27"/><text x="15.9616%" y="1246.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.14%)</title><rect x="15.7116%" y="1252" width="0.1350%" height="15" fill="rgb(210,190,27)" fg:x="3142" fg:w="27"/><text x="15.9616%" y="1262.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.01%)</title><rect x="15.8366%" y="1268" width="0.0100%" height="15" fill="rgb(222,107,31)" fg:x="3167" fg:w="2"/><text x="16.0866%" y="1278.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (4 samples, 0.02%)</title><rect x="16.0366%" y="1188" width="0.0200%" height="15" fill="rgb(216,127,34)" fg:x="3207" fg:w="4"/><text x="16.2866%" y="1198.50"></text></g><g><title>core::mem::replace (4 samples, 0.02%)</title><rect x="16.0366%" y="1204" width="0.0200%" height="15" fill="rgb(234,116,52)" fg:x="3207" fg:w="4"/><text x="16.2866%" y="1214.50"></text></g><g><title>core::ptr::read (4 samples, 0.02%)</title><rect x="16.0366%" y="1220" width="0.0200%" height="15" fill="rgb(222,124,15)" fg:x="3207" fg:w="4"/><text x="16.2866%" y="1230.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (101 samples, 0.51%)</title><rect x="15.8466%" y="1156" width="0.5051%" height="15" fill="rgb(231,179,28)" fg:x="3169" fg:w="101"/><text x="16.0966%" y="1166.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::take (63 samples, 0.32%)</title><rect x="16.0366%" y="1172" width="0.3150%" height="15" fill="rgb(226,93,45)" fg:x="3207" fg:w="63"/><text x="16.2866%" y="1182.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (59 samples, 0.30%)</title><rect x="16.0566%" y="1188" width="0.2950%" height="15" fill="rgb(215,8,51)" fg:x="3211" fg:w="59"/><text x="16.3066%" y="1198.50"></text></g><g><title>core::sync::atomic::atomic_or (59 samples, 0.30%)</title><rect x="16.0566%" y="1204" width="0.2950%" height="15" fill="rgb(223,106,5)" fg:x="3211" fg:w="59"/><text x="16.3066%" y="1214.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::do_send_b (560 samples, 2.80%)</title><rect x="13.5614%" y="1124" width="2.8003%" height="15" fill="rgb(250,191,5)" fg:x="2712" fg:w="560"/><text x="13.8114%" y="1134.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::queue_push_and_signal (205 samples, 1.03%)</title><rect x="15.3365%" y="1140" width="1.0251%" height="15" fill="rgb(242,132,44)" fg:x="3067" fg:w="205"/><text x="15.5865%" y="1150.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.01%)</title><rect x="16.3516%" y="1156" width="0.0100%" height="15" fill="rgb(251,152,29)" fg:x="3270" fg:w="2"/><text x="16.6016%" y="1166.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (656 samples, 3.28%)</title><rect x="13.1313%" y="1044" width="3.2803%" height="15" fill="rgb(218,179,5)" fg:x="2626" fg:w="656"/><text x="13.3813%" y="1054.50">&lt;&amp;m..</text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::start_send (646 samples, 3.23%)</title><rect x="13.1813%" y="1060" width="3.2303%" height="15" fill="rgb(227,67,19)" fg:x="2636" fg:w="646"/><text x="13.4313%" y="1070.50">fut..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::start_send (585 samples, 2.93%)</title><rect x="13.4863%" y="1076" width="2.9253%" height="15" fill="rgb(233,119,31)" fg:x="2697" fg:w="585"/><text x="13.7363%" y="1086.50">fu..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (585 samples, 2.93%)</title><rect x="13.4863%" y="1092" width="2.9253%" height="15" fill="rgb(241,120,22)" fg:x="2697" fg:w="585"/><text x="13.7363%" y="1102.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (585 samples, 2.93%)</title><rect x="13.4863%" y="1108" width="2.9253%" height="15" fill="rgb(224,102,30)" fg:x="2697" fg:w="585"/><text x="13.7363%" y="1118.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (10 samples, 0.05%)</title><rect x="16.3616%" y="1124" width="0.0500%" height="15" fill="rgb(210,164,37)" fg:x="3272" fg:w="10"/><text x="16.6116%" y="1134.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (29 samples, 0.15%)</title><rect x="16.4116%" y="1044" width="0.1450%" height="15" fill="rgb(226,191,16)" fg:x="3282" fg:w="29"/><text x="16.6616%" y="1054.50"></text></g><g><title>&lt;futures_util::sink::feed::Feed&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (727 samples, 3.64%)</title><rect x="12.9263%" y="1028" width="3.6354%" height="15" fill="rgb(214,40,45)" fg:x="2585" fg:w="727"/><text x="13.1763%" y="1038.50">&lt;fut..</text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.03%)</title><rect x="16.6517%" y="1076" width="0.0250%" height="15" fill="rgb(244,29,26)" fg:x="3330" fg:w="5"/><text x="16.9017%" y="1086.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.03%)</title><rect x="16.6517%" y="1092" width="0.0250%" height="15" fill="rgb(216,16,5)" fg:x="3330" fg:w="5"/><text x="16.9017%" y="1102.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (54 samples, 0.27%)</title><rect x="17.0717%" y="1092" width="0.2700%" height="15" fill="rgb(249,76,35)" fg:x="3414" fg:w="54"/><text x="17.3217%" y="1102.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked::_{{closure}} (53 samples, 0.27%)</title><rect x="17.0767%" y="1108" width="0.2650%" height="15" fill="rgb(207,11,44)" fg:x="3415" fg:w="53"/><text x="17.3267%" y="1118.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (53 samples, 0.27%)</title><rect x="17.0767%" y="1124" width="0.2650%" height="15" fill="rgb(228,190,49)" fg:x="3415" fg:w="53"/><text x="17.3267%" y="1134.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (51 samples, 0.26%)</title><rect x="17.0867%" y="1140" width="0.2550%" height="15" fill="rgb(214,173,12)" fg:x="3417" fg:w="51"/><text x="17.3367%" y="1150.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (42 samples, 0.21%)</title><rect x="17.1317%" y="1156" width="0.2100%" height="15" fill="rgb(218,26,35)" fg:x="3426" fg:w="42"/><text x="17.3817%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (47 samples, 0.24%)</title><rect x="17.3417%" y="1092" width="0.2350%" height="15" fill="rgb(220,200,19)" fg:x="3468" fg:w="47"/><text x="17.5917%" y="1102.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.24%)</title><rect x="17.3417%" y="1108" width="0.2350%" height="15" fill="rgb(239,95,49)" fg:x="3468" fg:w="47"/><text x="17.5917%" y="1118.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (46 samples, 0.23%)</title><rect x="17.3467%" y="1124" width="0.2300%" height="15" fill="rgb(235,85,53)" fg:x="3469" fg:w="46"/><text x="17.5967%" y="1134.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (46 samples, 0.23%)</title><rect x="17.3467%" y="1140" width="0.2300%" height="15" fill="rgb(233,133,31)" fg:x="3469" fg:w="46"/><text x="17.5967%" y="1150.50"></text></g><g><title>core::sync::atomic::atomic_swap (46 samples, 0.23%)</title><rect x="17.3467%" y="1156" width="0.2300%" height="15" fill="rgb(218,25,20)" fg:x="3469" fg:w="46"/><text x="17.5967%" y="1166.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (9 samples, 0.05%)</title><rect x="17.5768%" y="1108" width="0.0450%" height="15" fill="rgb(252,210,38)" fg:x="3515" fg:w="9"/><text x="17.8268%" y="1118.50"></text></g><g><title>std::sync::poison::Flag::guard (9 samples, 0.05%)</title><rect x="17.5768%" y="1124" width="0.0450%" height="15" fill="rgb(242,134,21)" fg:x="3515" fg:w="9"/><text x="17.8268%" y="1134.50"></text></g><g><title>std::thread::panicking (9 samples, 0.05%)</title><rect x="17.5768%" y="1140" width="0.0450%" height="15" fill="rgb(213,28,48)" fg:x="3515" fg:w="9"/><text x="17.8268%" y="1150.50"></text></g><g><title>std::panicking::panicking (9 samples, 0.05%)</title><rect x="17.5768%" y="1156" width="0.0450%" height="15" fill="rgb(250,196,2)" fg:x="3515" fg:w="9"/><text x="17.8268%" y="1166.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (9 samples, 0.05%)</title><rect x="17.5768%" y="1172" width="0.0450%" height="15" fill="rgb(227,5,17)" fg:x="3515" fg:w="9"/><text x="17.8268%" y="1182.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (239 samples, 1.20%)</title><rect x="16.6767%" y="1076" width="1.1951%" height="15" fill="rgb(221,226,24)" fg:x="3335" fg:w="239"/><text x="16.9267%" y="1086.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (59 samples, 0.30%)</title><rect x="17.5768%" y="1092" width="0.2950%" height="15" fill="rgb(211,5,48)" fg:x="3515" fg:w="59"/><text x="17.8268%" y="1102.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (50 samples, 0.25%)</title><rect x="17.6218%" y="1108" width="0.2500%" height="15" fill="rgb(219,150,6)" fg:x="3524" fg:w="50"/><text x="17.8718%" y="1118.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (5 samples, 0.03%)</title><rect x="17.8468%" y="1124" width="0.0250%" height="15" fill="rgb(251,46,16)" fg:x="3569" fg:w="5"/><text x="18.0968%" y="1134.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (5 samples, 0.03%)</title><rect x="17.8468%" y="1140" width="0.0250%" height="15" fill="rgb(220,204,40)" fg:x="3569" fg:w="5"/><text x="18.0968%" y="1150.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (1,020 samples, 5.10%)</title><rect x="12.8163%" y="1012" width="5.1005%" height="15" fill="rgb(211,85,2)" fg:x="2563" fg:w="1020"/><text x="13.0663%" y="1022.50">&lt;futur..</text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::poll_flush (270 samples, 1.35%)</title><rect x="16.5667%" y="1028" width="1.3501%" height="15" fill="rgb(229,17,7)" fg:x="3313" fg:w="270"/><text x="16.8167%" y="1038.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::poll_ready (269 samples, 1.35%)</title><rect x="16.5717%" y="1044" width="1.3451%" height="15" fill="rgb(239,72,28)" fg:x="3314" fg:w="269"/><text x="16.8217%" y="1054.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_ready (269 samples, 1.35%)</title><rect x="16.5717%" y="1060" width="1.3451%" height="15" fill="rgb(230,47,54)" fg:x="3314" fg:w="269"/><text x="16.8217%" y="1070.50"></text></g><g><title>futures_channel::mpsc::decode_state (9 samples, 0.05%)</title><rect x="17.8718%" y="1076" width="0.0450%" height="15" fill="rgb(214,50,8)" fg:x="3574" fg:w="9"/><text x="18.1218%" y="1086.50"></text></g><g><title>__GI___libc_free (5 samples, 0.03%)</title><rect x="17.9168%" y="1012" width="0.0250%" height="15" fill="rgb(216,198,43)" fg:x="3583" fg:w="5"/><text x="18.1668%" y="1022.50"></text></g><g><title>_int_free (3 samples, 0.02%)</title><rect x="17.9268%" y="1028" width="0.0150%" height="15" fill="rgb(234,20,35)" fg:x="3585" fg:w="3"/><text x="18.1768%" y="1038.50"></text></g><g><title>__memcpy_avx_unaligned_erms (65 samples, 0.33%)</title><rect x="17.9418%" y="1012" width="0.3250%" height="15" fill="rgb(254,45,19)" fg:x="3588" fg:w="65"/><text x="18.1918%" y="1022.50"></text></g><g><title>__memmove_avx_unaligned (13 samples, 0.07%)</title><rect x="18.2668%" y="1012" width="0.0650%" height="15" fill="rgb(219,14,44)" fg:x="3653" fg:w="13"/><text x="18.5168%" y="1022.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="18.3468%" y="1060" width="0.0100%" height="15" fill="rgb(217,220,26)" fg:x="3669" fg:w="2"/><text x="18.5968%" y="1070.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="18.3468%" y="1076" width="0.0100%" height="15" fill="rgb(213,158,28)" fg:x="3669" fg:w="2"/><text x="18.5968%" y="1086.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="18.3318%" y="1012" width="0.0350%" height="15" fill="rgb(252,51,52)" fg:x="3666" fg:w="7"/><text x="18.5818%" y="1022.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="18.3318%" y="1028" width="0.0350%" height="15" fill="rgb(246,89,16)" fg:x="3666" fg:w="7"/><text x="18.5818%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="18.3418%" y="1044" width="0.0250%" height="15" fill="rgb(216,158,49)" fg:x="3668" fg:w="5"/><text x="18.5918%" y="1054.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="18.3568%" y="1060" width="0.0100%" height="15" fill="rgb(236,107,19)" fg:x="3671" fg:w="2"/><text x="18.6068%" y="1070.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="18.3568%" y="1076" width="0.0100%" height="15" fill="rgb(228,185,30)" fg:x="3671" fg:w="2"/><text x="18.6068%" y="1086.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.01%)</title><rect x="18.3568%" y="1092" width="0.0100%" height="15" fill="rgb(246,134,8)" fg:x="3671" fg:w="2"/><text x="18.6068%" y="1102.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.01%)</title><rect x="18.3568%" y="1108" width="0.0100%" height="15" fill="rgb(214,143,50)" fg:x="3671" fg:w="2"/><text x="18.6068%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::sink::send::Send&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;,core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="18.3668%" y="1012" width="0.0250%" height="15" fill="rgb(228,75,8)" fg:x="3673" fg:w="5"/><text x="18.6168%" y="1022.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::sink::feed::Feed&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;,core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="18.3668%" y="1028" width="0.0250%" height="15" fill="rgb(207,175,4)" fg:x="3673" fg:w="5"/><text x="18.6168%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="18.3718%" y="1044" width="0.0200%" height="15" fill="rgb(205,108,24)" fg:x="3674" fg:w="4"/><text x="18.6218%" y="1054.50"></text></g><g><title>core::cmp::PartialOrd::le (2 samples, 0.01%)</title><rect x="18.4018%" y="1044" width="0.0100%" height="15" fill="rgb(244,120,49)" fg:x="3680" fg:w="2"/><text x="18.6518%" y="1054.50"></text></g><g><title>&lt;log::Level as core::cmp::PartialOrd&lt;log::LevelFilter&gt;&gt;::partial_cmp (2 samples, 0.01%)</title><rect x="18.4018%" y="1060" width="0.0100%" height="15" fill="rgb(223,47,38)" fg:x="3680" fg:w="2"/><text x="18.6518%" y="1070.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.01%)</title><rect x="18.4018%" y="1076" width="0.0100%" height="15" fill="rgb(229,179,11)" fg:x="3680" fg:w="2"/><text x="18.6518%" y="1086.50"></text></g><g><title>tracing_core::field::FieldSet::new (4 samples, 0.02%)</title><rect x="18.4418%" y="1156" width="0.0200%" height="15" fill="rgb(231,122,1)" fg:x="3688" fg:w="4"/><text x="18.6918%" y="1166.50"></text></g><g><title>&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled::_{{closure}}::_{{closure}} (14 samples, 0.07%)</title><rect x="18.4418%" y="1124" width="0.0700%" height="15" fill="rgb(245,119,9)" fg:x="3688" fg:w="14"/><text x="18.6918%" y="1134.50"></text></g><g><title>&lt;log::Metadata as tracing_log::AsTrace&gt;::as_trace (14 samples, 0.07%)</title><rect x="18.4418%" y="1140" width="0.0700%" height="15" fill="rgb(241,163,25)" fg:x="3688" fg:w="14"/><text x="18.6918%" y="1150.50"></text></g><g><title>tracing_log::loglevel_to_cs (10 samples, 0.05%)</title><rect x="18.4618%" y="1156" width="0.0500%" height="15" fill="rgb(217,214,3)" fg:x="3692" fg:w="10"/><text x="18.7118%" y="1166.50"></text></g><g><title>&lt;tracing_log::DEBUG_FIELDS as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="18.5019%" y="1172" width="0.0100%" height="15" fill="rgb(240,86,28)" fg:x="3700" fg:w="2"/><text x="18.7519%" y="1182.50"></text></g><g><title>&lt;tracing_log::DEBUG_FIELDS as core::ops::deref::Deref&gt;::deref::__stability (2 samples, 0.01%)</title><rect x="18.5019%" y="1188" width="0.0100%" height="15" fill="rgb(215,47,9)" fg:x="3700" fg:w="2"/><text x="18.7519%" y="1198.50"></text></g><g><title>lazy_static::lazy::Lazy&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="18.5019%" y="1204" width="0.0100%" height="15" fill="rgb(252,25,45)" fg:x="3700" fg:w="2"/><text x="18.7519%" y="1214.50"></text></g><g><title>std::sync::once::Once::call_once (2 samples, 0.01%)</title><rect x="18.5019%" y="1220" width="0.0100%" height="15" fill="rgb(251,164,9)" fg:x="3700" fg:w="2"/><text x="18.7519%" y="1230.50"></text></g><g><title>std::sys_common::once::futex::Once::is_completed (2 samples, 0.01%)</title><rect x="18.5019%" y="1236" width="0.0100%" height="15" fill="rgb(233,194,0)" fg:x="3700" fg:w="2"/><text x="18.7519%" y="1246.50"></text></g><g><title>tracing_core::metadata::Metadata::level (2 samples, 0.01%)</title><rect x="18.5319%" y="1188" width="0.0100%" height="15" fill="rgb(249,111,24)" fg:x="3706" fg:w="2"/><text x="18.7819%" y="1198.50"></text></g><g><title>&lt;tracing_subscriber::filter::env::EnvFilter as tracing_subscriber::layer::Layer&lt;S&gt;&gt;::enabled (13 samples, 0.07%)</title><rect x="18.5169%" y="1156" width="0.0650%" height="15" fill="rgb(250,223,3)" fg:x="3703" fg:w="13"/><text x="18.7669%" y="1166.50"></text></g><g><title>tracing_subscriber::filter::env::EnvFilter::enabled (13 samples, 0.07%)</title><rect x="18.5169%" y="1172" width="0.0650%" height="15" fill="rgb(236,178,37)" fg:x="3703" fg:w="13"/><text x="18.7669%" y="1182.50"></text></g><g><title>tracing_subscriber::filter::directive::DirectiveSet&lt;tracing_subscriber::filter::directive::StaticDirective&gt;::enabled (8 samples, 0.04%)</title><rect x="18.5419%" y="1188" width="0.0400%" height="15" fill="rgb(241,158,50)" fg:x="3708" fg:w="8"/><text x="18.7919%" y="1198.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="18.5619%" y="1204" width="0.0200%" height="15" fill="rgb(213,121,41)" fg:x="3712" fg:w="4"/><text x="18.8119%" y="1214.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (4 samples, 0.02%)</title><rect x="18.5619%" y="1220" width="0.0200%" height="15" fill="rgb(240,92,3)" fg:x="3712" fg:w="4"/><text x="18.8119%" y="1230.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.02%)</title><rect x="18.5669%" y="1236" width="0.0150%" height="15" fill="rgb(205,123,3)" fg:x="3713" fg:w="3"/><text x="18.8169%" y="1246.50"></text></g><g><title>tracing_subscriber::filter::directive::DirectiveSet&lt;T&gt;::directives_for::_{{closure}} (3 samples, 0.02%)</title><rect x="18.5669%" y="1252" width="0.0150%" height="15" fill="rgb(205,97,47)" fg:x="3713" fg:w="3"/><text x="18.8169%" y="1262.50"></text></g><g><title>&lt;tracing_subscriber::filter::directive::StaticDirective as tracing_subscriber::filter::directive::Match&gt;::cares_about (3 samples, 0.02%)</title><rect x="18.5669%" y="1268" width="0.0150%" height="15" fill="rgb(247,152,14)" fg:x="3713" fg:w="3"/><text x="18.8169%" y="1278.50"></text></g><g><title>tracing_core::metadata::Metadata::target (2 samples, 0.01%)</title><rect x="18.5719%" y="1284" width="0.0100%" height="15" fill="rgb(248,195,53)" fg:x="3714" fg:w="2"/><text x="18.8219%" y="1294.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (16 samples, 0.08%)</title><rect x="18.5119%" y="1124" width="0.0800%" height="15" fill="rgb(226,201,16)" fg:x="3702" fg:w="16"/><text x="18.7619%" y="1134.50"></text></g><g><title>&lt;tracing_subscriber::layer::layered::Layered&lt;L,S&gt; as tracing_core::subscriber::Subscriber&gt;::enabled (15 samples, 0.08%)</title><rect x="18.5169%" y="1140" width="0.0750%" height="15" fill="rgb(205,98,0)" fg:x="3703" fg:w="15"/><text x="18.7669%" y="1150.50"></text></g><g><title>tracing_subscriber::layer::layered::Layered&lt;L,S&gt;::ctx (2 samples, 0.01%)</title><rect x="18.5819%" y="1156" width="0.0100%" height="15" fill="rgb(214,191,48)" fg:x="3716" fg:w="2"/><text x="18.8319%" y="1166.50"></text></g><g><title>log::__private_api::enabled (37 samples, 0.19%)</title><rect x="18.4118%" y="1044" width="0.1850%" height="15" fill="rgb(237,112,39)" fg:x="3682" fg:w="37"/><text x="18.6618%" y="1054.50"></text></g><g><title>&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled (37 samples, 0.19%)</title><rect x="18.4118%" y="1060" width="0.1850%" height="15" fill="rgb(247,203,27)" fg:x="3682" fg:w="37"/><text x="18.6618%" y="1070.50"></text></g><g><title>tracing_log::log_tracer::try_cache_interest (34 samples, 0.17%)</title><rect x="18.4268%" y="1076" width="0.1700%" height="15" fill="rgb(235,124,28)" fg:x="3685" fg:w="34"/><text x="18.6768%" y="1086.50"></text></g><g><title>&lt;tracing_log::log_tracer::LogTracer as log::Log&gt;::enabled::_{{closure}} (34 samples, 0.17%)</title><rect x="18.4268%" y="1092" width="0.1700%" height="15" fill="rgb(208,207,46)" fg:x="3685" fg:w="34"/><text x="18.6768%" y="1102.50"></text></g><g><title>tracing_core::dispatcher::get_default (34 samples, 0.17%)</title><rect x="18.4268%" y="1108" width="0.1700%" height="15" fill="rgb(234,176,4)" fg:x="3685" fg:w="34"/><text x="18.6768%" y="1118.50"></text></g><g><title>log::LevelFilter::to_level (2 samples, 0.01%)</title><rect x="18.5969%" y="1060" width="0.0100%" height="15" fill="rgb(230,133,28)" fg:x="3719" fg:w="2"/><text x="18.8469%" y="1070.50"></text></g><g><title>sqlx_core::logger::private_level_filter_to_levels (3 samples, 0.02%)</title><rect x="18.5969%" y="1044" width="0.0150%" height="15" fill="rgb(211,137,40)" fg:x="3719" fg:w="3"/><text x="18.8469%" y="1054.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::logger::QueryLogger&gt; (50 samples, 0.25%)</title><rect x="18.3918%" y="1012" width="0.2500%" height="15" fill="rgb(254,35,13)" fg:x="3678" fg:w="50"/><text x="18.6418%" y="1022.50"></text></g><g><title>sqlx_core::logger::QueryLogger::finish (50 samples, 0.25%)</title><rect x="18.3918%" y="1028" width="0.2500%" height="15" fill="rgb(225,49,51)" fg:x="3678" fg:w="50"/><text x="18.6418%" y="1038.50"></text></g><g><title>std::time::Instant::elapsed (6 samples, 0.03%)</title><rect x="18.6119%" y="1044" width="0.0300%" height="15" fill="rgb(251,10,15)" fg:x="3722" fg:w="6"/><text x="18.8619%" y="1054.50"></text></g><g><title>std::time::Instant::now (5 samples, 0.03%)</title><rect x="18.6169%" y="1060" width="0.0250%" height="15" fill="rgb(228,207,15)" fg:x="3723" fg:w="5"/><text x="18.8669%" y="1070.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (5 samples, 0.03%)</title><rect x="18.6169%" y="1076" width="0.0250%" height="15" fill="rgb(241,99,19)" fg:x="3723" fg:w="5"/><text x="18.8669%" y="1086.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (5 samples, 0.03%)</title><rect x="18.6169%" y="1092" width="0.0250%" height="15" fill="rgb(207,104,49)" fg:x="3723" fg:w="5"/><text x="18.8669%" y="1102.50"></text></g><g><title>__GI___clock_gettime (5 samples, 0.03%)</title><rect x="18.6169%" y="1108" width="0.0250%" height="15" fill="rgb(234,99,18)" fg:x="3723" fg:w="5"/><text x="18.8669%" y="1118.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="18.6319%" y="1124" width="0.0100%" height="15" fill="rgb(213,191,49)" fg:x="3726" fg:w="2"/><text x="18.8819%" y="1134.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="18.6319%" y="1140" width="0.0100%" height="15" fill="rgb(210,226,19)" fg:x="3726" fg:w="2"/><text x="18.8819%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_postgres::connection::stream::PgStream::recv::{{closure}}&gt; (5 samples, 0.03%)</title><rect x="18.6419%" y="1012" width="0.0250%" height="15" fill="rgb(229,97,18)" fg:x="3728" fg:w="5"/><text x="18.8919%" y="1022.50"></text></g><g><title>sqlx_core::logger::QueryLogger::increase_rows_affected (3 samples, 0.02%)</title><rect x="18.6719%" y="1012" width="0.0150%" height="15" fill="rgb(211,167,15)" fg:x="3734" fg:w="3"/><text x="18.9219%" y="1022.50"></text></g><g><title>sqlx_core::logger::QueryLogger::increment_rows_returned (10 samples, 0.05%)</title><rect x="18.6869%" y="1012" width="0.0500%" height="15" fill="rgb(210,169,34)" fg:x="3737" fg:w="10"/><text x="18.9369%" y="1022.50"></text></g><g><title>sqlx_postgres::connection::PgConnection::handle_ready_for_query (7 samples, 0.04%)</title><rect x="18.7369%" y="1012" width="0.0350%" height="15" fill="rgb(241,121,31)" fg:x="3747" fg:w="7"/><text x="18.9869%" y="1022.50"></text></g><g><title>sqlx_core::io::decode::Decode::decode (3 samples, 0.02%)</title><rect x="18.7569%" y="1028" width="0.0150%" height="15" fill="rgb(232,40,11)" fg:x="3751" fg:w="3"/><text x="19.0069%" y="1038.50"></text></g><g><title>&lt;sqlx_postgres::message::ready_for_query::ReadyForQuery as sqlx_core::io::decode::Decode&gt;::decode_with (3 samples, 0.02%)</title><rect x="18.7569%" y="1044" width="0.0150%" height="15" fill="rgb(205,86,26)" fg:x="3751" fg:w="3"/><text x="19.0069%" y="1054.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv (6 samples, 0.03%)</title><rect x="18.7719%" y="1012" width="0.0300%" height="15" fill="rgb(231,126,28)" fg:x="3754" fg:w="6"/><text x="19.0219%" y="1022.50"></text></g><g><title>__memcpy_avx_unaligned_erms (16 samples, 0.08%)</title><rect x="19.4019%" y="1044" width="0.0800%" height="15" fill="rgb(219,221,18)" fg:x="3880" fg:w="16"/><text x="19.6519%" y="1054.50"></text></g><g><title>&lt;F as core::future::into_future::IntoFuture&gt;::into_future (113 samples, 0.57%)</title><rect x="19.3869%" y="1028" width="0.5651%" height="15" fill="rgb(211,40,0)" fg:x="3877" fg:w="113"/><text x="19.6369%" y="1038.50"></text></g><g><title>__memmove_avx_unaligned (94 samples, 0.47%)</title><rect x="19.4819%" y="1044" width="0.4700%" height="15" fill="rgb(239,85,43)" fg:x="3896" fg:w="94"/><text x="19.7319%" y="1054.50"></text></g><g><title>__memcpy_avx_unaligned_erms (48 samples, 0.24%)</title><rect x="19.9520%" y="1028" width="0.2400%" height="15" fill="rgb(231,55,21)" fg:x="3990" fg:w="48"/><text x="20.2020%" y="1038.50"></text></g><g><title>__memmove_avx_unaligned (12 samples, 0.06%)</title><rect x="20.1920%" y="1028" width="0.0600%" height="15" fill="rgb(225,184,43)" fg:x="4038" fg:w="12"/><text x="20.4420%" y="1038.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv::_{{closure}} (3 samples, 0.02%)</title><rect x="20.2520%" y="1028" width="0.0150%" height="15" fill="rgb(251,158,41)" fg:x="4050" fg:w="3"/><text x="20.5020%" y="1038.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv_unchecked (8 samples, 0.04%)</title><rect x="20.2670%" y="1028" width="0.0400%" height="15" fill="rgb(234,159,37)" fg:x="4053" fg:w="8"/><text x="20.5170%" y="1038.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (12 samples, 0.06%)</title><rect x="20.8371%" y="1044" width="0.0600%" height="15" fill="rgb(216,204,22)" fg:x="4167" fg:w="12"/><text x="21.0871%" y="1054.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::chunk (2 samples, 0.01%)</title><rect x="20.8971%" y="1060" width="0.0100%" height="15" fill="rgb(214,17,3)" fg:x="4179" fg:w="2"/><text x="21.1471%" y="1070.50"></text></g><g><title>&lt;bytes::bytes::Bytes as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.02%)</title><rect x="20.9071%" y="1060" width="0.0150%" height="15" fill="rgb(212,111,17)" fg:x="4181" fg:w="3"/><text x="21.1571%" y="1070.50"></text></g><g><title>bytes::bytes::Bytes::inc_start (3 samples, 0.02%)</title><rect x="20.9071%" y="1076" width="0.0150%" height="15" fill="rgb(221,157,24)" fg:x="4181" fg:w="3"/><text x="21.1571%" y="1086.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32 (6 samples, 0.03%)</title><rect x="20.8971%" y="1044" width="0.0300%" height="15" fill="rgb(252,16,13)" fg:x="4179" fg:w="6"/><text x="21.1471%" y="1054.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_impl::Buf&gt;::remaining (13 samples, 0.07%)</title><rect x="21.0171%" y="1060" width="0.0650%" height="15" fill="rgb(221,62,2)" fg:x="4203" fg:w="13"/><text x="21.2671%" y="1070.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u8 (34 samples, 0.17%)</title><rect x="20.9271%" y="1044" width="0.1700%" height="15" fill="rgb(247,87,22)" fg:x="4185" fg:w="34"/><text x="21.1771%" y="1054.50"></text></g><g><title>&lt;bytes::bytes::Bytes as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.02%)</title><rect x="21.0821%" y="1060" width="0.0150%" height="15" fill="rgb(215,73,9)" fg:x="4216" fg:w="3"/><text x="21.3321%" y="1070.50"></text></g><g><title>bytes::bytes::Bytes::inc_start (3 samples, 0.02%)</title><rect x="21.0821%" y="1076" width="0.0150%" height="15" fill="rgb(207,175,33)" fg:x="4216" fg:w="3"/><text x="21.3321%" y="1086.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (36 samples, 0.18%)</title><rect x="21.0971%" y="1044" width="0.1800%" height="15" fill="rgb(243,129,54)" fg:x="4219" fg:w="36"/><text x="21.3471%" y="1054.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (36 samples, 0.18%)</title><rect x="21.0971%" y="1060" width="0.1800%" height="15" fill="rgb(227,119,45)" fg:x="4219" fg:w="36"/><text x="21.3471%" y="1070.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (32 samples, 0.16%)</title><rect x="21.1171%" y="1076" width="0.1600%" height="15" fill="rgb(205,109,36)" fg:x="4223" fg:w="32"/><text x="21.3671%" y="1086.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (31 samples, 0.16%)</title><rect x="21.1221%" y="1092" width="0.1550%" height="15" fill="rgb(205,6,39)" fg:x="4224" fg:w="31"/><text x="21.3721%" y="1102.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (19 samples, 0.10%)</title><rect x="21.1821%" y="1108" width="0.0950%" height="15" fill="rgb(221,32,16)" fg:x="4236" fg:w="19"/><text x="21.4321%" y="1118.50"></text></g><g><title>bytes::bytes_mut::release_shared (19 samples, 0.10%)</title><rect x="21.1821%" y="1124" width="0.0950%" height="15" fill="rgb(228,144,50)" fg:x="4236" fg:w="19"/><text x="21.4321%" y="1134.50"></text></g><g><title>core::mem::drop (8 samples, 0.04%)</title><rect x="21.2371%" y="1140" width="0.0400%" height="15" fill="rgb(229,201,53)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (8 samples, 0.04%)</title><rect x="21.2371%" y="1156" width="0.0400%" height="15" fill="rgb(249,153,27)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (8 samples, 0.04%)</title><rect x="21.2371%" y="1172" width="0.0400%" height="15" fill="rgb(227,106,25)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1182.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.04%)</title><rect x="21.2371%" y="1188" width="0.0400%" height="15" fill="rgb(230,65,29)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.04%)</title><rect x="21.2371%" y="1204" width="0.0400%" height="15" fill="rgb(221,57,46)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1214.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="21.2371%" y="1220" width="0.0400%" height="15" fill="rgb(229,161,17)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1230.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.04%)</title><rect x="21.2371%" y="1236" width="0.0400%" height="15" fill="rgb(222,213,11)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1246.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.04%)</title><rect x="21.2371%" y="1252" width="0.0400%" height="15" fill="rgb(235,35,13)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1262.50"></text></g><g><title>__GI___libc_free (8 samples, 0.04%)</title><rect x="21.2371%" y="1268" width="0.0400%" height="15" fill="rgb(233,158,34)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1278.50"></text></g><g><title>_int_free (8 samples, 0.04%)</title><rect x="21.2371%" y="1284" width="0.0400%" height="15" fill="rgb(215,151,48)" fg:x="4247" fg:w="8"/><text x="21.4871%" y="1294.50"></text></g><g><title>malloc_consolidate (3 samples, 0.02%)</title><rect x="21.2621%" y="1300" width="0.0150%" height="15" fill="rgb(229,84,14)" fg:x="4252" fg:w="3"/><text x="21.5121%" y="1310.50"></text></g><g><title>unlink_chunk (2 samples, 0.01%)</title><rect x="21.2671%" y="1316" width="0.0100%" height="15" fill="rgb(229,68,14)" fg:x="4253" fg:w="2"/><text x="21.5171%" y="1326.50"></text></g><g><title>&lt;bytes::bytes::Bytes as sqlx_core::io::decode::Decode&gt;::decode_with (152 samples, 0.76%)</title><rect x="22.0822%" y="1076" width="0.7601%" height="15" fill="rgb(243,106,26)" fg:x="4416" fg:w="152"/><text x="22.3322%" y="1086.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (25 samples, 0.13%)</title><rect x="22.8423%" y="1076" width="0.1250%" height="15" fill="rgb(206,45,38)" fg:x="4568" fg:w="25"/><text x="23.0923%" y="1086.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (24 samples, 0.12%)</title><rect x="22.9673%" y="1076" width="0.1200%" height="15" fill="rgb(226,6,15)" fg:x="4593" fg:w="24"/><text x="23.2173%" y="1086.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read::_{{closure}} (5 samples, 0.03%)</title><rect x="23.1623%" y="1092" width="0.0250%" height="15" fill="rgb(232,22,54)" fg:x="4632" fg:w="5"/><text x="23.4123%" y="1102.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::poll_read_ready (3 samples, 0.02%)</title><rect x="23.6074%" y="1124" width="0.0150%" height="15" fill="rgb(229,222,32)" fg:x="4721" fg:w="3"/><text x="23.8574%" y="1134.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_ready (3 samples, 0.02%)</title><rect x="23.6074%" y="1140" width="0.0150%" height="15" fill="rgb(228,62,29)" fg:x="4721" fg:w="3"/><text x="23.8574%" y="1150.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (2 samples, 0.01%)</title><rect x="23.6124%" y="1156" width="0.0100%" height="15" fill="rgb(251,103,34)" fg:x="4722" fg:w="2"/><text x="23.8624%" y="1166.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="23.6124%" y="1172" width="0.0100%" height="15" fill="rgb(233,12,30)" fg:x="4722" fg:w="2"/><text x="23.8624%" y="1182.50"></text></g><g><title>std::io::error::Error::kind (3 samples, 0.02%)</title><rect x="23.6624%" y="1188" width="0.0150%" height="15" fill="rgb(238,52,0)" fg:x="4732" fg:w="3"/><text x="23.9124%" y="1198.50"></text></g><g><title>std::sys::unix::decode_error_kind (2 samples, 0.01%)</title><rect x="23.6674%" y="1204" width="0.0100%" height="15" fill="rgb(223,98,5)" fg:x="4733" fg:w="2"/><text x="23.9174%" y="1214.50"></text></g><g><title>[unknown] (179 samples, 0.90%)</title><rect x="23.7274%" y="1364" width="0.8951%" height="15" fill="rgb(228,75,37)" fg:x="4745" fg:w="179"/><text x="23.9774%" y="1374.50"></text></g><g><title>[unknown] (175 samples, 0.88%)</title><rect x="23.7474%" y="1380" width="0.8751%" height="15" fill="rgb(205,115,49)" fg:x="4749" fg:w="175"/><text x="23.9974%" y="1390.50"></text></g><g><title>[unknown] (167 samples, 0.84%)</title><rect x="23.7874%" y="1396" width="0.8351%" height="15" fill="rgb(250,154,43)" fg:x="4757" fg:w="167"/><text x="24.0374%" y="1406.50"></text></g><g><title>[unknown] (167 samples, 0.84%)</title><rect x="23.7874%" y="1412" width="0.8351%" height="15" fill="rgb(226,43,29)" fg:x="4757" fg:w="167"/><text x="24.0374%" y="1422.50"></text></g><g><title>[unknown] (154 samples, 0.77%)</title><rect x="23.8524%" y="1428" width="0.7701%" height="15" fill="rgb(249,228,39)" fg:x="4770" fg:w="154"/><text x="24.1024%" y="1438.50"></text></g><g><title>[unknown] (151 samples, 0.76%)</title><rect x="23.8674%" y="1444" width="0.7551%" height="15" fill="rgb(216,79,43)" fg:x="4773" fg:w="151"/><text x="24.1174%" y="1454.50"></text></g><g><title>[unknown] (137 samples, 0.69%)</title><rect x="23.9374%" y="1460" width="0.6851%" height="15" fill="rgb(228,95,12)" fg:x="4787" fg:w="137"/><text x="24.1874%" y="1470.50"></text></g><g><title>[unknown] (107 samples, 0.54%)</title><rect x="24.0874%" y="1476" width="0.5351%" height="15" fill="rgb(249,221,15)" fg:x="4817" fg:w="107"/><text x="24.3374%" y="1486.50"></text></g><g><title>[unknown] (74 samples, 0.37%)</title><rect x="24.2524%" y="1492" width="0.3700%" height="15" fill="rgb(233,34,13)" fg:x="4850" fg:w="74"/><text x="24.5024%" y="1502.50"></text></g><g><title>[unknown] (72 samples, 0.36%)</title><rect x="24.2624%" y="1508" width="0.3600%" height="15" fill="rgb(214,103,39)" fg:x="4852" fg:w="72"/><text x="24.5124%" y="1518.50"></text></g><g><title>[unknown] (58 samples, 0.29%)</title><rect x="24.3324%" y="1524" width="0.2900%" height="15" fill="rgb(251,126,39)" fg:x="4866" fg:w="58"/><text x="24.5824%" y="1534.50"></text></g><g><title>[unknown] (55 samples, 0.28%)</title><rect x="24.3474%" y="1540" width="0.2750%" height="15" fill="rgb(214,216,36)" fg:x="4869" fg:w="55"/><text x="24.5974%" y="1550.50"></text></g><g><title>[unknown] (55 samples, 0.28%)</title><rect x="24.3474%" y="1556" width="0.2750%" height="15" fill="rgb(220,221,8)" fg:x="4869" fg:w="55"/><text x="24.5974%" y="1566.50"></text></g><g><title>[unknown] (22 samples, 0.11%)</title><rect x="24.5125%" y="1572" width="0.1100%" height="15" fill="rgb(240,216,3)" fg:x="4902" fg:w="22"/><text x="24.7625%" y="1582.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="24.5925%" y="1588" width="0.0300%" height="15" fill="rgb(232,218,17)" fg:x="4918" fg:w="6"/><text x="24.8425%" y="1598.50"></text></g><g><title>__libc_recv (185 samples, 0.93%)</title><rect x="23.7024%" y="1332" width="0.9251%" height="15" fill="rgb(229,163,45)" fg:x="4740" fg:w="185"/><text x="23.9524%" y="1342.50"></text></g><g><title>__libc_recv (181 samples, 0.91%)</title><rect x="23.7224%" y="1348" width="0.9051%" height="15" fill="rgb(231,110,42)" fg:x="4744" fg:w="181"/><text x="23.9724%" y="1358.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (193 samples, 0.97%)</title><rect x="23.6824%" y="1204" width="0.9651%" height="15" fill="rgb(208,170,48)" fg:x="4736" fg:w="193"/><text x="23.9324%" y="1214.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (190 samples, 0.95%)</title><rect x="23.6974%" y="1220" width="0.9501%" height="15" fill="rgb(239,116,25)" fg:x="4739" fg:w="190"/><text x="23.9474%" y="1230.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (190 samples, 0.95%)</title><rect x="23.6974%" y="1236" width="0.9501%" height="15" fill="rgb(219,200,50)" fg:x="4739" fg:w="190"/><text x="23.9474%" y="1246.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (190 samples, 0.95%)</title><rect x="23.6974%" y="1252" width="0.9501%" height="15" fill="rgb(245,200,0)" fg:x="4739" fg:w="190"/><text x="23.9474%" y="1262.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (190 samples, 0.95%)</title><rect x="23.6974%" y="1268" width="0.9501%" height="15" fill="rgb(245,119,33)" fg:x="4739" fg:w="190"/><text x="23.9474%" y="1278.50"></text></g><g><title>std::sys_common::net::TcpStream::read (189 samples, 0.95%)</title><rect x="23.7024%" y="1284" width="0.9451%" height="15" fill="rgb(231,125,12)" fg:x="4740" fg:w="189"/><text x="23.9524%" y="1294.50"></text></g><g><title>std::sys::unix::net::Socket::read (189 samples, 0.95%)</title><rect x="23.7024%" y="1300" width="0.9451%" height="15" fill="rgb(216,96,41)" fg:x="4740" fg:w="189"/><text x="23.9524%" y="1310.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (189 samples, 0.95%)</title><rect x="23.7024%" y="1316" width="0.9451%" height="15" fill="rgb(248,43,45)" fg:x="4740" fg:w="189"/><text x="23.9524%" y="1326.50"></text></g><g><title>std::sys::unix::cvt (4 samples, 0.02%)</title><rect x="24.6275%" y="1332" width="0.0200%" height="15" fill="rgb(217,222,7)" fg:x="4925" fg:w="4"/><text x="24.8775%" y="1342.50"></text></g><g><title>std::io::error::Error::last_os_error (4 samples, 0.02%)</title><rect x="24.6275%" y="1348" width="0.0200%" height="15" fill="rgb(233,28,6)" fg:x="4925" fg:w="4"/><text x="24.8775%" y="1358.50"></text></g><g><title>std::sys::unix::os::errno (4 samples, 0.02%)</title><rect x="24.6275%" y="1364" width="0.0200%" height="15" fill="rgb(231,218,15)" fg:x="4925" fg:w="4"/><text x="24.8775%" y="1374.50"></text></g><g><title>__GI___errno_location (4 samples, 0.02%)</title><rect x="24.6275%" y="1380" width="0.0200%" height="15" fill="rgb(226,171,48)" fg:x="4925" fg:w="4"/><text x="24.8775%" y="1390.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_read_buf::_{{closure}} (196 samples, 0.98%)</title><rect x="23.6824%" y="1188" width="0.9801%" height="15" fill="rgb(235,201,9)" fg:x="4736" fg:w="196"/><text x="23.9324%" y="1198.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (3 samples, 0.02%)</title><rect x="24.6475%" y="1204" width="0.0150%" height="15" fill="rgb(217,80,15)" fg:x="4929" fg:w="3"/><text x="24.8975%" y="1214.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.01%)</title><rect x="24.6525%" y="1220" width="0.0100%" height="15" fill="rgb(219,152,8)" fg:x="4930" fg:w="2"/><text x="24.9025%" y="1230.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::try_read (214 samples, 1.07%)</title><rect x="23.6224%" y="1124" width="1.0701%" height="15" fill="rgb(243,107,38)" fg:x="4724" fg:w="214"/><text x="23.8724%" y="1134.50"></text></g><g><title>sqlx_core::rt::rt_tokio::socket::&lt;impl sqlx_core::net::socket::Socket for tokio::net::tcp::stream::TcpStream&gt;::try_read (214 samples, 1.07%)</title><rect x="23.6224%" y="1140" width="1.0701%" height="15" fill="rgb(231,17,5)" fg:x="4724" fg:w="214"/><text x="23.8724%" y="1150.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_read_buf (211 samples, 1.06%)</title><rect x="23.6374%" y="1156" width="1.0551%" height="15" fill="rgb(209,25,54)" fg:x="4727" fg:w="211"/><text x="23.8874%" y="1166.50"></text></g><g><title>tokio::runtime::io::registration::Registration::try_io (211 samples, 1.06%)</title><rect x="23.6374%" y="1172" width="1.0551%" height="15" fill="rgb(219,0,2)" fg:x="4727" fg:w="211"/><text x="23.8874%" y="1182.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::ready_event (5 samples, 0.03%)</title><rect x="24.6675%" y="1188" width="0.0250%" height="15" fill="rgb(246,9,5)" fg:x="4933" fg:w="5"/><text x="24.9175%" y="1198.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.03%)</title><rect x="24.6675%" y="1204" width="0.0250%" height="15" fill="rgb(226,159,4)" fg:x="4933" fg:w="5"/><text x="24.9175%" y="1214.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::ready_event (4 samples, 0.02%)</title><rect x="24.6725%" y="1220" width="0.0200%" height="15" fill="rgb(219,175,34)" fg:x="4934" fg:w="4"/><text x="24.9225%" y="1230.50"></text></g><g><title>&lt;sqlx_core::net::socket::Read&lt;S,B&gt; as core::future::future::Future&gt;::poll (223 samples, 1.12%)</title><rect x="23.5874%" y="1108" width="1.1151%" height="15" fill="rgb(236,10,46)" fg:x="4717" fg:w="223"/><text x="23.8374%" y="1118.50"></text></g><g><title>std::io::error::Error::kind (2 samples, 0.01%)</title><rect x="24.6925%" y="1124" width="0.0100%" height="15" fill="rgb(240,211,16)" fg:x="4938" fg:w="2"/><text x="24.9425%" y="1134.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (2 samples, 0.01%)</title><rect x="24.6925%" y="1140" width="0.0100%" height="15" fill="rgb(205,3,43)" fg:x="4938" fg:w="2"/><text x="24.9425%" y="1150.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (2 samples, 0.01%)</title><rect x="24.6925%" y="1156" width="0.0100%" height="15" fill="rgb(245,7,22)" fg:x="4938" fg:w="2"/><text x="24.9425%" y="1166.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.18%)</title><rect x="24.7475%" y="1236" width="0.1750%" height="15" fill="rgb(239,132,32)" fg:x="4949" fg:w="35"/><text x="24.9975%" y="1246.50"></text></g><g><title>_int_malloc (34 samples, 0.17%)</title><rect x="24.7525%" y="1252" width="0.1700%" height="15" fill="rgb(228,202,34)" fg:x="4950" fg:w="34"/><text x="25.0025%" y="1262.50"></text></g><g><title>malloc_consolidate (28 samples, 0.14%)</title><rect x="24.7825%" y="1268" width="0.1400%" height="15" fill="rgb(254,200,22)" fg:x="4956" fg:w="28"/><text x="25.0325%" y="1278.50"></text></g><g><title>unlink_chunk (11 samples, 0.06%)</title><rect x="24.8675%" y="1284" width="0.0550%" height="15" fill="rgb(219,10,39)" fg:x="4973" fg:w="11"/><text x="25.1175%" y="1294.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (45 samples, 0.23%)</title><rect x="24.7025%" y="1108" width="0.2250%" height="15" fill="rgb(226,210,39)" fg:x="4940" fg:w="45"/><text x="24.9525%" y="1118.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (37 samples, 0.19%)</title><rect x="24.7425%" y="1124" width="0.1850%" height="15" fill="rgb(208,219,16)" fg:x="4948" fg:w="37"/><text x="24.9925%" y="1134.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (37 samples, 0.19%)</title><rect x="24.7425%" y="1140" width="0.1850%" height="15" fill="rgb(216,158,51)" fg:x="4948" fg:w="37"/><text x="24.9925%" y="1150.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (37 samples, 0.19%)</title><rect x="24.7425%" y="1156" width="0.1850%" height="15" fill="rgb(233,14,44)" fg:x="4948" fg:w="37"/><text x="24.9925%" y="1166.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (37 samples, 0.19%)</title><rect x="24.7425%" y="1172" width="0.1850%" height="15" fill="rgb(237,97,39)" fg:x="4948" fg:w="37"/><text x="24.9925%" y="1182.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 0.18%)</title><rect x="24.7475%" y="1188" width="0.1800%" height="15" fill="rgb(218,198,43)" fg:x="4949" fg:w="36"/><text x="24.9975%" y="1198.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 0.18%)</title><rect x="24.7475%" y="1204" width="0.1800%" height="15" fill="rgb(231,104,20)" fg:x="4949" fg:w="36"/><text x="24.9975%" y="1214.50"></text></g><g><title>alloc::alloc::alloc (36 samples, 0.18%)</title><rect x="24.7475%" y="1220" width="0.1800%" height="15" fill="rgb(254,36,13)" fg:x="4949" fg:w="36"/><text x="24.9975%" y="1230.50"></text></g><g><title>sqlx_core::net::socket::buffered::ReadBuffer::advance (5 samples, 0.03%)</title><rect x="24.9275%" y="1108" width="0.0250%" height="15" fill="rgb(248,14,50)" fg:x="4985" fg:w="5"/><text x="25.1775%" y="1118.50"></text></g><g><title>bytes::bytes_mut::BytesMut::unsplit (5 samples, 0.03%)</title><rect x="24.9275%" y="1124" width="0.0250%" height="15" fill="rgb(217,107,29)" fg:x="4985" fg:w="5"/><text x="25.1775%" y="1134.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (5 samples, 0.03%)</title><rect x="24.9275%" y="1140" width="0.0250%" height="15" fill="rgb(251,169,33)" fg:x="4985" fg:w="5"/><text x="25.1775%" y="1150.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.03%)</title><rect x="24.9275%" y="1156" width="0.0250%" height="15" fill="rgb(217,108,32)" fg:x="4985" fg:w="5"/><text x="25.1775%" y="1166.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.03%)</title><rect x="24.9275%" y="1172" width="0.0250%" height="15" fill="rgb(219,66,42)" fg:x="4985" fg:w="5"/><text x="25.1775%" y="1182.50"></text></g><g><title>bytes::bytes_mut::BytesMut::len (4 samples, 0.02%)</title><rect x="25.6426%" y="1140" width="0.0200%" height="15" fill="rgb(206,180,7)" fg:x="5128" fg:w="4"/><text x="25.8926%" y="1150.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_end (9 samples, 0.05%)</title><rect x="25.6626%" y="1140" width="0.0450%" height="15" fill="rgb(208,226,31)" fg:x="5132" fg:w="9"/><text x="25.9126%" y="1150.50"></text></g><g><title>core::cmp::min (8 samples, 0.04%)</title><rect x="25.6676%" y="1156" width="0.0400%" height="15" fill="rgb(218,26,49)" fg:x="5133" fg:w="8"/><text x="25.9176%" y="1166.50"></text></g><g><title>core::cmp::Ord::min (8 samples, 0.04%)</title><rect x="25.6676%" y="1172" width="0.0400%" height="15" fill="rgb(233,197,48)" fg:x="5133" fg:w="8"/><text x="25.9176%" y="1182.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (8 samples, 0.04%)</title><rect x="25.6676%" y="1188" width="0.0400%" height="15" fill="rgb(252,181,51)" fg:x="5133" fg:w="8"/><text x="25.9176%" y="1198.50"></text></g><g><title>bytes::bytes_mut::BytesMut::set_start (23 samples, 0.12%)</title><rect x="25.7076%" y="1140" width="0.1150%" height="15" fill="rgb(253,90,19)" fg:x="5141" fg:w="23"/><text x="25.9576%" y="1150.50"></text></g><g><title>bytes::bytes_mut::BytesMut::shallow_clone (38 samples, 0.19%)</title><rect x="25.8226%" y="1140" width="0.1900%" height="15" fill="rgb(215,171,30)" fg:x="5164" fg:w="38"/><text x="26.0726%" y="1150.50"></text></g><g><title>bytes::bytes_mut::increment_shared (35 samples, 0.18%)</title><rect x="25.8376%" y="1156" width="0.1750%" height="15" fill="rgb(214,222,9)" fg:x="5167" fg:w="35"/><text x="26.0876%" y="1166.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (5 samples, 0.03%)</title><rect x="25.9876%" y="1172" width="0.0250%" height="15" fill="rgb(223,3,22)" fg:x="5197" fg:w="5"/><text x="26.2376%" y="1182.50"></text></g><g><title>core::sync::atomic::atomic_add (5 samples, 0.03%)</title><rect x="25.9876%" y="1188" width="0.0250%" height="15" fill="rgb(225,196,46)" fg:x="5197" fg:w="5"/><text x="26.2376%" y="1198.50"></text></g><g><title>sqlx_core::net::socket::buffered::ReadBuffer::drain (343 samples, 1.72%)</title><rect x="24.9525%" y="1108" width="1.7152%" height="15" fill="rgb(209,110,37)" fg:x="4990" fg:w="343"/><text x="25.2025%" y="1118.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (318 samples, 1.59%)</title><rect x="25.0775%" y="1124" width="1.5902%" height="15" fill="rgb(249,89,12)" fg:x="5015" fg:w="318"/><text x="25.3275%" y="1134.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_to (131 samples, 0.66%)</title><rect x="26.0126%" y="1140" width="0.6551%" height="15" fill="rgb(226,27,33)" fg:x="5202" fg:w="131"/><text x="26.2626%" y="1150.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read::_{{closure}} (1,080 samples, 5.40%)</title><rect x="21.2771%" y="1044" width="5.4005%" height="15" fill="rgb(213,82,22)" fg:x="4255" fg:w="1080"/><text x="21.5271%" y="1054.50">sqlx_co..</text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read_with::_{{closure}} (991 samples, 4.96%)</title><rect x="21.7222%" y="1060" width="4.9555%" height="15" fill="rgb(248,140,0)" fg:x="4344" fg:w="991"/><text x="21.9722%" y="1070.50">sqlx_c..</text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read_buffered::_{{closure}} (717 samples, 3.59%)</title><rect x="23.0923%" y="1076" width="3.5854%" height="15" fill="rgb(228,106,3)" fg:x="4618" fg:w="717"/><text x="23.3423%" y="1086.50">sqlx..</text></g><g><title>sqlx_core::net::socket::buffered::ReadBuffer::read::_{{closure}} (698 samples, 3.49%)</title><rect x="23.1873%" y="1092" width="3.4903%" height="15" fill="rgb(209,23,37)" fg:x="4637" fg:w="698"/><text x="23.4373%" y="1102.50">sql..</text></g><g><title>sqlx_core::net::socket::buffered::ReadBuffer::reserve (2 samples, 0.01%)</title><rect x="26.6677%" y="1108" width="0.0100%" height="15" fill="rgb(241,93,50)" fg:x="5333" fg:w="2"/><text x="26.9177%" y="1118.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv::_{{closure}} (1,603 samples, 8.02%)</title><rect x="18.8019%" y="1012" width="8.0158%" height="15" fill="rgb(253,46,43)" fg:x="3760" fg:w="1603"/><text x="19.0519%" y="1022.50">sqlx_postgr..</text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv_unchecked::_{{closure}} (1,302 samples, 6.51%)</title><rect x="20.3070%" y="1028" width="6.5107%" height="15" fill="rgb(226,206,43)" fg:x="4061" fg:w="1302"/><text x="20.5570%" y="1038.50">sqlx_post..</text></g><g><title>sqlx_postgres::message::MessageFormat::try_from_u8 (28 samples, 0.14%)</title><rect x="26.6777%" y="1044" width="0.1400%" height="15" fill="rgb(217,54,7)" fg:x="5335" fg:w="28"/><text x="26.9277%" y="1054.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be_bytes (6 samples, 0.03%)</title><rect x="27.3177%" y="1076" width="0.0300%" height="15" fill="rgb(223,5,52)" fg:x="5463" fg:w="6"/><text x="27.5677%" y="1086.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be (6 samples, 0.03%)</title><rect x="27.3177%" y="1092" width="0.0300%" height="15" fill="rgb(206,52,46)" fg:x="5463" fg:w="6"/><text x="27.5677%" y="1102.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (6 samples, 0.03%)</title><rect x="27.3177%" y="1108" width="0.0300%" height="15" fill="rgb(253,136,11)" fg:x="5463" fg:w="6"/><text x="27.5677%" y="1118.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u16 (8 samples, 0.04%)</title><rect x="27.3177%" y="1060" width="0.0400%" height="15" fill="rgb(208,106,33)" fg:x="5463" fg:w="8"/><text x="27.5677%" y="1070.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.01%)</title><rect x="27.3477%" y="1076" width="0.0100%" height="15" fill="rgb(206,54,4)" fg:x="5469" fg:w="2"/><text x="27.5977%" y="1086.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="27.3477%" y="1092" width="0.0100%" height="15" fill="rgb(213,3,15)" fg:x="5469" fg:w="2"/><text x="27.5977%" y="1102.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.01%)</title><rect x="27.3477%" y="1108" width="0.0100%" height="15" fill="rgb(252,211,39)" fg:x="5469" fg:w="2"/><text x="27.5977%" y="1118.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.07%)</title><rect x="27.3627%" y="1060" width="0.0700%" height="15" fill="rgb(223,6,36)" fg:x="5472" fg:w="14"/><text x="27.6127%" y="1070.50"></text></g><g><title>core::ptr::write (8 samples, 0.04%)</title><rect x="27.3927%" y="1076" width="0.0400%" height="15" fill="rgb(252,169,45)" fg:x="5478" fg:w="8"/><text x="27.6427%" y="1086.50"></text></g><g><title>__GI___libc_malloc (57 samples, 0.29%)</title><rect x="27.4677%" y="1172" width="0.2850%" height="15" fill="rgb(212,48,26)" fg:x="5493" fg:w="57"/><text x="27.7177%" y="1182.50"></text></g><g><title>tcache_get (14 samples, 0.07%)</title><rect x="27.6828%" y="1188" width="0.0700%" height="15" fill="rgb(251,102,48)" fg:x="5536" fg:w="14"/><text x="27.9328%" y="1198.50"></text></g><g><title>__rust_alloc (7 samples, 0.04%)</title><rect x="27.7578%" y="1172" width="0.0350%" height="15" fill="rgb(243,208,16)" fg:x="5551" fg:w="7"/><text x="28.0078%" y="1182.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (68 samples, 0.34%)</title><rect x="27.4627%" y="1124" width="0.3400%" height="15" fill="rgb(219,96,24)" fg:x="5492" fg:w="68"/><text x="27.7127%" y="1134.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (68 samples, 0.34%)</title><rect x="27.4627%" y="1140" width="0.3400%" height="15" fill="rgb(219,33,29)" fg:x="5492" fg:w="68"/><text x="27.7127%" y="1150.50"></text></g><g><title>alloc::alloc::alloc (68 samples, 0.34%)</title><rect x="27.4627%" y="1156" width="0.3400%" height="15" fill="rgb(223,176,5)" fg:x="5492" fg:w="68"/><text x="27.7127%" y="1166.50"></text></g><g><title>core::ptr::read_volatile (2 samples, 0.01%)</title><rect x="27.7928%" y="1172" width="0.0100%" height="15" fill="rgb(228,140,14)" fg:x="5558" fg:w="2"/><text x="28.0428%" y="1182.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (80 samples, 0.40%)</title><rect x="27.4327%" y="1060" width="0.4000%" height="15" fill="rgb(217,179,31)" fg:x="5486" fg:w="80"/><text x="27.6827%" y="1070.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (80 samples, 0.40%)</title><rect x="27.4327%" y="1076" width="0.4000%" height="15" fill="rgb(230,9,30)" fg:x="5486" fg:w="80"/><text x="27.6827%" y="1086.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (80 samples, 0.40%)</title><rect x="27.4327%" y="1092" width="0.4000%" height="15" fill="rgb(230,136,20)" fg:x="5486" fg:w="80"/><text x="27.6827%" y="1102.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (80 samples, 0.40%)</title><rect x="27.4327%" y="1108" width="0.4000%" height="15" fill="rgb(215,210,22)" fg:x="5486" fg:w="80"/><text x="27.6827%" y="1118.50"></text></g><g><title>core::alloc::layout::Layout::array (6 samples, 0.03%)</title><rect x="27.8028%" y="1124" width="0.0300%" height="15" fill="rgb(218,43,5)" fg:x="5560" fg:w="6"/><text x="28.0528%" y="1134.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (6 samples, 0.03%)</title><rect x="27.8028%" y="1140" width="0.0300%" height="15" fill="rgb(216,11,5)" fg:x="5560" fg:w="6"/><text x="28.0528%" y="1150.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (5 samples, 0.03%)</title><rect x="27.8328%" y="1092" width="0.0250%" height="15" fill="rgb(209,82,29)" fg:x="5566" fg:w="5"/><text x="28.0828%" y="1102.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (5 samples, 0.03%)</title><rect x="27.8328%" y="1108" width="0.0250%" height="15" fill="rgb(244,115,12)" fg:x="5566" fg:w="5"/><text x="28.0828%" y="1118.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (5 samples, 0.03%)</title><rect x="27.8328%" y="1124" width="0.0250%" height="15" fill="rgb(222,82,18)" fg:x="5566" fg:w="5"/><text x="28.0828%" y="1134.50"></text></g><g><title>byteorder::ByteOrder::read_i32 (8 samples, 0.04%)</title><rect x="27.8328%" y="1060" width="0.0400%" height="15" fill="rgb(249,227,8)" fg:x="5566" fg:w="8"/><text x="28.0828%" y="1070.50"></text></g><g><title>&lt;byteorder::BigEndian as byteorder::ByteOrder&gt;::read_u32 (8 samples, 0.04%)</title><rect x="27.8328%" y="1076" width="0.0400%" height="15" fill="rgb(253,141,45)" fg:x="5566" fg:w="8"/><text x="28.0828%" y="1086.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.02%)</title><rect x="27.8578%" y="1092" width="0.0150%" height="15" fill="rgb(234,184,4)" fg:x="5571" fg:w="3"/><text x="28.1078%" y="1102.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="27.8578%" y="1108" width="0.0150%" height="15" fill="rgb(218,194,23)" fg:x="5571" fg:w="3"/><text x="28.1078%" y="1118.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.02%)</title><rect x="27.8578%" y="1124" width="0.0150%" height="15" fill="rgb(235,66,41)" fg:x="5571" fg:w="3"/><text x="28.1078%" y="1134.50"></text></g><g><title>sqlx_postgres::message::Message::decode (216 samples, 1.08%)</title><rect x="26.8177%" y="1012" width="1.0801%" height="15" fill="rgb(245,217,1)" fg:x="5363" fg:w="216"/><text x="27.0677%" y="1022.50"></text></g><g><title>sqlx_core::io::decode::Decode::decode (154 samples, 0.77%)</title><rect x="27.1277%" y="1028" width="0.7701%" height="15" fill="rgb(229,91,1)" fg:x="5425" fg:w="154"/><text x="27.3777%" y="1038.50"></text></g><g><title>&lt;sqlx_postgres::message::data_row::DataRow as sqlx_core::io::decode::Decode&gt;::decode_with (154 samples, 0.77%)</title><rect x="27.1277%" y="1044" width="0.7701%" height="15" fill="rgb(207,101,30)" fg:x="5425" fg:w="154"/><text x="27.3777%" y="1054.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.03%)</title><rect x="27.8728%" y="1060" width="0.0250%" height="15" fill="rgb(223,82,49)" fg:x="5574" fg:w="5"/><text x="28.1228%" y="1070.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.03%)</title><rect x="27.8728%" y="1076" width="0.0250%" height="15" fill="rgb(218,167,17)" fg:x="5574" fg:w="5"/><text x="28.1228%" y="1086.50"></text></g><g><title>atoi::ascii_to_digit (2 samples, 0.01%)</title><rect x="27.9278%" y="1092" width="0.0100%" height="15" fill="rgb(208,103,14)" fg:x="5585" fg:w="2"/><text x="28.1778%" y="1102.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (13 samples, 0.07%)</title><rect x="27.9028%" y="1028" width="0.0650%" height="15" fill="rgb(238,20,8)" fg:x="5580" fg:w="13"/><text x="28.1528%" y="1038.50"></text></g><g><title>sqlx_postgres::message::command_complete::CommandComplete::rows_affected::_{{closure}} (13 samples, 0.07%)</title><rect x="27.9028%" y="1044" width="0.0650%" height="15" fill="rgb(218,80,54)" fg:x="5580" fg:w="13"/><text x="28.1528%" y="1054.50"></text></g><g><title>atoi::atoi (13 samples, 0.07%)</title><rect x="27.9028%" y="1060" width="0.0650%" height="15" fill="rgb(240,144,17)" fg:x="5580" fg:w="13"/><text x="28.1528%" y="1070.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked (12 samples, 0.06%)</title><rect x="27.9078%" y="1076" width="0.0600%" height="15" fill="rgb(245,27,50)" fg:x="5581" fg:w="12"/><text x="28.1578%" y="1086.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (5 samples, 0.03%)</title><rect x="27.9428%" y="1092" width="0.0250%" height="15" fill="rgb(251,51,7)" fg:x="5588" fg:w="5"/><text x="28.1928%" y="1102.50"></text></g><g><title>&lt;I as atoi::FromRadix10SignedChecked&gt;::from_radix_10_signed_checked::_{{closure}} (5 samples, 0.03%)</title><rect x="27.9428%" y="1108" width="0.0250%" height="15" fill="rgb(245,217,29)" fg:x="5588" fg:w="5"/><text x="28.1928%" y="1118.50"></text></g><g><title>atoi::Sign::try_from (5 samples, 0.03%)</title><rect x="27.9428%" y="1124" width="0.0250%" height="15" fill="rgb(221,176,29)" fg:x="5588" fg:w="5"/><text x="28.1928%" y="1134.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (3,414 samples, 17.07%)</title><rect x="10.9361%" y="964" width="17.0717%" height="15" fill="rgb(212,180,24)" fg:x="2187" fg:w="3414"/><text x="11.1861%" y="974.50">&lt;futures_util::future::fut..</text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new::_{{closure}} (3,387 samples, 16.94%)</title><rect x="11.0711%" y="980" width="16.9367%" height="15" fill="rgb(254,24,2)" fg:x="2214" fg:w="3387"/><text x="11.3211%" y="990.50">sqlx_core::ext::async_stre..</text></g><g><title>sqlx_postgres::connection::executor::_&lt;impl sqlx_postgres::connection::PgConnection&gt;::run::_{{closure}}::_{{closure}}::_{{closure}} (3,355 samples, 16.78%)</title><rect x="11.2311%" y="996" width="16.7767%" height="15" fill="rgb(230,100,2)" fg:x="2246" fg:w="3355"/><text x="11.4811%" y="1006.50">sqlx_postgres::connection:..</text></g><g><title>sqlx_postgres::message::command_complete::CommandComplete::rows_affected (22 samples, 0.11%)</title><rect x="27.8978%" y="1012" width="0.1100%" height="15" fill="rgb(219,142,25)" fg:x="5579" fg:w="22"/><text x="28.1478%" y="1022.50"></text></g><g><title>memchr::memchr::memrchr (8 samples, 0.04%)</title><rect x="27.9678%" y="1028" width="0.0400%" height="15" fill="rgb(240,73,43)" fg:x="5593" fg:w="8"/><text x="28.2178%" y="1038.50"></text></g><g><title>memchr::arch::generic::memchr::search_slice_with_raw (8 samples, 0.04%)</title><rect x="27.9678%" y="1044" width="0.0400%" height="15" fill="rgb(214,114,15)" fg:x="5593" fg:w="8"/><text x="28.2178%" y="1054.50"></text></g><g><title>memchr::memchr::memrchr::_{{closure}} (7 samples, 0.04%)</title><rect x="27.9728%" y="1060" width="0.0350%" height="15" fill="rgb(207,130,4)" fg:x="5594" fg:w="7"/><text x="28.2228%" y="1070.50"></text></g><g><title>memchr::memchr::memrchr_raw (7 samples, 0.04%)</title><rect x="27.9728%" y="1076" width="0.0350%" height="15" fill="rgb(221,25,40)" fg:x="5594" fg:w="7"/><text x="28.2228%" y="1086.50"></text></g><g><title>memchr::arch::x86_64::memchr::memrchr_raw (7 samples, 0.04%)</title><rect x="27.9728%" y="1092" width="0.0350%" height="15" fill="rgb(241,184,7)" fg:x="5594" fg:w="7"/><text x="28.2228%" y="1102.50"></text></g><g><title>memchr::arch::x86_64::memchr::memrchr_raw::find_avx2 (4 samples, 0.02%)</title><rect x="27.9878%" y="1108" width="0.0200%" height="15" fill="rgb(235,159,4)" fg:x="5597" fg:w="4"/><text x="28.2378%" y="1118.50"></text></g><g><title>memchr::arch::x86_64::avx2::memchr::One::rfind_raw (4 samples, 0.02%)</title><rect x="27.9878%" y="1124" width="0.0200%" height="15" fill="rgb(214,87,48)" fg:x="5597" fg:w="4"/><text x="28.2378%" y="1134.50"></text></g><g><title>memchr::arch::generic::memchr::rev_byte_by_byte (2 samples, 0.01%)</title><rect x="27.9978%" y="1140" width="0.0100%" height="15" fill="rgb(246,198,24)" fg:x="5599" fg:w="2"/><text x="28.2478%" y="1150.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (3,419 samples, 17.10%)</title><rect x="10.9361%" y="932" width="17.0967%" height="15" fill="rgb(209,66,40)" fg:x="2187" fg:w="3419"/><text x="11.1861%" y="942.50">&lt;&amp;mut F as core::future::f..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (3,419 samples, 17.10%)</title><rect x="10.9361%" y="948" width="17.0967%" height="15" fill="rgb(233,147,39)" fg:x="2187" fg:w="3419"/><text x="11.1861%" y="958.50">&lt;core::pin::Pin&lt;P&gt; as core..</text></g><g><title>core::pin::Pin&lt;&amp;mut core::pin::Pin&lt;P&gt;&gt;::as_deref_mut (5 samples, 0.03%)</title><rect x="28.0078%" y="964" width="0.0250%" height="15" fill="rgb(231,145,52)" fg:x="5601" fg:w="5"/><text x="28.2578%" y="974.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (5 samples, 0.03%)</title><rect x="28.0078%" y="980" width="0.0250%" height="15" fill="rgb(206,20,26)" fg:x="5601" fg:w="5"/><text x="28.2578%" y="990.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (5 samples, 0.03%)</title><rect x="28.0078%" y="996" width="0.0250%" height="15" fill="rgb(238,220,4)" fg:x="5601" fg:w="5"/><text x="28.2578%" y="1006.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="28.7929%" y="980" width="0.0350%" height="15" fill="rgb(252,195,42)" fg:x="5758" fg:w="7"/><text x="29.0429%" y="990.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (7 samples, 0.04%)</title><rect x="28.7929%" y="996" width="0.0350%" height="15" fill="rgb(209,10,6)" fg:x="5758" fg:w="7"/><text x="29.0429%" y="1006.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17he15746afdfa2baffE.llvm.14649322283256066022 (7 samples, 0.04%)</title><rect x="28.7929%" y="1012" width="0.0350%" height="15" fill="rgb(229,3,52)" fg:x="5758" fg:w="7"/><text x="29.0429%" y="1022.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (11 samples, 0.06%)</title><rect x="28.8279%" y="980" width="0.0550%" height="15" fill="rgb(253,49,37)" fg:x="5765" fg:w="11"/><text x="29.0779%" y="990.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="28.8829%" y="1028" width="0.0100%" height="15" fill="rgb(240,103,49)" fg:x="5776" fg:w="2"/><text x="29.1329%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::queue::Queue&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="28.8979%" y="1060" width="0.0100%" height="15" fill="rgb(250,182,30)" fg:x="5779" fg:w="2"/><text x="29.1479%" y="1070.50"></text></g><g><title>&lt;futures_channel::mpsc::queue::Queue&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="28.8979%" y="1076" width="0.0100%" height="15" fill="rgb(248,8,30)" fg:x="5779" fg:w="2"/><text x="29.1479%" y="1086.50"></text></g><g><title>core::mem::drop (2 samples, 0.01%)</title><rect x="28.8979%" y="1092" width="0.0100%" height="15" fill="rgb(237,120,30)" fg:x="5779" fg:w="2"/><text x="29.1479%" y="1102.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="28.8979%" y="1108" width="0.0100%" height="15" fill="rgb(221,146,34)" fg:x="5779" fg:w="2"/><text x="29.1479%" y="1118.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="28.8979%" y="1124" width="0.0100%" height="15" fill="rgb(242,55,13)" fg:x="5779" fg:w="2"/><text x="29.1479%" y="1134.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="28.8979%" y="1140" width="0.0100%" height="15" fill="rgb(242,112,31)" fg:x="5779" fg:w="2"/><text x="29.1479%" y="1150.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="28.8979%" y="1156" width="0.0100%" height="15" fill="rgb(249,192,27)" fg:x="5779" fg:w="2"/><text x="29.1479%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="28.8829%" y="980" width="0.0350%" height="15" fill="rgb(208,204,44)" fg:x="5776" fg:w="7"/><text x="29.1329%" y="990.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="28.8829%" y="996" width="0.0350%" height="15" fill="rgb(208,93,54)" fg:x="5776" fg:w="7"/><text x="29.1329%" y="1006.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="28.8829%" y="1012" width="0.0350%" height="15" fill="rgb(242,1,31)" fg:x="5776" fg:w="7"/><text x="29.1329%" y="1022.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.03%)</title><rect x="28.8929%" y="1028" width="0.0250%" height="15" fill="rgb(241,83,25)" fg:x="5778" fg:w="5"/><text x="29.1429%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="28.8979%" y="1044" width="0.0200%" height="15" fill="rgb(205,169,50)" fg:x="5779" fg:w="4"/><text x="29.1479%" y="1054.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::queue::Queue&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="28.9079%" y="1060" width="0.0100%" height="15" fill="rgb(239,186,37)" fg:x="5781" fg:w="2"/><text x="29.1579%" y="1070.50"></text></g><g><title>&lt;futures_channel::mpsc::queue::Queue&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="28.9079%" y="1076" width="0.0100%" height="15" fill="rgb(205,221,10)" fg:x="5781" fg:w="2"/><text x="29.1579%" y="1086.50"></text></g><g><title>core::mem::drop (2 samples, 0.01%)</title><rect x="28.9079%" y="1092" width="0.0100%" height="15" fill="rgb(218,196,15)" fg:x="5781" fg:w="2"/><text x="29.1579%" y="1102.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="28.9079%" y="1108" width="0.0100%" height="15" fill="rgb(218,196,35)" fg:x="5781" fg:w="2"/><text x="29.1579%" y="1118.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.04%)</title><rect x="28.9279%" y="996" width="0.0350%" height="15" fill="rgb(233,63,24)" fg:x="5785" fg:w="7"/><text x="29.1779%" y="1006.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (10 samples, 0.05%)</title><rect x="28.9629%" y="996" width="0.0500%" height="15" fill="rgb(225,8,4)" fg:x="5792" fg:w="10"/><text x="29.2129%" y="1006.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt; (33 samples, 0.17%)</title><rect x="29.0129%" y="996" width="0.1650%" height="15" fill="rgb(234,105,35)" fg:x="5802" fg:w="33"/><text x="29.2629%" y="1006.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (33 samples, 0.17%)</title><rect x="29.0129%" y="1012" width="0.1650%" height="15" fill="rgb(236,21,32)" fg:x="5802" fg:w="33"/><text x="29.2629%" y="1022.50"></text></g><g><title>std::sync::poison::Flag::done (12 samples, 0.06%)</title><rect x="29.1779%" y="1028" width="0.0600%" height="15" fill="rgb(228,109,6)" fg:x="5835" fg:w="12"/><text x="29.4279%" y="1038.50"></text></g><g><title>std::thread::panicking (12 samples, 0.06%)</title><rect x="29.1779%" y="1044" width="0.0600%" height="15" fill="rgb(229,215,31)" fg:x="5835" fg:w="12"/><text x="29.4279%" y="1054.50"></text></g><g><title>std::panicking::panicking (12 samples, 0.06%)</title><rect x="29.1779%" y="1060" width="0.0600%" height="15" fill="rgb(221,52,54)" fg:x="5835" fg:w="12"/><text x="29.4279%" y="1070.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (12 samples, 0.06%)</title><rect x="29.1779%" y="1076" width="0.0600%" height="15" fill="rgb(252,129,43)" fg:x="5835" fg:w="12"/><text x="29.4279%" y="1086.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (7 samples, 0.04%)</title><rect x="29.2029%" y="1092" width="0.0350%" height="15" fill="rgb(248,183,27)" fg:x="5840" fg:w="7"/><text x="29.4529%" y="1102.50"></text></g><g><title>core::sync::atomic::atomic_load (7 samples, 0.04%)</title><rect x="29.2029%" y="1108" width="0.0350%" height="15" fill="rgb(250,0,22)" fg:x="5840" fg:w="7"/><text x="29.4529%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (49 samples, 0.25%)</title><rect x="29.1779%" y="996" width="0.2450%" height="15" fill="rgb(213,166,10)" fg:x="5835" fg:w="49"/><text x="29.4279%" y="1006.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (49 samples, 0.25%)</title><rect x="29.1779%" y="1012" width="0.2450%" height="15" fill="rgb(207,163,36)" fg:x="5835" fg:w="49"/><text x="29.4279%" y="1022.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (37 samples, 0.19%)</title><rect x="29.2379%" y="1028" width="0.1850%" height="15" fill="rgb(208,122,22)" fg:x="5847" fg:w="37"/><text x="29.4879%" y="1038.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4 samples, 0.02%)</title><rect x="29.4229%" y="996" width="0.0200%" height="15" fill="rgb(207,104,49)" fg:x="5884" fg:w="4"/><text x="29.6729%" y="1006.50"></text></g><g><title>futures_channel::mpsc::SenderTask::notify (23 samples, 0.12%)</title><rect x="29.4429%" y="996" width="0.1150%" height="15" fill="rgb(248,211,50)" fg:x="5888" fg:w="23"/><text x="29.6929%" y="1006.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.01%)</title><rect x="29.5480%" y="1012" width="0.0100%" height="15" fill="rgb(217,13,45)" fg:x="5909" fg:w="2"/><text x="29.7980%" y="1022.50"></text></g><g><title>core::mem::replace (2 samples, 0.01%)</title><rect x="29.5480%" y="1028" width="0.0100%" height="15" fill="rgb(211,216,49)" fg:x="5909" fg:w="2"/><text x="29.7980%" y="1038.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="29.5480%" y="1044" width="0.0100%" height="15" fill="rgb(221,58,53)" fg:x="5909" fg:w="2"/><text x="29.7980%" y="1054.50"></text></g><g><title>_int_free (27 samples, 0.14%)</title><rect x="29.8330%" y="1124" width="0.1350%" height="15" fill="rgb(220,112,41)" fg:x="5966" fg:w="27"/><text x="30.0830%" y="1134.50"></text></g><g><title>tcache_put (2 samples, 0.01%)</title><rect x="29.9580%" y="1140" width="0.0100%" height="15" fill="rgb(236,38,28)" fg:x="5991" fg:w="2"/><text x="30.2080%" y="1150.50"></text></g><g><title>__GI___libc_free (75 samples, 0.38%)</title><rect x="29.6280%" y="1108" width="0.3750%" height="15" fill="rgb(227,195,22)" fg:x="5925" fg:w="75"/><text x="29.8780%" y="1118.50"></text></g><g><title>arena_for_chunk (7 samples, 0.04%)</title><rect x="29.9680%" y="1124" width="0.0350%" height="15" fill="rgb(214,55,33)" fg:x="5993" fg:w="7"/><text x="30.2180%" y="1134.50"></text></g><g><title>arena_for_chunk (2 samples, 0.01%)</title><rect x="29.9930%" y="1140" width="0.0100%" height="15" fill="rgb(248,80,13)" fg:x="5998" fg:w="2"/><text x="30.2430%" y="1150.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.02%)</title><rect x="30.0030%" y="1108" width="0.0150%" height="15" fill="rgb(238,52,6)" fg:x="6000" fg:w="3"/><text x="30.2530%" y="1118.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.02%)</title><rect x="30.0030%" y="1124" width="0.0150%" height="15" fill="rgb(224,198,47)" fg:x="6000" fg:w="3"/><text x="30.2530%" y="1134.50"></text></g><g><title>core::mem::drop (82 samples, 0.41%)</title><rect x="29.6280%" y="1028" width="0.4100%" height="15" fill="rgb(233,171,20)" fg:x="5925" fg:w="82"/><text x="29.8780%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt;&gt;&gt; (82 samples, 0.41%)</title><rect x="29.6280%" y="1044" width="0.4100%" height="15" fill="rgb(241,30,25)" fg:x="5925" fg:w="82"/><text x="29.8780%" y="1054.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.41%)</title><rect x="29.6280%" y="1060" width="0.4100%" height="15" fill="rgb(207,171,38)" fg:x="5925" fg:w="82"/><text x="29.8780%" y="1070.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (82 samples, 0.41%)</title><rect x="29.6280%" y="1076" width="0.4100%" height="15" fill="rgb(234,70,1)" fg:x="5925" fg:w="82"/><text x="29.8780%" y="1086.50"></text></g><g><title>alloc::alloc::dealloc (82 samples, 0.41%)</title><rect x="29.6280%" y="1092" width="0.4100%" height="15" fill="rgb(232,178,18)" fg:x="5925" fg:w="82"/><text x="29.8780%" y="1102.50"></text></g><g><title>__rust_dealloc (4 samples, 0.02%)</title><rect x="30.0180%" y="1108" width="0.0200%" height="15" fill="rgb(241,78,40)" fg:x="6003" fg:w="4"/><text x="30.2680%" y="1118.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.01%)</title><rect x="30.0380%" y="1028" width="0.0100%" height="15" fill="rgb(222,35,25)" fg:x="6007" fg:w="2"/><text x="30.2880%" y="1038.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (100 samples, 0.50%)</title><rect x="29.5580%" y="996" width="0.5001%" height="15" fill="rgb(207,92,16)" fg:x="5911" fg:w="100"/><text x="29.8080%" y="1006.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (87 samples, 0.44%)</title><rect x="29.6230%" y="1012" width="0.4350%" height="15" fill="rgb(216,59,51)" fg:x="5924" fg:w="87"/><text x="29.8730%" y="1022.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (2 samples, 0.01%)</title><rect x="30.0480%" y="1028" width="0.0100%" height="15" fill="rgb(213,80,28)" fg:x="6009" fg:w="2"/><text x="30.2980%" y="1038.50"></text></g><g><title>core::mem::replace (2 samples, 0.01%)</title><rect x="30.0480%" y="1044" width="0.0100%" height="15" fill="rgb(220,93,7)" fg:x="6009" fg:w="2"/><text x="30.2980%" y="1054.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="30.0480%" y="1060" width="0.0100%" height="15" fill="rgb(225,24,44)" fg:x="6009" fg:w="2"/><text x="30.2980%" y="1070.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (8 samples, 0.04%)</title><rect x="30.0580%" y="1012" width="0.0400%" height="15" fill="rgb(243,74,40)" fg:x="6011" fg:w="8"/><text x="30.3080%" y="1022.50"></text></g><g><title>std::sync::poison::Flag::guard (8 samples, 0.04%)</title><rect x="30.0580%" y="1028" width="0.0400%" height="15" fill="rgb(228,39,7)" fg:x="6011" fg:w="8"/><text x="30.3080%" y="1038.50"></text></g><g><title>std::thread::panicking (5 samples, 0.03%)</title><rect x="30.0730%" y="1044" width="0.0250%" height="15" fill="rgb(227,79,8)" fg:x="6014" fg:w="5"/><text x="30.3230%" y="1054.50"></text></g><g><title>std::panicking::panicking (5 samples, 0.03%)</title><rect x="30.0730%" y="1060" width="0.0250%" height="15" fill="rgb(236,58,11)" fg:x="6014" fg:w="5"/><text x="30.3230%" y="1070.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (5 samples, 0.03%)</title><rect x="30.0730%" y="1076" width="0.0250%" height="15" fill="rgb(249,63,35)" fg:x="6014" fg:w="5"/><text x="30.3230%" y="1086.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="30.0880%" y="1092" width="0.0100%" height="15" fill="rgb(252,114,16)" fg:x="6017" fg:w="2"/><text x="30.3380%" y="1102.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="30.0880%" y="1108" width="0.0100%" height="15" fill="rgb(254,151,24)" fg:x="6017" fg:w="2"/><text x="30.3380%" y="1118.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (28 samples, 0.14%)</title><rect x="30.0580%" y="996" width="0.1400%" height="15" fill="rgb(253,54,39)" fg:x="6011" fg:w="28"/><text x="30.3080%" y="1006.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (20 samples, 0.10%)</title><rect x="30.0980%" y="1012" width="0.1000%" height="15" fill="rgb(243,25,45)" fg:x="6019" fg:w="20"/><text x="30.3480%" y="1022.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::unpark_one (304 samples, 1.52%)</title><rect x="28.9179%" y="980" width="1.5202%" height="15" fill="rgb(234,134,9)" fg:x="5783" fg:w="304"/><text x="29.1679%" y="990.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (48 samples, 0.24%)</title><rect x="30.1980%" y="996" width="0.2400%" height="15" fill="rgb(227,166,31)" fg:x="6039" fg:w="48"/><text x="30.4480%" y="1006.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (45 samples, 0.23%)</title><rect x="30.2130%" y="1012" width="0.2250%" height="15" fill="rgb(245,143,41)" fg:x="6042" fg:w="45"/><text x="30.4630%" y="1022.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (43 samples, 0.22%)</title><rect x="30.2230%" y="1028" width="0.2150%" height="15" fill="rgb(238,181,32)" fg:x="6044" fg:w="43"/><text x="30.4730%" y="1038.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (42 samples, 0.21%)</title><rect x="30.2280%" y="1044" width="0.2100%" height="15" fill="rgb(224,113,18)" fg:x="6045" fg:w="42"/><text x="30.4780%" y="1054.50"></text></g><g><title>_int_free (27 samples, 0.14%)</title><rect x="31.3981%" y="1108" width="0.1350%" height="15" fill="rgb(240,229,28)" fg:x="6279" fg:w="27"/><text x="31.6481%" y="1118.50"></text></g><g><title>__GI___libc_free (117 samples, 0.59%)</title><rect x="30.9581%" y="1092" width="0.5851%" height="15" fill="rgb(250,185,3)" fg:x="6191" fg:w="117"/><text x="31.2081%" y="1102.50"></text></g><g><title>arena_for_chunk (2 samples, 0.01%)</title><rect x="31.5332%" y="1108" width="0.0100%" height="15" fill="rgb(212,59,25)" fg:x="6306" fg:w="2"/><text x="31.7832%" y="1118.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.01%)</title><rect x="31.5432%" y="1092" width="0.0100%" height="15" fill="rgb(221,87,20)" fg:x="6308" fg:w="2"/><text x="31.7932%" y="1102.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.01%)</title><rect x="31.5432%" y="1108" width="0.0100%" height="15" fill="rgb(213,74,28)" fg:x="6308" fg:w="2"/><text x="31.7932%" y="1118.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (126 samples, 0.63%)</title><rect x="30.9581%" y="1044" width="0.6301%" height="15" fill="rgb(224,132,34)" fg:x="6191" fg:w="126"/><text x="31.2081%" y="1054.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (126 samples, 0.63%)</title><rect x="30.9581%" y="1060" width="0.6301%" height="15" fill="rgb(222,101,24)" fg:x="6191" fg:w="126"/><text x="31.2081%" y="1070.50"></text></g><g><title>alloc::alloc::dealloc (126 samples, 0.63%)</title><rect x="30.9581%" y="1076" width="0.6301%" height="15" fill="rgb(254,142,4)" fg:x="6191" fg:w="126"/><text x="31.2081%" y="1086.50"></text></g><g><title>__rust_dealloc (7 samples, 0.04%)</title><rect x="31.5532%" y="1092" width="0.0350%" height="15" fill="rgb(230,229,49)" fg:x="6310" fg:w="7"/><text x="31.8032%" y="1102.50"></text></g><g><title>core::mem::drop (130 samples, 0.65%)</title><rect x="30.9581%" y="1012" width="0.6501%" height="15" fill="rgb(238,70,47)" fg:x="6191" fg:w="130"/><text x="31.2081%" y="1022.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (130 samples, 0.65%)</title><rect x="30.9581%" y="1028" width="0.6501%" height="15" fill="rgb(231,160,17)" fg:x="6191" fg:w="130"/><text x="31.2081%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::queue::Node&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="31.5882%" y="1044" width="0.0200%" height="15" fill="rgb(218,68,53)" fg:x="6317" fg:w="4"/><text x="31.8382%" y="1054.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="31.5882%" y="1060" width="0.0200%" height="15" fill="rgb(236,111,10)" fg:x="6317" fg:w="4"/><text x="31.8382%" y="1070.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (10 samples, 0.05%)</title><rect x="31.6082%" y="1012" width="0.0500%" height="15" fill="rgb(224,34,41)" fg:x="6321" fg:w="10"/><text x="31.8582%" y="1022.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (17 samples, 0.09%)</title><rect x="31.6582%" y="1012" width="0.0850%" height="15" fill="rgb(241,118,19)" fg:x="6331" fg:w="17"/><text x="31.9082%" y="1022.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (717 samples, 3.59%)</title><rect x="28.1728%" y="964" width="3.5854%" height="15" fill="rgb(238,129,25)" fg:x="5634" fg:w="717"/><text x="28.4228%" y="974.50">futu..</text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (264 samples, 1.32%)</title><rect x="30.4380%" y="980" width="1.3201%" height="15" fill="rgb(238,22,31)" fg:x="6087" fg:w="264"/><text x="30.6880%" y="990.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (194 samples, 0.97%)</title><rect x="30.7881%" y="996" width="0.9701%" height="15" fill="rgb(222,174,48)" fg:x="6157" fg:w="194"/><text x="31.0381%" y="1006.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.01%)</title><rect x="31.7482%" y="1012" width="0.0100%" height="15" fill="rgb(206,152,40)" fg:x="6349" fg:w="2"/><text x="31.9982%" y="1022.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="31.7482%" y="1028" width="0.0100%" height="15" fill="rgb(218,99,54)" fg:x="6349" fg:w="2"/><text x="31.9982%" y="1038.50"></text></g><g><title>&lt;&amp;mut S as futures_core::stream::Stream&gt;::poll_next (747 samples, 3.74%)</title><rect x="28.0328%" y="932" width="3.7354%" height="15" fill="rgb(220,174,26)" fg:x="5606" fg:w="747"/><text x="28.2828%" y="942.50">&lt;&amp;mu..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (738 samples, 3.69%)</title><rect x="28.0778%" y="948" width="3.6904%" height="15" fill="rgb(245,116,9)" fg:x="5615" fg:w="738"/><text x="28.3278%" y="958.50">&lt;fut..</text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::register (2 samples, 0.01%)</title><rect x="31.7582%" y="964" width="0.0100%" height="15" fill="rgb(209,72,35)" fg:x="6351" fg:w="2"/><text x="32.0082%" y="974.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_next::TryNext&lt;St&gt; as core::future::future::Future&gt;::poll (4,261 samples, 21.31%)</title><rect x="10.4760%" y="852" width="21.3071%" height="15" fill="rgb(226,126,21)" fg:x="2095" fg:w="4261"/><text x="10.7260%" y="862.50">&lt;futures_util::stream::try_stream:..</text></g><g><title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (4,170 samples, 20.85%)</title><rect x="10.9311%" y="868" width="20.8521%" height="15" fill="rgb(227,192,1)" fg:x="2186" fg:w="4170"/><text x="11.1811%" y="878.50">futures_util::stream::try_stream:..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (4,170 samples, 20.85%)</title><rect x="10.9311%" y="884" width="20.8521%" height="15" fill="rgb(237,180,29)" fg:x="2186" fg:w="4170"/><text x="11.1811%" y="894.50">&lt;S as futures_core::stream::TrySt..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (4,170 samples, 20.85%)</title><rect x="10.9311%" y="900" width="20.8521%" height="15" fill="rgb(230,197,35)" fg:x="2186" fg:w="4170"/><text x="11.1811%" y="910.50">&lt;core::pin::Pin&lt;P&gt; as futures_cor..</text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,170 samples, 20.85%)</title><rect x="10.9311%" y="916" width="20.8521%" height="15" fill="rgb(246,193,31)" fg:x="2186" fg:w="4170"/><text x="11.1811%" y="926.50">&lt;sqlx_core::ext::async_stream::Tr..</text></g><g><title>core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;core::result::Result&lt;(),sqlx_core::error::Error&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="31.7682%" y="932" width="0.0150%" height="15" fill="rgb(241,36,4)" fg:x="6353" fg:w="3"/><text x="32.0182%" y="942.50"></text></g><g><title>__GI___libc_free (17 samples, 0.09%)</title><rect x="31.7832%" y="852" width="0.0850%" height="15" fill="rgb(241,130,17)" fg:x="6356" fg:w="17"/><text x="32.0332%" y="862.50"></text></g><g><title>_int_free (12 samples, 0.06%)</title><rect x="31.8082%" y="868" width="0.0600%" height="15" fill="rgb(206,137,32)" fg:x="6361" fg:w="12"/><text x="32.0582%" y="878.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="31.8682%" y="852" width="0.0150%" height="15" fill="rgb(237,228,51)" fg:x="6373" fg:w="3"/><text x="32.1182%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="31.8882%" y="852" width="0.0100%" height="15" fill="rgb(243,6,42)" fg:x="6377" fg:w="2"/><text x="32.1382%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="31.8882%" y="868" width="0.0100%" height="15" fill="rgb(251,74,28)" fg:x="6377" fg:w="2"/><text x="32.1382%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="31.8882%" y="884" width="0.0100%" height="15" fill="rgb(218,20,49)" fg:x="6377" fg:w="2"/><text x="32.1382%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::sink::send::Send&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;,core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="31.8982%" y="852" width="0.0250%" height="15" fill="rgb(238,28,14)" fg:x="6379" fg:w="5"/><text x="32.1482%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::sink::feed::Feed&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;,core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="31.8982%" y="868" width="0.0250%" height="15" fill="rgb(229,40,46)" fg:x="6379" fg:w="5"/><text x="32.1482%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="31.9482%" y="868" width="0.0150%" height="15" fill="rgb(244,195,20)" fg:x="6389" fg:w="3"/><text x="32.1982%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (3 samples, 0.02%)</title><rect x="31.9482%" y="884" width="0.0150%" height="15" fill="rgb(253,56,35)" fg:x="6389" fg:w="3"/><text x="32.1982%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;&gt;::new&lt;sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::run::{{closure}}::{{closure}},sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::run::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="31.9482%" y="900" width="0.0150%" height="15" fill="rgb(210,149,44)" fg:x="6389" fg:w="3"/><text x="32.1982%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;&gt;::new&lt;sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::run::{{closure}}::{{closure}},sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::run::{{closure}}::{{closure}}::{{closure}}&gt;::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="31.9482%" y="916" width="0.0150%" height="15" fill="rgb(240,135,12)" fg:x="6389" fg:w="3"/><text x="32.1982%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;&gt;&gt; (10 samples, 0.05%)</title><rect x="31.9232%" y="852" width="0.0500%" height="15" fill="rgb(251,24,50)" fg:x="6384" fg:w="10"/><text x="32.1732%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Receiver&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="31.9632%" y="868" width="0.0100%" height="15" fill="rgb(243,200,47)" fg:x="6392" fg:w="2"/><text x="32.2132%" y="878.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="31.9632%" y="884" width="0.0100%" height="15" fill="rgb(224,166,26)" fg:x="6392" fg:w="2"/><text x="32.2132%" y="894.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_next::TryNext&lt;St&gt; as core::future::future::Future&gt;::poll (5,497 samples, 27.49%)</title><rect x="4.5005%" y="692" width="27.4877%" height="15" fill="rgb(233,0,47)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="702.50">&lt;futures_util::stream::try_stream::try_next:..</text></g><g><title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (5,497 samples, 27.49%)</title><rect x="4.5005%" y="708" width="27.4877%" height="15" fill="rgb(253,80,5)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="718.50">futures_util::stream::try_stream::TryStreamE..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (5,497 samples, 27.49%)</title><rect x="4.5005%" y="724" width="27.4877%" height="15" fill="rgb(214,133,25)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="734.50">&lt;S as futures_core::stream::TryStream&gt;::try_..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (5,497 samples, 27.49%)</title><rect x="4.5005%" y="740" width="27.4877%" height="15" fill="rgb(209,27,14)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="750.50">&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::..</text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,497 samples, 27.49%)</title><rect x="4.5005%" y="756" width="27.4877%" height="15" fill="rgb(219,102,51)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="766.50">&lt;sqlx_core::ext::async_stream::TryAsyncStrea..</text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (5,497 samples, 27.49%)</title><rect x="4.5005%" y="772" width="27.4877%" height="15" fill="rgb(237,18,16)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="782.50">&lt;&amp;mut F as core::future::future::Future&gt;::po..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,497 samples, 27.49%)</title><rect x="4.5005%" y="788" width="27.4877%" height="15" fill="rgb(241,85,17)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="798.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::..</text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (5,497 samples, 27.49%)</title><rect x="4.5005%" y="804" width="27.4877%" height="15" fill="rgb(236,90,42)" fg:x="900" fg:w="5497"/><text x="4.7505%" y="814.50">&lt;futures_util::future::future::fuse::Fuse&lt;Fu..</text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new::_{{closure}} (5,481 samples, 27.41%)</title><rect x="4.5805%" y="820" width="27.4077%" height="15" fill="rgb(249,57,21)" fg:x="916" fg:w="5481"/><text x="4.8305%" y="830.50">sqlx_core::ext::async_stream::TryAsyncStream..</text></g><g><title>sqlx_postgres::connection::executor::_&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many::_{{closure}}::_{{closure}} (5,445 samples, 27.23%)</title><rect x="4.7605%" y="836" width="27.2277%" height="15" fill="rgb(243,12,36)" fg:x="952" fg:w="5445"/><text x="5.0105%" y="846.50">sqlx_postgres::connection::executor::_&lt;impl ..</text></g><g><title>sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::run (2 samples, 0.01%)</title><rect x="31.9782%" y="852" width="0.0100%" height="15" fill="rgb(253,128,47)" fg:x="6395" fg:w="2"/><text x="32.2282%" y="862.50"></text></g><g><title>&lt;sqlx_core::query::Query&lt;DB,A&gt; as sqlx_core::executor::Execute&lt;DB&gt;&gt;::take_arguments (3 samples, 0.02%)</title><rect x="31.9932%" y="708" width="0.0150%" height="15" fill="rgb(207,33,20)" fg:x="6398" fg:w="3"/><text x="32.2432%" y="718.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="31.9932%" y="724" width="0.0150%" height="15" fill="rgb(233,215,35)" fg:x="6398" fg:w="3"/><text x="32.2432%" y="734.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.01%)</title><rect x="31.9982%" y="740" width="0.0100%" height="15" fill="rgb(249,188,52)" fg:x="6399" fg:w="2"/><text x="32.2482%" y="750.50"></text></g><g><title>sqlx_postgres::&lt;impl sqlx_core::arguments::IntoArguments&lt;&lt;sqlx_postgres::arguments::PgArguments as sqlx_core::arguments::Arguments&gt;::Database&gt; for sqlx_postgres::arguments::PgArguments&gt;::into_arguments (2 samples, 0.01%)</title><rect x="31.9982%" y="756" width="0.0100%" height="15" fill="rgb(225,12,32)" fg:x="6399" fg:w="2"/><text x="32.2482%" y="766.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (5 samples, 0.03%)</title><rect x="32.0082%" y="708" width="0.0250%" height="15" fill="rgb(247,98,14)" fg:x="6401" fg:w="5"/><text x="32.2582%" y="718.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.03%)</title><rect x="32.0082%" y="724" width="0.0250%" height="15" fill="rgb(247,219,48)" fg:x="6401" fg:w="5"/><text x="32.2582%" y="734.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.02%)</title><rect x="32.0182%" y="740" width="0.0150%" height="15" fill="rgb(253,60,48)" fg:x="6403" fg:w="3"/><text x="32.2682%" y="750.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="32.0182%" y="756" width="0.0150%" height="15" fill="rgb(245,15,52)" fg:x="6403" fg:w="3"/><text x="32.2682%" y="766.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="32.0182%" y="772" width="0.0150%" height="15" fill="rgb(220,133,28)" fg:x="6403" fg:w="3"/><text x="32.2682%" y="782.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="32.0182%" y="788" width="0.0150%" height="15" fill="rgb(217,180,4)" fg:x="6403" fg:w="3"/><text x="32.2682%" y="798.50"></text></g><g><title>&lt;futures_channel::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="32.0382%" y="724" width="0.0250%" height="15" fill="rgb(251,24,1)" fg:x="6407" fg:w="5"/><text x="32.2882%" y="734.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="32.0532%" y="740" width="0.0100%" height="15" fill="rgb(212,185,49)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="750.50"></text></g><g><title>&lt;futures_channel::mpsc::BoundedSenderInner&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="32.0532%" y="756" width="0.0100%" height="15" fill="rgb(215,175,22)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="766.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="32.0532%" y="772" width="0.0100%" height="15" fill="rgb(250,205,14)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="782.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="32.0532%" y="788" width="0.0100%" height="15" fill="rgb(225,211,22)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="798.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="32.0532%" y="804" width="0.0100%" height="15" fill="rgb(251,179,42)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="814.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="32.0532%" y="820" width="0.0100%" height="15" fill="rgb(208,216,51)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="830.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="32.0532%" y="836" width="0.0100%" height="15" fill="rgb(235,36,11)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="846.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="32.0532%" y="852" width="0.0100%" height="15" fill="rgb(213,189,28)" fg:x="6410" fg:w="2"/><text x="32.3032%" y="862.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="32.0882%" y="740" width="0.0100%" height="15" fill="rgb(227,203,42)" fg:x="6417" fg:w="2"/><text x="32.3382%" y="750.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="32.1032%" y="852" width="0.0100%" height="15" fill="rgb(244,72,36)" fg:x="6420" fg:w="2"/><text x="32.3532%" y="862.50"></text></g><g><title>unlink_chunk (2 samples, 0.01%)</title><rect x="32.1032%" y="868" width="0.0100%" height="15" fill="rgb(213,53,17)" fg:x="6420" fg:w="2"/><text x="32.3532%" y="878.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.02%)</title><rect x="32.0982%" y="836" width="0.0200%" height="15" fill="rgb(207,167,3)" fg:x="6419" fg:w="4"/><text x="32.3482%" y="846.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="32.0982%" y="740" width="0.0300%" height="15" fill="rgb(216,98,30)" fg:x="6419" fg:w="6"/><text x="32.3482%" y="750.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="32.0982%" y="756" width="0.0300%" height="15" fill="rgb(236,123,15)" fg:x="6419" fg:w="6"/><text x="32.3482%" y="766.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.03%)</title><rect x="32.0982%" y="772" width="0.0300%" height="15" fill="rgb(248,81,50)" fg:x="6419" fg:w="6"/><text x="32.3482%" y="782.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="32.0982%" y="788" width="0.0300%" height="15" fill="rgb(214,120,4)" fg:x="6419" fg:w="6"/><text x="32.3482%" y="798.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="32.0982%" y="804" width="0.0300%" height="15" fill="rgb(208,179,34)" fg:x="6419" fg:w="6"/><text x="32.3482%" y="814.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="32.0982%" y="820" width="0.0300%" height="15" fill="rgb(227,140,7)" fg:x="6419" fg:w="6"/><text x="32.3482%" y="830.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.03%)</title><rect x="32.1282%" y="852" width="0.0300%" height="15" fill="rgb(214,22,6)" fg:x="6425" fg:w="6"/><text x="32.3782%" y="862.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="32.1482%" y="868" width="0.0100%" height="15" fill="rgb(207,137,27)" fg:x="6429" fg:w="2"/><text x="32.3982%" y="878.50"></text></g><g><title>futures_channel::mpsc::channel (19 samples, 0.10%)</title><rect x="32.0682%" y="724" width="0.0950%" height="15" fill="rgb(210,8,46)" fg:x="6413" fg:w="19"/><text x="32.3182%" y="734.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="32.1282%" y="740" width="0.0350%" height="15" fill="rgb(240,16,54)" fg:x="6425" fg:w="7"/><text x="32.3782%" y="750.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="32.1282%" y="756" width="0.0350%" height="15" fill="rgb(211,209,29)" fg:x="6425" fg:w="7"/><text x="32.3782%" y="766.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="32.1282%" y="772" width="0.0350%" height="15" fill="rgb(226,228,24)" fg:x="6425" fg:w="7"/><text x="32.3782%" y="782.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.04%)</title><rect x="32.1282%" y="788" width="0.0350%" height="15" fill="rgb(222,84,9)" fg:x="6425" fg:w="7"/><text x="32.3782%" y="798.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.04%)</title><rect x="32.1282%" y="804" width="0.0350%" height="15" fill="rgb(234,203,30)" fg:x="6425" fg:w="7"/><text x="32.3782%" y="814.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.04%)</title><rect x="32.1282%" y="820" width="0.0350%" height="15" fill="rgb(238,109,14)" fg:x="6425" fg:w="7"/><text x="32.3782%" y="830.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.04%)</title><rect x="32.1282%" y="836" width="0.0350%" height="15" fill="rgb(233,206,34)" fg:x="6425" fg:w="7"/><text x="32.3782%" y="846.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.07%)</title><rect x="32.1632%" y="772" width="0.0700%" height="15" fill="rgb(220,167,47)" fg:x="6432" fg:w="14"/><text x="32.4132%" y="782.50"></text></g><g><title>__memmove_avx_unaligned (4 samples, 0.02%)</title><rect x="32.2332%" y="772" width="0.0200%" height="15" fill="rgb(238,105,10)" fg:x="6446" fg:w="4"/><text x="32.4832%" y="782.50"></text></g><g><title>futures_util::future::future::FutureExt::boxed (25 samples, 0.13%)</title><rect x="32.1632%" y="724" width="0.1250%" height="15" fill="rgb(213,227,17)" fg:x="6432" fg:w="25"/><text x="32.4132%" y="734.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (25 samples, 0.13%)</title><rect x="32.1632%" y="740" width="0.1250%" height="15" fill="rgb(217,132,38)" fg:x="6432" fg:w="25"/><text x="32.4132%" y="750.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (25 samples, 0.13%)</title><rect x="32.1632%" y="756" width="0.1250%" height="15" fill="rgb(242,146,4)" fg:x="6432" fg:w="25"/><text x="32.4132%" y="766.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.04%)</title><rect x="32.2532%" y="772" width="0.0350%" height="15" fill="rgb(212,61,9)" fg:x="6450" fg:w="7"/><text x="32.5032%" y="782.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.04%)</title><rect x="32.2532%" y="788" width="0.0350%" height="15" fill="rgb(247,126,22)" fg:x="6450" fg:w="7"/><text x="32.5032%" y="798.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.04%)</title><rect x="32.2532%" y="804" width="0.0350%" height="15" fill="rgb(220,196,2)" fg:x="6450" fg:w="7"/><text x="32.5032%" y="814.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.04%)</title><rect x="32.2532%" y="820" width="0.0350%" height="15" fill="rgb(208,46,4)" fg:x="6450" fg:w="7"/><text x="32.5032%" y="830.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.04%)</title><rect x="32.2532%" y="836" width="0.0350%" height="15" fill="rgb(252,104,46)" fg:x="6450" fg:w="7"/><text x="32.5032%" y="846.50"></text></g><g><title>_int_malloc (5 samples, 0.03%)</title><rect x="32.2632%" y="852" width="0.0250%" height="15" fill="rgb(237,152,48)" fg:x="6452" fg:w="5"/><text x="32.5132%" y="862.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (5,897 samples, 29.49%)</title><rect x="2.8053%" y="100" width="29.4879%" height="15" fill="rgb(221,59,37)" fg:x="561" fg:w="5897"/><text x="3.0553%" y="110.50">&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N..</text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (5,897 samples, 29.49%)</title><rect x="2.8053%" y="116" width="29.4879%" height="15" fill="rgb(209,202,51)" fg:x="561" fg:w="5897"/><text x="3.0553%" y="126.50">&lt;hyper::server::conn::upgrades::UpgradeableConn..</text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (5,897 samples, 29.49%)</title><rect x="2.8053%" y="132" width="29.4879%" height="15" fill="rgb(228,81,30)" fg:x="561" fg:w="5897"/><text x="3.0553%" y="142.50">&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as c..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (5,897 samples, 29.49%)</title><rect x="2.8053%" y="148" width="29.4879%" height="15" fill="rgb(227,42,39)" fg:x="561" fg:w="5897"/><text x="3.0553%" y="158.50">&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (5,897 samples, 29.49%)</title><rect x="2.8053%" y="164" width="29.4879%" height="15" fill="rgb(221,26,2)" fg:x="561" fg:w="5897"/><text x="3.0553%" y="174.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (5,897 samples, 29.49%)</title><rect x="2.8053%" y="180" width="29.4879%" height="15" fill="rgb(254,61,31)" fg:x="561" fg:w="5897"/><text x="3.0553%" y="190.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (5,897 samples, 29.49%)</title><rect x="2.8053%" y="196" width="29.4879%" height="15" fill="rgb(222,173,38)" fg:x="561" fg:w="5897"/><text x="3.0553%" y="206.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (5,751 samples, 28.76%)</title><rect x="3.5354%" y="212" width="28.7579%" height="15" fill="rgb(218,50,12)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="222.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (5,751 samples, 28.76%)</title><rect x="3.5354%" y="228" width="28.7579%" height="15" fill="rgb(223,88,40)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="238.50">&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::b..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="244" width="28.7579%" height="15" fill="rgb(237,54,19)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="254.50">&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as cor..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="260" width="28.7579%" height="15" fill="rgb(251,129,25)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="270.50">&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="276" width="28.7579%" height="15" fill="rgb(238,97,19)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="286.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Fu..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="292" width="28.7579%" height="15" fill="rgb(240,169,18)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="302.50">&lt;tower::util::map_response::MapResponseFuture&lt;..</text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="308" width="28.7579%" height="15" fill="rgb(230,187,49)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="318.50">&lt;futures_util::future::try_future::MapOk&lt;Fut,F..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="324" width="28.7579%" height="15" fill="rgb(209,44,26)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="334.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as c..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="340" width="28.7579%" height="15" fill="rgb(244,0,6)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="350.50">&lt;futures_util::future::future::map::Map&lt;Fut,F&gt;..</text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="356" width="28.7579%" height="15" fill="rgb(248,18,21)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="366.50">&lt;futures_util::future::try_future::into_future..</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="372" width="28.7579%" height="15" fill="rgb(245,180,19)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="382.50">&lt;F as futures_core::future::TryFuture&gt;::try_po..</text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="388" width="28.7579%" height="15" fill="rgb(252,118,36)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="398.50">&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; a..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="404" width="28.7579%" height="15" fill="rgb(210,224,19)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="414.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as c..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="420" width="28.7579%" height="15" fill="rgb(218,30,24)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="430.50">&lt;futures_util::future::future::map::Map&lt;Fut,F&gt;..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,751 samples, 28.76%)</title><rect x="3.5354%" y="436" width="28.7579%" height="15" fill="rgb(219,75,50)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="446.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Fu..</text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}} (5,751 samples, 28.76%)</title><rect x="3.5354%" y="452" width="28.7579%" height="15" fill="rgb(234,72,50)" fg:x="707" fg:w="5751"/><text x="3.7854%" y="462.50">&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::cal..</text></g><g><title>rust_axum::read_users::_{{closure}} (5,574 samples, 27.87%)</title><rect x="4.4204%" y="468" width="27.8728%" height="15" fill="rgb(219,100,48)" fg:x="884" fg:w="5574"/><text x="4.6704%" y="478.50">rust_axum::read_users::_{{closure}}</text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_all::_{{closure}} (5,558 samples, 27.79%)</title><rect x="4.5005%" y="484" width="27.7928%" height="15" fill="rgb(253,5,41)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="494.50">sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_all::_{{..</text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (5,558 samples, 27.79%)</title><rect x="4.5005%" y="500" width="27.7928%" height="15" fill="rgb(247,181,11)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="510.50">&lt;futures_util::stream::try_stream::try_collec..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (5,558 samples, 27.79%)</title><rect x="4.5005%" y="516" width="27.7928%" height="15" fill="rgb(222,223,25)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="526.50">&lt;S as futures_core::stream::TryStream&gt;::try_p..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (5,558 samples, 27.79%)</title><rect x="4.5005%" y="532" width="27.7928%" height="15" fill="rgb(214,198,28)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="542.50">&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::S..</text></g><g><title>&lt;futures_util::stream::try_stream::try_filter_map::TryFilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,558 samples, 27.79%)</title><rect x="4.5005%" y="548" width="27.7928%" height="15" fill="rgb(230,46,43)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="558.50">&lt;futures_util::stream::try_stream::try_filter..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (5,558 samples, 27.79%)</title><rect x="4.5005%" y="564" width="27.7928%" height="15" fill="rgb(233,65,53)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="574.50">&lt;S as futures_core::stream::TryStream&gt;::try_p..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (5,558 samples, 27.79%)</title><rect x="4.5005%" y="580" width="27.7928%" height="15" fill="rgb(221,121,27)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="590.50">&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::S..</text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (5,558 samples, 27.79%)</title><rect x="4.5005%" y="596" width="27.7928%" height="15" fill="rgb(247,70,47)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="606.50">&lt;sqlx_core::ext::async_stream::TryAsyncStream..</text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (5,558 samples, 27.79%)</title><rect x="4.5005%" y="612" width="27.7928%" height="15" fill="rgb(228,85,35)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="622.50">&lt;&amp;mut F as core::future::future::Future&gt;::poll</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (5,558 samples, 27.79%)</title><rect x="4.5005%" y="628" width="27.7928%" height="15" fill="rgb(209,50,18)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="638.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::F..</text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (5,558 samples, 27.79%)</title><rect x="4.5005%" y="644" width="27.7928%" height="15" fill="rgb(250,19,35)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="654.50">&lt;futures_util::future::future::fuse::Fuse&lt;Fut..</text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new::_{{closure}} (5,558 samples, 27.79%)</title><rect x="4.5005%" y="660" width="27.7928%" height="15" fill="rgb(253,107,29)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="670.50">sqlx_core::ext::async_stream::TryAsyncStream&lt;..</text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_many::_{{closure}}::_{{closure}} (5,558 samples, 27.79%)</title><rect x="4.5005%" y="676" width="27.7928%" height="15" fill="rgb(252,179,29)" fg:x="900" fg:w="5558"/><text x="4.7505%" y="686.50">sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_many::_{..</text></g><g><title>sqlx_postgres::connection::executor::&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many (61 samples, 0.31%)</title><rect x="31.9882%" y="692" width="0.3050%" height="15" fill="rgb(238,194,6)" fg:x="6397" fg:w="61"/><text x="32.2382%" y="702.50"></text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new (52 samples, 0.26%)</title><rect x="32.0332%" y="708" width="0.2600%" height="15" fill="rgb(238,164,29)" fg:x="6406" fg:w="52"/><text x="32.2832%" y="718.50"></text></g><g><title>_ZN9sqlx_core4pool5inner19PoolInner$LT$DB$GT$7acquire28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hceda7c5de8daa15cE.llvm.10821997395679549078 (4 samples, 0.02%)</title><rect x="32.2932%" y="180" width="0.0200%" height="15" fill="rgb(224,25,9)" fg:x="6458" fg:w="4"/><text x="32.5432%" y="190.50"></text></g><g><title>_ZN9sqlx_core4pool5inner19PoolInner$LT$DB$GT$7acquire28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hceda7c5de8daa15cE.llvm.10821997395679549078 (2 samples, 0.01%)</title><rect x="32.3482%" y="196" width="0.0100%" height="15" fill="rgb(244,153,23)" fg:x="6469" fg:w="2"/><text x="32.5982%" y="206.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.04%)</title><rect x="32.3582%" y="196" width="0.0350%" height="15" fill="rgb(212,203,14)" fg:x="6471" fg:w="7"/><text x="32.6082%" y="206.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="32.3932%" y="196" width="0.0100%" height="15" fill="rgb(220,164,20)" fg:x="6478" fg:w="2"/><text x="32.6432%" y="206.50"></text></g><g><title>_ZN9sqlx_core4pool5inner19PoolInner$LT$DB$GT$7acquire28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17hceda7c5de8daa15cE.llvm.10821997395679549078 (2 samples, 0.01%)</title><rect x="32.4232%" y="212" width="0.0100%" height="15" fill="rgb(222,203,48)" fg:x="6484" fg:w="2"/><text x="32.6732%" y="222.50"></text></g><g><title>event_listener::Inner::lock (2 samples, 0.01%)</title><rect x="32.4532%" y="276" width="0.0100%" height="15" fill="rgb(215,159,22)" fg:x="6490" fg:w="2"/><text x="32.7032%" y="286.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (2 samples, 0.01%)</title><rect x="32.4532%" y="292" width="0.0100%" height="15" fill="rgb(216,183,47)" fg:x="6490" fg:w="2"/><text x="32.7032%" y="302.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.01%)</title><rect x="32.4532%" y="308" width="0.0100%" height="15" fill="rgb(229,195,25)" fg:x="6490" fg:w="2"/><text x="32.7032%" y="318.50"></text></g><g><title>&lt;event_listener::EventListener as core::ops::drop::Drop&gt;::drop (15 samples, 0.08%)</title><rect x="32.4382%" y="260" width="0.0750%" height="15" fill="rgb(224,132,51)" fg:x="6487" fg:w="15"/><text x="32.6882%" y="270.50"></text></g><g><title>event_listener::List::remove (10 samples, 0.05%)</title><rect x="32.4632%" y="276" width="0.0500%" height="15" fill="rgb(240,63,7)" fg:x="6492" fg:w="10"/><text x="32.7132%" y="286.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.03%)</title><rect x="32.4882%" y="292" width="0.0250%" height="15" fill="rgb(249,182,41)" fg:x="6497" fg:w="5"/><text x="32.7382%" y="302.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.03%)</title><rect x="32.4882%" y="308" width="0.0250%" height="15" fill="rgb(243,47,26)" fg:x="6497" fg:w="5"/><text x="32.7382%" y="318.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.03%)</title><rect x="32.4882%" y="324" width="0.0250%" height="15" fill="rgb(233,48,2)" fg:x="6497" fg:w="5"/><text x="32.7382%" y="334.50"></text></g><g><title>__GI___libc_free (5 samples, 0.03%)</title><rect x="32.4882%" y="340" width="0.0250%" height="15" fill="rgb(244,165,34)" fg:x="6497" fg:w="5"/><text x="32.7382%" y="350.50"></text></g><g><title>_int_free (3 samples, 0.02%)</title><rect x="32.4982%" y="356" width="0.0150%" height="15" fill="rgb(207,89,7)" fg:x="6499" fg:w="3"/><text x="32.7482%" y="366.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::CloseEvent&gt; (16 samples, 0.08%)</title><rect x="32.4382%" y="212" width="0.0800%" height="15" fill="rgb(244,117,36)" fg:x="6487" fg:w="16"/><text x="32.6882%" y="222.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;event_listener::EventListener&gt;&gt; (16 samples, 0.08%)</title><rect x="32.4382%" y="228" width="0.0800%" height="15" fill="rgb(226,144,34)" fg:x="6487" fg:w="16"/><text x="32.6882%" y="238.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::EventListener&gt; (16 samples, 0.08%)</title><rect x="32.4382%" y="244" width="0.0800%" height="15" fill="rgb(213,23,19)" fg:x="6487" fg:w="16"/><text x="32.6882%" y="254.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (3 samples, 0.02%)</title><rect x="32.6533%" y="340" width="0.0150%" height="15" fill="rgb(217,75,12)" fg:x="6530" fg:w="3"/><text x="32.9033%" y="350.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (3 samples, 0.02%)</title><rect x="32.6533%" y="356" width="0.0150%" height="15" fill="rgb(224,159,17)" fg:x="6530" fg:w="3"/><text x="32.9033%" y="366.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (3 samples, 0.02%)</title><rect x="32.6533%" y="372" width="0.0150%" height="15" fill="rgb(217,118,1)" fg:x="6530" fg:w="3"/><text x="32.9033%" y="382.50"></text></g><g><title>core::sync::atomic::AtomicU8::compare_exchange_weak (3 samples, 0.02%)</title><rect x="32.6533%" y="388" width="0.0150%" height="15" fill="rgb(232,180,48)" fg:x="6530" fg:w="3"/><text x="32.9033%" y="398.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.02%)</title><rect x="32.6533%" y="404" width="0.0150%" height="15" fill="rgb(230,27,33)" fg:x="6530" fg:w="3"/><text x="32.9033%" y="414.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (4 samples, 0.02%)</title><rect x="32.6733%" y="340" width="0.0200%" height="15" fill="rgb(205,31,21)" fg:x="6534" fg:w="4"/><text x="32.9233%" y="350.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (2 samples, 0.01%)</title><rect x="32.6933%" y="340" width="0.0100%" height="15" fill="rgb(253,59,4)" fg:x="6538" fg:w="2"/><text x="32.9433%" y="350.50"></text></g><g><title>&lt;tokio::sync::batch_semaphore::Acquire as core::future::future::Future&gt;::poll (24 samples, 0.12%)</title><rect x="32.5983%" y="308" width="0.1200%" height="15" fill="rgb(224,201,9)" fg:x="6519" fg:w="24"/><text x="32.8483%" y="318.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::poll_acquire (19 samples, 0.10%)</title><rect x="32.6233%" y="324" width="0.0950%" height="15" fill="rgb(229,206,30)" fg:x="6524" fg:w="19"/><text x="32.8733%" y="334.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (3 samples, 0.02%)</title><rect x="32.7033%" y="340" width="0.0150%" height="15" fill="rgb(212,67,47)" fg:x="6540" fg:w="3"/><text x="32.9533%" y="350.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::sync::batch_semaphore::Acquire&gt; (2 samples, 0.01%)</title><rect x="32.7183%" y="308" width="0.0100%" height="15" fill="rgb(211,96,50)" fg:x="6543" fg:w="2"/><text x="32.9683%" y="318.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (39 samples, 0.20%)</title><rect x="32.5383%" y="260" width="0.1950%" height="15" fill="rgb(252,114,18)" fg:x="6507" fg:w="39"/><text x="32.7883%" y="270.50"></text></g><g><title>sqlx_core::sync::AsyncSemaphore::acquire::_{{closure}} (34 samples, 0.17%)</title><rect x="32.5633%" y="276" width="0.1700%" height="15" fill="rgb(223,58,37)" fg:x="6512" fg:w="34"/><text x="32.8133%" y="286.50"></text></g><g><title>tokio::sync::semaphore::Semaphore::acquire_many::_{{closure}} (31 samples, 0.16%)</title><rect x="32.5783%" y="292" width="0.1550%" height="15" fill="rgb(237,70,4)" fg:x="6515" fg:w="31"/><text x="32.8283%" y="302.50"></text></g><g><title>core::ptr::drop_in_place&lt;event_listener::ListGuard&gt; (2 samples, 0.01%)</title><rect x="32.7383%" y="324" width="0.0100%" height="15" fill="rgb(244,85,46)" fg:x="6547" fg:w="2"/><text x="32.9883%" y="334.50"></text></g><g><title>&lt;futures_util::future::poll_fn::PollFn&lt;F&gt; as core::future::future::Future&gt;::poll (50 samples, 0.25%)</title><rect x="32.5283%" y="228" width="0.2500%" height="15" fill="rgb(223,39,52)" fg:x="6505" fg:w="50"/><text x="32.7783%" y="238.50"></text></g><g><title>sqlx_core::pool::CloseEvent::do_until::_{{closure}}::_{{closure}} (50 samples, 0.25%)</title><rect x="32.5283%" y="244" width="0.2500%" height="15" fill="rgb(218,200,14)" fg:x="6505" fg:w="50"/><text x="32.7783%" y="254.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (9 samples, 0.05%)</title><rect x="32.7333%" y="260" width="0.0450%" height="15" fill="rgb(208,171,16)" fg:x="6546" fg:w="9"/><text x="32.9833%" y="270.50"></text></g><g><title>&lt;sqlx_core::pool::CloseEvent as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="32.7333%" y="276" width="0.0450%" height="15" fill="rgb(234,200,18)" fg:x="6546" fg:w="9"/><text x="32.9833%" y="286.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (8 samples, 0.04%)</title><rect x="32.7383%" y="292" width="0.0400%" height="15" fill="rgb(228,45,11)" fg:x="6547" fg:w="8"/><text x="32.9883%" y="302.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (8 samples, 0.04%)</title><rect x="32.7383%" y="308" width="0.0400%" height="15" fill="rgb(237,182,11)" fg:x="6547" fg:w="8"/><text x="32.9883%" y="318.50"></text></g><g><title>event_listener::Inner::lock (5 samples, 0.03%)</title><rect x="32.7533%" y="324" width="0.0250%" height="15" fill="rgb(241,175,49)" fg:x="6550" fg:w="5"/><text x="33.0033%" y="334.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (5 samples, 0.03%)</title><rect x="32.7533%" y="340" width="0.0250%" height="15" fill="rgb(247,38,35)" fg:x="6550" fg:w="5"/><text x="33.0033%" y="350.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (5 samples, 0.03%)</title><rect x="32.7533%" y="356" width="0.0250%" height="15" fill="rgb(228,39,49)" fg:x="6550" fg:w="5"/><text x="33.0033%" y="366.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="32.8083%" y="308" width="0.0200%" height="15" fill="rgb(226,101,26)" fg:x="6561" fg:w="4"/><text x="33.0583%" y="318.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (2 samples, 0.01%)</title><rect x="32.8183%" y="324" width="0.0100%" height="15" fill="rgb(206,141,19)" fg:x="6563" fg:w="2"/><text x="33.0683%" y="334.50"></text></g><g><title>&lt;futures_util::future::poll_immediate::PollImmediate&lt;F&gt; as core::future::future::Future&gt;::poll (12 samples, 0.06%)</title><rect x="32.7783%" y="228" width="0.0600%" height="15" fill="rgb(211,200,13)" fg:x="6555" fg:w="12"/><text x="33.0283%" y="238.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (12 samples, 0.06%)</title><rect x="32.7783%" y="244" width="0.0600%" height="15" fill="rgb(241,121,6)" fg:x="6555" fg:w="12"/><text x="33.0283%" y="254.50"></text></g><g><title>&lt;sqlx_core::pool::CloseEvent as core::future::future::Future&gt;::poll (12 samples, 0.06%)</title><rect x="32.7783%" y="260" width="0.0600%" height="15" fill="rgb(234,221,29)" fg:x="6555" fg:w="12"/><text x="33.0283%" y="270.50"></text></g><g><title>futures_util::future::future::FutureExt::poll_unpin (10 samples, 0.05%)</title><rect x="32.7883%" y="276" width="0.0500%" height="15" fill="rgb(229,136,5)" fg:x="6557" fg:w="10"/><text x="33.0383%" y="286.50"></text></g><g><title>&lt;event_listener::EventListener as core::future::future::Future&gt;::poll (10 samples, 0.05%)</title><rect x="32.7883%" y="292" width="0.0500%" height="15" fill="rgb(238,36,11)" fg:x="6557" fg:w="10"/><text x="33.0383%" y="302.50"></text></g><g><title>sqlx_core::pool::CloseEvent::do_until::_{{closure}} (64 samples, 0.32%)</title><rect x="32.5233%" y="212" width="0.3200%" height="15" fill="rgb(251,55,41)" fg:x="6504" fg:w="64"/><text x="32.7733%" y="222.50"></text></g><g><title>event_listener::Event::inner (3 samples, 0.02%)</title><rect x="32.8583%" y="276" width="0.0150%" height="15" fill="rgb(242,34,40)" fg:x="6571" fg:w="3"/><text x="33.1083%" y="286.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.01%)</title><rect x="32.8633%" y="292" width="0.0100%" height="15" fill="rgb(215,42,17)" fg:x="6572" fg:w="2"/><text x="33.1133%" y="302.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="32.8633%" y="308" width="0.0100%" height="15" fill="rgb(207,44,46)" fg:x="6572" fg:w="2"/><text x="33.1133%" y="318.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="32.8783%" y="308" width="0.0150%" height="15" fill="rgb(211,206,28)" fg:x="6575" fg:w="3"/><text x="33.1283%" y="318.50"></text></g><g><title>std::sync::poison::Flag::guard (3 samples, 0.02%)</title><rect x="32.8783%" y="324" width="0.0150%" height="15" fill="rgb(237,167,16)" fg:x="6575" fg:w="3"/><text x="33.1283%" y="334.50"></text></g><g><title>event_listener::Inner::lock (5 samples, 0.03%)</title><rect x="32.8733%" y="276" width="0.0250%" height="15" fill="rgb(233,66,6)" fg:x="6574" fg:w="5"/><text x="33.1233%" y="286.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (4 samples, 0.02%)</title><rect x="32.8783%" y="292" width="0.0200%" height="15" fill="rgb(246,123,29)" fg:x="6575" fg:w="4"/><text x="33.1283%" y="302.50"></text></g><g><title>event_listener::List::insert (7 samples, 0.04%)</title><rect x="32.8983%" y="276" width="0.0350%" height="15" fill="rgb(209,62,40)" fg:x="6579" fg:w="7"/><text x="33.1483%" y="286.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="32.8983%" y="292" width="0.0350%" height="15" fill="rgb(218,4,25)" fg:x="6579" fg:w="7"/><text x="33.1483%" y="302.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.03%)</title><rect x="32.9033%" y="308" width="0.0300%" height="15" fill="rgb(253,91,49)" fg:x="6580" fg:w="6"/><text x="33.1533%" y="318.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="32.9033%" y="324" width="0.0300%" height="15" fill="rgb(228,155,29)" fg:x="6580" fg:w="6"/><text x="33.1533%" y="334.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="32.9033%" y="340" width="0.0300%" height="15" fill="rgb(243,57,37)" fg:x="6580" fg:w="6"/><text x="33.1533%" y="350.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="32.9033%" y="356" width="0.0300%" height="15" fill="rgb(244,167,17)" fg:x="6580" fg:w="6"/><text x="33.1533%" y="366.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.03%)</title><rect x="32.9083%" y="372" width="0.0250%" height="15" fill="rgb(207,181,38)" fg:x="6581" fg:w="5"/><text x="33.1583%" y="382.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="32.9183%" y="388" width="0.0150%" height="15" fill="rgb(211,8,23)" fg:x="6583" fg:w="3"/><text x="33.1683%" y="398.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::acquire_permit::_{{closure}} (105 samples, 0.53%)</title><rect x="32.4132%" y="196" width="0.5251%" height="15" fill="rgb(235,11,44)" fg:x="6482" fg:w="105"/><text x="32.6632%" y="206.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::close_event (19 samples, 0.10%)</title><rect x="32.8433%" y="212" width="0.0950%" height="15" fill="rgb(248,18,52)" fg:x="6568" fg:w="19"/><text x="33.0933%" y="222.50"></text></g><g><title>core::bool::&lt;impl bool&gt;::then (19 samples, 0.10%)</title><rect x="32.8433%" y="228" width="0.0950%" height="15" fill="rgb(208,4,7)" fg:x="6568" fg:w="19"/><text x="33.0933%" y="238.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::close_event::_{{closure}} (19 samples, 0.10%)</title><rect x="32.8433%" y="244" width="0.0950%" height="15" fill="rgb(240,17,39)" fg:x="6568" fg:w="19"/><text x="33.0933%" y="254.50"></text></g><g><title>event_listener::Event::listen (19 samples, 0.10%)</title><rect x="32.8433%" y="260" width="0.0950%" height="15" fill="rgb(207,170,3)" fg:x="6568" fg:w="19"/><text x="33.0933%" y="270.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core::_{{closure}} (2 samples, 0.01%)</title><rect x="32.9433%" y="436" width="0.0100%" height="15" fill="rgb(236,100,52)" fg:x="6588" fg:w="2"/><text x="33.1933%" y="446.50"></text></g><g><title>sha2::sha256::x86::digest_blocks (2 samples, 0.01%)</title><rect x="32.9433%" y="452" width="0.0100%" height="15" fill="rgb(246,78,51)" fg:x="6588" fg:w="2"/><text x="33.1933%" y="462.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::digest_pad (3 samples, 0.02%)</title><rect x="32.9433%" y="420" width="0.0150%" height="15" fill="rgb(211,17,15)" fg:x="6588" fg:w="3"/><text x="33.1933%" y="430.50"></text></g><g><title>&lt;T as digest::mac::Mac&gt;::finalize (6 samples, 0.03%)</title><rect x="32.9383%" y="308" width="0.0300%" height="15" fill="rgb(209,59,46)" fg:x="6587" fg:w="6"/><text x="33.1883%" y="318.50"></text></g><g><title>digest::FixedOutput::finalize_fixed (6 samples, 0.03%)</title><rect x="32.9383%" y="324" width="0.0300%" height="15" fill="rgb(210,92,25)" fg:x="6587" fg:w="6"/><text x="33.1883%" y="334.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as digest::FixedOutput&gt;::finalize_into (5 samples, 0.03%)</title><rect x="32.9433%" y="340" width="0.0250%" height="15" fill="rgb(238,174,52)" fg:x="6588" fg:w="5"/><text x="33.1933%" y="350.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (5 samples, 0.03%)</title><rect x="32.9433%" y="356" width="0.0250%" height="15" fill="rgb(230,73,7)" fg:x="6588" fg:w="5"/><text x="33.1933%" y="366.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::FixedOutputCore&gt;::finalize_fixed_core (5 samples, 0.03%)</title><rect x="32.9433%" y="372" width="0.0250%" height="15" fill="rgb(243,124,40)" fg:x="6588" fg:w="5"/><text x="33.1933%" y="382.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::VariableOutputCore&gt;::finalize_variable_core (5 samples, 0.03%)</title><rect x="32.9433%" y="388" width="0.0250%" height="15" fill="rgb(244,170,11)" fg:x="6588" fg:w="5"/><text x="33.1933%" y="398.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize,block_buffer::Eager&gt;::len64_padding_be (5 samples, 0.03%)</title><rect x="32.9433%" y="404" width="0.0250%" height="15" fill="rgb(207,114,54)" fg:x="6588" fg:w="5"/><text x="33.1933%" y="414.50"></text></g><g><title>sqlx_postgres::connection::sasl::hi (2 samples, 0.01%)</title><rect x="32.9583%" y="420" width="0.0100%" height="15" fill="rgb(205,42,20)" fg:x="6591" fg:w="2"/><text x="33.2083%" y="430.50"></text></g><g><title>&lt;T as digest::mac::Mac&gt;::new_from_slice (2 samples, 0.01%)</title><rect x="32.9683%" y="308" width="0.0100%" height="15" fill="rgb(230,30,28)" fg:x="6593" fg:w="2"/><text x="33.2183%" y="318.50"></text></g><g><title>&lt;digest::core_api::wrapper::CoreWrapper&lt;T&gt; as crypto_common::KeyInit&gt;::new_from_slice (2 samples, 0.01%)</title><rect x="32.9683%" y="324" width="0.0100%" height="15" fill="rgb(205,73,54)" fg:x="6593" fg:w="2"/><text x="33.2183%" y="334.50"></text></g><g><title>&lt;hmac::optim::HmacCore&lt;D&gt; as crypto_common::KeyInit&gt;::new_from_slice (2 samples, 0.01%)</title><rect x="32.9683%" y="340" width="0.0100%" height="15" fill="rgb(254,227,23)" fg:x="6593" fg:w="2"/><text x="33.2183%" y="350.50"></text></g><g><title>&lt;digest::core_api::ct_variable::CtVariableCoreWrapper&lt;T,OutSize,O&gt; as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 0.01%)</title><rect x="32.9683%" y="356" width="0.0100%" height="15" fill="rgb(228,202,34)" fg:x="6593" fg:w="2"/><text x="33.2183%" y="366.50"></text></g><g><title>&lt;sha2::core_api::Sha256VarCore as digest::core_api::UpdateCore&gt;::update_blocks (2 samples, 0.01%)</title><rect x="32.9683%" y="372" width="0.0100%" height="15" fill="rgb(222,225,37)" fg:x="6593" fg:w="2"/><text x="33.2183%" y="382.50"></text></g><g><title>sha2::sha256::x86::digest_blocks (2 samples, 0.01%)</title><rect x="32.9683%" y="388" width="0.0100%" height="15" fill="rgb(221,14,54)" fg:x="6593" fg:w="2"/><text x="33.2183%" y="398.50"></text></g><g><title>sqlx_postgres::connection::sasl::hi (9 samples, 0.05%)</title><rect x="32.9383%" y="292" width="0.0450%" height="15" fill="rgb(254,102,2)" fg:x="6587" fg:w="9"/><text x="33.1883%" y="302.50"></text></g><g><title>sqlx_postgres::connection::sasl::authenticate::_{{closure}} (10 samples, 0.05%)</title><rect x="32.9383%" y="276" width="0.0500%" height="15" fill="rgb(232,104,17)" fg:x="6587" fg:w="10"/><text x="33.1883%" y="286.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::connect::_{{closure}} (11 samples, 0.06%)</title><rect x="32.9383%" y="196" width="0.0550%" height="15" fill="rgb(250,220,14)" fg:x="6587" fg:w="11"/><text x="33.1883%" y="206.50"></text></g><g><title>sqlx_core::rt::timeout::_{{closure}} (11 samples, 0.06%)</title><rect x="32.9383%" y="212" width="0.0550%" height="15" fill="rgb(241,158,9)" fg:x="6587" fg:w="11"/><text x="33.1883%" y="222.50"></text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (11 samples, 0.06%)</title><rect x="32.9383%" y="228" width="0.0550%" height="15" fill="rgb(246,9,43)" fg:x="6587" fg:w="11"/><text x="33.1883%" y="238.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11 samples, 0.06%)</title><rect x="32.9383%" y="244" width="0.0550%" height="15" fill="rgb(206,73,33)" fg:x="6587" fg:w="11"/><text x="33.1883%" y="254.50"></text></g><g><title>sqlx_postgres::connection::establish::_&lt;impl sqlx_postgres::connection::PgConnection&gt;::establish::_{{closure}} (11 samples, 0.06%)</title><rect x="32.9383%" y="260" width="0.0550%" height="15" fill="rgb(222,79,8)" fg:x="6587" fg:w="11"/><text x="33.1883%" y="270.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="33.0283%" y="228" width="0.0100%" height="15" fill="rgb(234,8,54)" fg:x="6605" fg:w="2"/><text x="33.2783%" y="238.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::pop (9 samples, 0.05%)</title><rect x="33.0033%" y="212" width="0.0450%" height="15" fill="rgb(209,134,38)" fg:x="6600" fg:w="9"/><text x="33.2533%" y="222.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="33.0483%" y="228" width="0.0100%" height="15" fill="rgb(230,127,29)" fg:x="6609" fg:w="2"/><text x="33.2983%" y="238.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::pop_idle (14 samples, 0.07%)</title><rect x="32.9933%" y="196" width="0.0700%" height="15" fill="rgb(242,44,41)" fg:x="6598" fg:w="14"/><text x="33.2433%" y="206.50"></text></g><g><title>sqlx_core::pool::connection::Floating&lt;DB,sqlx_core::pool::connection::Idle&lt;DB&gt;&gt;::from_idle (3 samples, 0.02%)</title><rect x="33.0483%" y="212" width="0.0150%" height="15" fill="rgb(222,56,43)" fg:x="6609" fg:w="3"/><text x="33.2983%" y="222.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="33.0633%" y="212" width="0.0100%" height="15" fill="rgb(238,39,47)" fg:x="6612" fg:w="2"/><text x="33.3133%" y="222.50"></text></g><g><title>[unknown] (60 samples, 0.30%)</title><rect x="33.1933%" y="516" width="0.3000%" height="15" fill="rgb(226,79,43)" fg:x="6638" fg:w="60"/><text x="33.4433%" y="526.50"></text></g><g><title>[unknown] (55 samples, 0.28%)</title><rect x="33.2183%" y="532" width="0.2750%" height="15" fill="rgb(242,105,53)" fg:x="6643" fg:w="55"/><text x="33.4683%" y="542.50"></text></g><g><title>[unknown] (53 samples, 0.27%)</title><rect x="33.2283%" y="548" width="0.2650%" height="15" fill="rgb(251,132,46)" fg:x="6645" fg:w="53"/><text x="33.4783%" y="558.50"></text></g><g><title>[unknown] (52 samples, 0.26%)</title><rect x="33.2333%" y="564" width="0.2600%" height="15" fill="rgb(231,77,14)" fg:x="6646" fg:w="52"/><text x="33.4833%" y="574.50"></text></g><g><title>[unknown] (49 samples, 0.25%)</title><rect x="33.2483%" y="580" width="0.2450%" height="15" fill="rgb(240,135,9)" fg:x="6649" fg:w="49"/><text x="33.4983%" y="590.50"></text></g><g><title>[unknown] (48 samples, 0.24%)</title><rect x="33.2533%" y="596" width="0.2400%" height="15" fill="rgb(248,109,14)" fg:x="6650" fg:w="48"/><text x="33.5033%" y="606.50"></text></g><g><title>[unknown] (44 samples, 0.22%)</title><rect x="33.2733%" y="612" width="0.2200%" height="15" fill="rgb(227,146,52)" fg:x="6654" fg:w="44"/><text x="33.5233%" y="622.50"></text></g><g><title>[unknown] (43 samples, 0.22%)</title><rect x="33.2783%" y="628" width="0.2150%" height="15" fill="rgb(232,54,3)" fg:x="6655" fg:w="43"/><text x="33.5283%" y="638.50"></text></g><g><title>[unknown] (35 samples, 0.18%)</title><rect x="33.3183%" y="644" width="0.1750%" height="15" fill="rgb(229,201,43)" fg:x="6663" fg:w="35"/><text x="33.5683%" y="654.50"></text></g><g><title>[unknown] (28 samples, 0.14%)</title><rect x="33.3533%" y="660" width="0.1400%" height="15" fill="rgb(252,161,33)" fg:x="6670" fg:w="28"/><text x="33.6033%" y="670.50"></text></g><g><title>[unknown] (20 samples, 0.10%)</title><rect x="33.3933%" y="676" width="0.1000%" height="15" fill="rgb(226,146,40)" fg:x="6678" fg:w="20"/><text x="33.6433%" y="686.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="33.4633%" y="692" width="0.0300%" height="15" fill="rgb(219,47,25)" fg:x="6692" fg:w="6"/><text x="33.7133%" y="702.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="33.4833%" y="708" width="0.0100%" height="15" fill="rgb(250,135,13)" fg:x="6696" fg:w="2"/><text x="33.7333%" y="718.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (62 samples, 0.31%)</title><rect x="33.1883%" y="388" width="0.3100%" height="15" fill="rgb(219,229,18)" fg:x="6637" fg:w="62"/><text x="33.4383%" y="398.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (61 samples, 0.31%)</title><rect x="33.1933%" y="404" width="0.3050%" height="15" fill="rgb(217,152,27)" fg:x="6638" fg:w="61"/><text x="33.4433%" y="414.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (61 samples, 0.31%)</title><rect x="33.1933%" y="420" width="0.3050%" height="15" fill="rgb(225,71,47)" fg:x="6638" fg:w="61"/><text x="33.4433%" y="430.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (61 samples, 0.31%)</title><rect x="33.1933%" y="436" width="0.3050%" height="15" fill="rgb(220,139,14)" fg:x="6638" fg:w="61"/><text x="33.4433%" y="446.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (61 samples, 0.31%)</title><rect x="33.1933%" y="452" width="0.3050%" height="15" fill="rgb(247,54,32)" fg:x="6638" fg:w="61"/><text x="33.4433%" y="462.50"></text></g><g><title>std::sys_common::net::TcpStream::write (61 samples, 0.31%)</title><rect x="33.1933%" y="468" width="0.3050%" height="15" fill="rgb(252,131,39)" fg:x="6638" fg:w="61"/><text x="33.4433%" y="478.50"></text></g><g><title>__libc_send (61 samples, 0.31%)</title><rect x="33.1933%" y="484" width="0.3050%" height="15" fill="rgb(210,108,39)" fg:x="6638" fg:w="61"/><text x="33.4433%" y="494.50"></text></g><g><title>__libc_send (61 samples, 0.31%)</title><rect x="33.1933%" y="500" width="0.3050%" height="15" fill="rgb(205,23,29)" fg:x="6638" fg:w="61"/><text x="33.4433%" y="510.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_write::_{{closure}} (64 samples, 0.32%)</title><rect x="33.1883%" y="372" width="0.3200%" height="15" fill="rgb(246,139,46)" fg:x="6637" fg:w="64"/><text x="33.4383%" y="382.50"></text></g><g><title>&lt;tokio::io::poll_evented::PollEvented&lt;E&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="33.4983%" y="388" width="0.0100%" height="15" fill="rgb(250,81,26)" fg:x="6699" fg:w="2"/><text x="33.7483%" y="398.50"></text></g><g><title>&lt;sqlx_core::net::socket::Write&lt;S&gt; as core::future::future::Future&gt;::poll (67 samples, 0.34%)</title><rect x="33.1783%" y="292" width="0.3350%" height="15" fill="rgb(214,104,7)" fg:x="6635" fg:w="67"/><text x="33.4283%" y="302.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::try_write (67 samples, 0.34%)</title><rect x="33.1783%" y="308" width="0.3350%" height="15" fill="rgb(233,189,8)" fg:x="6635" fg:w="67"/><text x="33.4283%" y="318.50"></text></g><g><title>sqlx_core::rt::rt_tokio::socket::&lt;impl sqlx_core::net::socket::Socket for tokio::net::tcp::stream::TcpStream&gt;::try_write (67 samples, 0.34%)</title><rect x="33.1783%" y="324" width="0.3350%" height="15" fill="rgb(228,141,17)" fg:x="6635" fg:w="67"/><text x="33.4283%" y="334.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_write (67 samples, 0.34%)</title><rect x="33.1783%" y="340" width="0.3350%" height="15" fill="rgb(247,157,1)" fg:x="6635" fg:w="67"/><text x="33.4283%" y="350.50"></text></g><g><title>tokio::runtime::io::registration::Registration::try_io (66 samples, 0.33%)</title><rect x="33.1833%" y="356" width="0.3300%" height="15" fill="rgb(249,225,5)" fg:x="6636" fg:w="66"/><text x="33.4333%" y="366.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::flush::_{{closure}} (74 samples, 0.37%)</title><rect x="33.1633%" y="276" width="0.3700%" height="15" fill="rgb(242,55,13)" fg:x="6632" fg:w="74"/><text x="33.4133%" y="286.50"></text></g><g><title>sqlx_core::net::socket::buffered::WriteBuffer::is_empty (3 samples, 0.02%)</title><rect x="33.5184%" y="292" width="0.0150%" height="15" fill="rgb(230,49,50)" fg:x="6703" fg:w="3"/><text x="33.7684%" y="302.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::poll_read_ready (4 samples, 0.02%)</title><rect x="33.5734%" y="388" width="0.0200%" height="15" fill="rgb(241,111,38)" fg:x="6714" fg:w="4"/><text x="33.8234%" y="398.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_ready (3 samples, 0.02%)</title><rect x="33.5784%" y="404" width="0.0150%" height="15" fill="rgb(252,155,4)" fg:x="6715" fg:w="3"/><text x="33.8284%" y="414.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (2 samples, 0.01%)</title><rect x="33.5834%" y="420" width="0.0100%" height="15" fill="rgb(212,69,32)" fg:x="6716" fg:w="2"/><text x="33.8334%" y="430.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="33.5834%" y="436" width="0.0100%" height="15" fill="rgb(243,107,47)" fg:x="6716" fg:w="2"/><text x="33.8334%" y="446.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.01%)</title><rect x="33.5834%" y="452" width="0.0100%" height="15" fill="rgb(247,130,12)" fg:x="6716" fg:w="2"/><text x="33.8334%" y="462.50"></text></g><g><title>std::io::error::Error::kind (2 samples, 0.01%)</title><rect x="33.6034%" y="452" width="0.0100%" height="15" fill="rgb(233,74,16)" fg:x="6720" fg:w="2"/><text x="33.8534%" y="462.50"></text></g><g><title>std::sys::unix::decode_error_kind (2 samples, 0.01%)</title><rect x="33.6034%" y="468" width="0.0100%" height="15" fill="rgb(208,58,18)" fg:x="6720" fg:w="2"/><text x="33.8534%" y="478.50"></text></g><g><title>__libc_recv (77 samples, 0.39%)</title><rect x="33.6184%" y="596" width="0.3850%" height="15" fill="rgb(242,225,1)" fg:x="6723" fg:w="77"/><text x="33.8684%" y="606.50"></text></g><g><title>__libc_recv (74 samples, 0.37%)</title><rect x="33.6334%" y="612" width="0.3700%" height="15" fill="rgb(249,39,40)" fg:x="6726" fg:w="74"/><text x="33.8834%" y="622.50"></text></g><g><title>[unknown] (74 samples, 0.37%)</title><rect x="33.6334%" y="628" width="0.3700%" height="15" fill="rgb(207,72,44)" fg:x="6726" fg:w="74"/><text x="33.8834%" y="638.50"></text></g><g><title>[unknown] (74 samples, 0.37%)</title><rect x="33.6334%" y="644" width="0.3700%" height="15" fill="rgb(215,193,12)" fg:x="6726" fg:w="74"/><text x="33.8834%" y="654.50"></text></g><g><title>[unknown] (72 samples, 0.36%)</title><rect x="33.6434%" y="660" width="0.3600%" height="15" fill="rgb(248,41,39)" fg:x="6728" fg:w="72"/><text x="33.8934%" y="670.50"></text></g><g><title>[unknown] (69 samples, 0.35%)</title><rect x="33.6584%" y="676" width="0.3450%" height="15" fill="rgb(253,85,4)" fg:x="6731" fg:w="69"/><text x="33.9084%" y="686.50"></text></g><g><title>[unknown] (66 samples, 0.33%)</title><rect x="33.6734%" y="692" width="0.3300%" height="15" fill="rgb(243,70,31)" fg:x="6734" fg:w="66"/><text x="33.9234%" y="702.50"></text></g><g><title>[unknown] (64 samples, 0.32%)</title><rect x="33.6834%" y="708" width="0.3200%" height="15" fill="rgb(253,195,26)" fg:x="6736" fg:w="64"/><text x="33.9334%" y="718.50"></text></g><g><title>[unknown] (60 samples, 0.30%)</title><rect x="33.7034%" y="724" width="0.3000%" height="15" fill="rgb(243,42,11)" fg:x="6740" fg:w="60"/><text x="33.9534%" y="734.50"></text></g><g><title>[unknown] (53 samples, 0.27%)</title><rect x="33.7384%" y="740" width="0.2650%" height="15" fill="rgb(239,66,17)" fg:x="6747" fg:w="53"/><text x="33.9884%" y="750.50"></text></g><g><title>[unknown] (34 samples, 0.17%)</title><rect x="33.8334%" y="756" width="0.1700%" height="15" fill="rgb(217,132,21)" fg:x="6766" fg:w="34"/><text x="34.0834%" y="766.50"></text></g><g><title>[unknown] (31 samples, 0.16%)</title><rect x="33.8484%" y="772" width="0.1550%" height="15" fill="rgb(252,202,21)" fg:x="6769" fg:w="31"/><text x="34.0984%" y="782.50"></text></g><g><title>[unknown] (18 samples, 0.09%)</title><rect x="33.9134%" y="788" width="0.0900%" height="15" fill="rgb(233,98,36)" fg:x="6782" fg:w="18"/><text x="34.1634%" y="798.50"></text></g><g><title>[unknown] (17 samples, 0.09%)</title><rect x="33.9184%" y="804" width="0.0850%" height="15" fill="rgb(216,153,54)" fg:x="6783" fg:w="17"/><text x="34.1684%" y="814.50"></text></g><g><title>[unknown] (17 samples, 0.09%)</title><rect x="33.9184%" y="820" width="0.0850%" height="15" fill="rgb(250,99,7)" fg:x="6783" fg:w="17"/><text x="34.1684%" y="830.50"></text></g><g><title>[unknown] (11 samples, 0.06%)</title><rect x="33.9484%" y="836" width="0.0550%" height="15" fill="rgb(207,56,50)" fg:x="6789" fg:w="11"/><text x="34.1984%" y="846.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="33.9834%" y="852" width="0.0200%" height="15" fill="rgb(244,61,34)" fg:x="6796" fg:w="4"/><text x="34.2334%" y="862.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (78 samples, 0.39%)</title><rect x="33.6184%" y="468" width="0.3900%" height="15" fill="rgb(241,50,38)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="478.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (78 samples, 0.39%)</title><rect x="33.6184%" y="484" width="0.3900%" height="15" fill="rgb(212,166,30)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="494.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (78 samples, 0.39%)</title><rect x="33.6184%" y="500" width="0.3900%" height="15" fill="rgb(249,127,32)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="510.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (78 samples, 0.39%)</title><rect x="33.6184%" y="516" width="0.3900%" height="15" fill="rgb(209,103,0)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="526.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (78 samples, 0.39%)</title><rect x="33.6184%" y="532" width="0.3900%" height="15" fill="rgb(238,209,51)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="542.50"></text></g><g><title>std::sys_common::net::TcpStream::read (78 samples, 0.39%)</title><rect x="33.6184%" y="548" width="0.3900%" height="15" fill="rgb(237,56,23)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="558.50"></text></g><g><title>std::sys::unix::net::Socket::read (78 samples, 0.39%)</title><rect x="33.6184%" y="564" width="0.3900%" height="15" fill="rgb(215,153,46)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="574.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (78 samples, 0.39%)</title><rect x="33.6184%" y="580" width="0.3900%" height="15" fill="rgb(224,49,31)" fg:x="6723" fg:w="78"/><text x="33.8684%" y="590.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_read_buf::_{{closure}} (80 samples, 0.40%)</title><rect x="33.6184%" y="452" width="0.4000%" height="15" fill="rgb(250,18,42)" fg:x="6723" fg:w="80"/><text x="33.8684%" y="462.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.01%)</title><rect x="34.0084%" y="468" width="0.0100%" height="15" fill="rgb(215,176,39)" fg:x="6801" fg:w="2"/><text x="34.2584%" y="478.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.01%)</title><rect x="34.0084%" y="484" width="0.0100%" height="15" fill="rgb(223,77,29)" fg:x="6801" fg:w="2"/><text x="34.2584%" y="494.50"></text></g><g><title>tokio::runtime::io::registration::Registration::clear_readiness (2 samples, 0.01%)</title><rect x="34.0184%" y="452" width="0.0100%" height="15" fill="rgb(234,94,52)" fg:x="6803" fg:w="2"/><text x="34.2684%" y="462.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::clear_readiness (2 samples, 0.01%)</title><rect x="34.0184%" y="468" width="0.0100%" height="15" fill="rgb(220,154,50)" fg:x="6803" fg:w="2"/><text x="34.2684%" y="478.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::try_read (90 samples, 0.45%)</title><rect x="33.5934%" y="388" width="0.4500%" height="15" fill="rgb(212,11,10)" fg:x="6718" fg:w="90"/><text x="33.8434%" y="398.50"></text></g><g><title>sqlx_core::rt::rt_tokio::socket::&lt;impl sqlx_core::net::socket::Socket for tokio::net::tcp::stream::TcpStream&gt;::try_read (90 samples, 0.45%)</title><rect x="33.5934%" y="404" width="0.4500%" height="15" fill="rgb(205,166,19)" fg:x="6718" fg:w="90"/><text x="33.8434%" y="414.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_read_buf (90 samples, 0.45%)</title><rect x="33.5934%" y="420" width="0.4500%" height="15" fill="rgb(244,198,16)" fg:x="6718" fg:w="90"/><text x="33.8434%" y="430.50"></text></g><g><title>tokio::runtime::io::registration::Registration::try_io (90 samples, 0.45%)</title><rect x="33.5934%" y="436" width="0.4500%" height="15" fill="rgb(219,69,12)" fg:x="6718" fg:w="90"/><text x="33.8434%" y="446.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::ready_event (3 samples, 0.02%)</title><rect x="34.0284%" y="452" width="0.0150%" height="15" fill="rgb(245,30,7)" fg:x="6805" fg:w="3"/><text x="34.2784%" y="462.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="34.0334%" y="468" width="0.0100%" height="15" fill="rgb(218,221,48)" fg:x="6806" fg:w="2"/><text x="34.2834%" y="478.50"></text></g><g><title>sqlx_postgres::connection::PgConnection::wait_until_ready::_{{closure}} (184 samples, 0.92%)</title><rect x="33.1283%" y="260" width="0.9201%" height="15" fill="rgb(216,66,15)" fg:x="6625" fg:w="184"/><text x="33.3783%" y="270.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv::_{{closure}} (101 samples, 0.51%)</title><rect x="33.5434%" y="276" width="0.5051%" height="15" fill="rgb(226,122,50)" fg:x="6708" fg:w="101"/><text x="33.7934%" y="286.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv_unchecked::_{{closure}} (99 samples, 0.50%)</title><rect x="33.5534%" y="292" width="0.4950%" height="15" fill="rgb(239,156,16)" fg:x="6710" fg:w="99"/><text x="33.8034%" y="302.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read::_{{closure}} (99 samples, 0.50%)</title><rect x="33.5534%" y="308" width="0.4950%" height="15" fill="rgb(224,27,38)" fg:x="6710" fg:w="99"/><text x="33.8034%" y="318.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read_with::_{{closure}} (99 samples, 0.50%)</title><rect x="33.5534%" y="324" width="0.4950%" height="15" fill="rgb(224,39,27)" fg:x="6710" fg:w="99"/><text x="33.8034%" y="334.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read_buffered::_{{closure}} (99 samples, 0.50%)</title><rect x="33.5534%" y="340" width="0.4950%" height="15" fill="rgb(215,92,29)" fg:x="6710" fg:w="99"/><text x="33.8034%" y="350.50"></text></g><g><title>sqlx_core::net::socket::buffered::ReadBuffer::read::_{{closure}} (98 samples, 0.49%)</title><rect x="33.5584%" y="356" width="0.4900%" height="15" fill="rgb(207,159,16)" fg:x="6711" fg:w="98"/><text x="33.8084%" y="366.50"></text></g><g><title>&lt;sqlx_core::net::socket::Read&lt;S,B&gt; as core::future::future::Future&gt;::poll (97 samples, 0.49%)</title><rect x="33.5634%" y="372" width="0.4850%" height="15" fill="rgb(238,163,47)" fg:x="6712" fg:w="97"/><text x="33.8134%" y="382.50"></text></g><g><title>&lt;sqlx_postgres::message::sync::Sync as sqlx_core::io::encode::Encode&gt;::encode_with (2 samples, 0.01%)</title><rect x="34.0484%" y="308" width="0.0100%" height="15" fill="rgb(219,91,49)" fg:x="6809" fg:w="2"/><text x="34.2984%" y="318.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (2 samples, 0.01%)</title><rect x="34.0484%" y="324" width="0.0100%" height="15" fill="rgb(227,167,31)" fg:x="6809" fg:w="2"/><text x="34.2984%" y="334.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.01%)</title><rect x="34.0484%" y="340" width="0.0100%" height="15" fill="rgb(234,80,54)" fg:x="6809" fg:w="2"/><text x="34.2984%" y="350.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.01%)</title><rect x="34.0484%" y="356" width="0.0100%" height="15" fill="rgb(212,114,2)" fg:x="6809" fg:w="2"/><text x="34.2984%" y="366.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (200 samples, 1.00%)</title><rect x="33.0733%" y="228" width="1.0001%" height="15" fill="rgb(234,50,24)" fg:x="6614" fg:w="200"/><text x="33.3233%" y="238.50"></text></g><g><title>&lt;sqlx_postgres::connection::PgConnection as sqlx_core::connection::Connection&gt;::ping::_{{closure}} (200 samples, 1.00%)</title><rect x="33.0733%" y="244" width="1.0001%" height="15" fill="rgb(221,68,8)" fg:x="6614" fg:w="200"/><text x="33.3233%" y="254.50"></text></g><g><title>sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::write_sync (5 samples, 0.03%)</title><rect x="34.0484%" y="260" width="0.0250%" height="15" fill="rgb(254,180,31)" fg:x="6809" fg:w="5"/><text x="34.2984%" y="270.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write (5 samples, 0.03%)</title><rect x="34.0484%" y="276" width="0.0250%" height="15" fill="rgb(247,130,50)" fg:x="6809" fg:w="5"/><text x="34.2984%" y="286.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write_with (5 samples, 0.03%)</title><rect x="34.0484%" y="292" width="0.0250%" height="15" fill="rgb(211,109,4)" fg:x="6809" fg:w="5"/><text x="34.2984%" y="302.50"></text></g><g><title>sqlx_core::net::socket::buffered::WriteBuffer::sanity_check (2 samples, 0.01%)</title><rect x="34.0634%" y="308" width="0.0100%" height="15" fill="rgb(238,50,21)" fg:x="6812" fg:w="2"/><text x="34.3134%" y="318.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.03%)</title><rect x="34.0934%" y="340" width="0.0300%" height="15" fill="rgb(225,57,45)" fg:x="6818" fg:w="6"/><text x="34.3434%" y="350.50"></text></g><g><title>tcache_get (5 samples, 0.03%)</title><rect x="34.0984%" y="356" width="0.0250%" height="15" fill="rgb(209,196,50)" fg:x="6819" fg:w="5"/><text x="34.3484%" y="366.50"></text></g><g><title>&lt;sqlx_postgres::connection::PgConnection as sqlx_core::connection::Connection&gt;::ping (11 samples, 0.06%)</title><rect x="34.0734%" y="228" width="0.0550%" height="15" fill="rgb(242,140,13)" fg:x="6814" fg:w="11"/><text x="34.3234%" y="238.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (10 samples, 0.05%)</title><rect x="34.0784%" y="244" width="0.0500%" height="15" fill="rgb(217,111,7)" fg:x="6815" fg:w="10"/><text x="34.3284%" y="254.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (10 samples, 0.05%)</title><rect x="34.0784%" y="260" width="0.0500%" height="15" fill="rgb(253,193,51)" fg:x="6815" fg:w="10"/><text x="34.3284%" y="270.50"></text></g><g><title>alloc::alloc::exchange_malloc (9 samples, 0.05%)</title><rect x="34.0834%" y="276" width="0.0450%" height="15" fill="rgb(252,70,29)" fg:x="6816" fg:w="9"/><text x="34.3334%" y="286.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.05%)</title><rect x="34.0834%" y="292" width="0.0450%" height="15" fill="rgb(232,127,12)" fg:x="6816" fg:w="9"/><text x="34.3334%" y="302.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.05%)</title><rect x="34.0834%" y="308" width="0.0450%" height="15" fill="rgb(211,180,21)" fg:x="6816" fg:w="9"/><text x="34.3334%" y="318.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.05%)</title><rect x="34.0834%" y="324" width="0.0450%" height="15" fill="rgb(229,72,13)" fg:x="6816" fg:w="9"/><text x="34.3334%" y="334.50"></text></g><g><title>__GI___libc_free (5 samples, 0.03%)</title><rect x="34.1334%" y="308" width="0.0250%" height="15" fill="rgb(240,211,49)" fg:x="6826" fg:w="5"/><text x="34.3834%" y="318.50"></text></g><g><title>sqlx_core::pool::connection::Floating&lt;DB,sqlx_core::pool::connection::Idle&lt;DB&gt;&gt;::ping::_{{closure}} (218 samples, 1.09%)</title><rect x="33.0733%" y="212" width="1.0901%" height="15" fill="rgb(219,149,40)" fg:x="6614" fg:w="218"/><text x="33.3233%" y="222.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (7 samples, 0.04%)</title><rect x="34.1284%" y="228" width="0.0350%" height="15" fill="rgb(210,127,46)" fg:x="6825" fg:w="7"/><text x="34.3784%" y="238.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (7 samples, 0.04%)</title><rect x="34.1284%" y="244" width="0.0350%" height="15" fill="rgb(220,106,7)" fg:x="6825" fg:w="7"/><text x="34.3784%" y="254.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="34.1284%" y="260" width="0.0350%" height="15" fill="rgb(249,31,22)" fg:x="6825" fg:w="7"/><text x="34.3784%" y="270.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.04%)</title><rect x="34.1284%" y="276" width="0.0350%" height="15" fill="rgb(253,1,49)" fg:x="6825" fg:w="7"/><text x="34.3784%" y="286.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.03%)</title><rect x="34.1334%" y="292" width="0.0300%" height="15" fill="rgb(227,144,33)" fg:x="6826" fg:w="6"/><text x="34.3834%" y="302.50"></text></g><g><title>&lt;rust_axum::DatabaseConnection as axum_core::extract::FromRequestParts&lt;S&gt;&gt;::from_request_parts::_{{closure}} (381 samples, 1.91%)</title><rect x="32.2932%" y="100" width="1.9052%" height="15" fill="rgb(249,163,44)" fg:x="6458" fg:w="381"/><text x="32.5432%" y="110.50">&lt;..</text></g><g><title>sqlx_core::pool::Pool&lt;DB&gt;::acquire::_{{closure}} (381 samples, 1.91%)</title><rect x="32.2932%" y="116" width="1.9052%" height="15" fill="rgb(234,15,39)" fg:x="6458" fg:w="381"/><text x="32.5432%" y="126.50">s..</text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::acquire::_{{closure}} (381 samples, 1.91%)</title><rect x="32.2932%" y="132" width="1.9052%" height="15" fill="rgb(207,66,16)" fg:x="6458" fg:w="381"/><text x="32.5432%" y="142.50">s..</text></g><g><title>sqlx_core::rt::timeout::_{{closure}} (381 samples, 1.91%)</title><rect x="32.2932%" y="148" width="1.9052%" height="15" fill="rgb(233,112,24)" fg:x="6458" fg:w="381"/><text x="32.5432%" y="158.50">s..</text></g><g><title>&lt;tokio::time::timeout::Timeout&lt;T&gt; as core::future::future::Future&gt;::poll (381 samples, 1.91%)</title><rect x="32.2932%" y="164" width="1.9052%" height="15" fill="rgb(230,90,22)" fg:x="6458" fg:w="381"/><text x="32.5432%" y="174.50">&lt;..</text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::acquire::_{{closure}}::_{{closure}} (377 samples, 1.89%)</title><rect x="32.3132%" y="180" width="1.8852%" height="15" fill="rgb(229,61,13)" fg:x="6462" fg:w="377"/><text x="32.5632%" y="190.50">s..</text></g><g><title>sqlx_core::pool::inner::check_idle_conn::_{{closure}} (227 samples, 1.14%)</title><rect x="33.0633%" y="196" width="1.1351%" height="15" fill="rgb(225,57,24)" fg:x="6612" fg:w="227"/><text x="33.3133%" y="206.50"></text></g><g><title>sqlx_core::pool::inner::is_beyond_max_lifetime (7 samples, 0.04%)</title><rect x="34.1634%" y="212" width="0.0350%" height="15" fill="rgb(208,169,48)" fg:x="6832" fg:w="7"/><text x="34.4134%" y="222.50"></text></g><g><title>core::option::Option&lt;T&gt;::map_or (7 samples, 0.04%)</title><rect x="34.1634%" y="228" width="0.0350%" height="15" fill="rgb(244,218,51)" fg:x="6832" fg:w="7"/><text x="34.4134%" y="238.50"></text></g><g><title>sqlx_core::pool::inner::is_beyond_max_lifetime::_{{closure}} (7 samples, 0.04%)</title><rect x="34.1634%" y="244" width="0.0350%" height="15" fill="rgb(214,148,10)" fg:x="6832" fg:w="7"/><text x="34.4134%" y="254.50"></text></g><g><title>std::time::Instant::elapsed (7 samples, 0.04%)</title><rect x="34.1634%" y="260" width="0.0350%" height="15" fill="rgb(225,174,27)" fg:x="6832" fg:w="7"/><text x="34.4134%" y="270.50"></text></g><g><title>std::time::Instant::now (6 samples, 0.03%)</title><rect x="34.1684%" y="276" width="0.0300%" height="15" fill="rgb(230,96,26)" fg:x="6833" fg:w="6"/><text x="34.4184%" y="286.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (6 samples, 0.03%)</title><rect x="34.1684%" y="292" width="0.0300%" height="15" fill="rgb(232,10,30)" fg:x="6833" fg:w="6"/><text x="34.4184%" y="302.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (6 samples, 0.03%)</title><rect x="34.1684%" y="308" width="0.0300%" height="15" fill="rgb(222,8,50)" fg:x="6833" fg:w="6"/><text x="34.4184%" y="318.50"></text></g><g><title>__GI___clock_gettime (6 samples, 0.03%)</title><rect x="34.1684%" y="324" width="0.0300%" height="15" fill="rgb(213,81,27)" fg:x="6833" fg:w="6"/><text x="34.4184%" y="334.50"></text></g><g><title>[[vdso]] (4 samples, 0.02%)</title><rect x="34.1784%" y="340" width="0.0200%" height="15" fill="rgb(245,50,10)" fg:x="6835" fg:w="4"/><text x="34.4284%" y="350.50"></text></g><g><title>[[vdso]] (4 samples, 0.02%)</title><rect x="34.1784%" y="356" width="0.0200%" height="15" fill="rgb(216,100,18)" fg:x="6835" fg:w="4"/><text x="34.4284%" y="366.50"></text></g><g><title>[unknown] (11 samples, 0.06%)</title><rect x="34.1984%" y="100" width="0.0550%" height="15" fill="rgb(236,147,54)" fg:x="6839" fg:w="11"/><text x="34.4484%" y="110.50"></text></g><g><title>[unknown] (11 samples, 0.06%)</title><rect x="34.1984%" y="116" width="0.0550%" height="15" fill="rgb(205,143,26)" fg:x="6839" fg:w="11"/><text x="34.4484%" y="126.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="34.2034%" y="132" width="0.0500%" height="15" fill="rgb(236,26,9)" fg:x="6840" fg:w="10"/><text x="34.4534%" y="142.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="34.2134%" y="148" width="0.0400%" height="15" fill="rgb(221,165,53)" fg:x="6842" fg:w="8"/><text x="34.4634%" y="158.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="34.2134%" y="164" width="0.0400%" height="15" fill="rgb(214,110,17)" fg:x="6842" fg:w="8"/><text x="34.4634%" y="174.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="34.2284%" y="180" width="0.0250%" height="15" fill="rgb(237,197,12)" fg:x="6845" fg:w="5"/><text x="34.4784%" y="190.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="34.2284%" y="196" width="0.0250%" height="15" fill="rgb(205,84,17)" fg:x="6845" fg:w="5"/><text x="34.4784%" y="206.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="34.2284%" y="212" width="0.0250%" height="15" fill="rgb(237,18,45)" fg:x="6845" fg:w="5"/><text x="34.4784%" y="222.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="34.2284%" y="228" width="0.0250%" height="15" fill="rgb(221,87,14)" fg:x="6845" fg:w="5"/><text x="34.4784%" y="238.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="34.2334%" y="244" width="0.0200%" height="15" fill="rgb(238,186,15)" fg:x="6846" fg:w="4"/><text x="34.4834%" y="254.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="34.2334%" y="260" width="0.0200%" height="15" fill="rgb(208,115,11)" fg:x="6846" fg:w="4"/><text x="34.4834%" y="270.50"></text></g><g><title>__GI___lll_lock_wake_private (2 samples, 0.01%)</title><rect x="34.2534%" y="100" width="0.0100%" height="15" fill="rgb(254,175,0)" fg:x="6850" fg:w="2"/><text x="34.5034%" y="110.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="34.2534%" y="116" width="0.0100%" height="15" fill="rgb(227,24,42)" fg:x="6850" fg:w="2"/><text x="34.5034%" y="126.50"></text></g><g><title>__libc_recv (18 samples, 0.09%)</title><rect x="34.2634%" y="100" width="0.0900%" height="15" fill="rgb(223,211,37)" fg:x="6852" fg:w="18"/><text x="34.5134%" y="110.50"></text></g><g><title>__libc_recv (18 samples, 0.09%)</title><rect x="34.2634%" y="116" width="0.0900%" height="15" fill="rgb(235,49,27)" fg:x="6852" fg:w="18"/><text x="34.5134%" y="126.50"></text></g><g><title>[unknown] (18 samples, 0.09%)</title><rect x="34.2634%" y="132" width="0.0900%" height="15" fill="rgb(254,97,51)" fg:x="6852" fg:w="18"/><text x="34.5134%" y="142.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (146 samples, 0.73%)</title><rect x="34.3584%" y="1044" width="0.7301%" height="15" fill="rgb(249,51,40)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1054.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::advance (146 samples, 0.73%)</title><rect x="34.3584%" y="1060" width="0.7301%" height="15" fill="rgb(210,128,45)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1070.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (146 samples, 0.73%)</title><rect x="34.3584%" y="1076" width="0.7301%" height="15" fill="rgb(224,137,50)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1086.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt; (146 samples, 0.73%)</title><rect x="34.3584%" y="1092" width="0.7301%" height="15" fill="rgb(242,15,9)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1102.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::BufKind&lt;bytes::bytes::Bytes&gt;&gt; (146 samples, 0.73%)</title><rect x="34.3584%" y="1108" width="0.7301%" height="15" fill="rgb(233,187,41)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1118.50"></text></g><g><title>bytes::bytes::shared_drop (146 samples, 0.73%)</title><rect x="34.3584%" y="1124" width="0.7301%" height="15" fill="rgb(227,2,29)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1134.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (146 samples, 0.73%)</title><rect x="34.3584%" y="1140" width="0.7301%" height="15" fill="rgb(222,70,3)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1150.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (146 samples, 0.73%)</title><rect x="34.3584%" y="1156" width="0.7301%" height="15" fill="rgb(213,11,42)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1166.50"></text></g><g><title>bytes::bytes::release_shared (146 samples, 0.73%)</title><rect x="34.3584%" y="1172" width="0.7301%" height="15" fill="rgb(225,150,9)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1182.50"></text></g><g><title>core::mem::drop (146 samples, 0.73%)</title><rect x="34.3584%" y="1188" width="0.7301%" height="15" fill="rgb(230,162,45)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (146 samples, 0.73%)</title><rect x="34.3584%" y="1204" width="0.7301%" height="15" fill="rgb(222,14,52)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1214.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Shared&gt; (146 samples, 0.73%)</title><rect x="34.3584%" y="1220" width="0.7301%" height="15" fill="rgb(254,198,14)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1230.50"></text></g><g><title>&lt;bytes::bytes::Shared as core::ops::drop::Drop&gt;::drop (146 samples, 0.73%)</title><rect x="34.3584%" y="1236" width="0.7301%" height="15" fill="rgb(220,217,30)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1246.50"></text></g><g><title>alloc::alloc::dealloc (146 samples, 0.73%)</title><rect x="34.3584%" y="1252" width="0.7301%" height="15" fill="rgb(215,146,41)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1262.50"></text></g><g><title>__GI___libc_free (146 samples, 0.73%)</title><rect x="34.3584%" y="1268" width="0.7301%" height="15" fill="rgb(217,27,36)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1278.50"></text></g><g><title>_int_free (146 samples, 0.73%)</title><rect x="34.3584%" y="1284" width="0.7301%" height="15" fill="rgb(219,218,39)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1294.50"></text></g><g><title>malloc_consolidate (146 samples, 0.73%)</title><rect x="34.3584%" y="1300" width="0.7301%" height="15" fill="rgb(219,4,42)" fg:x="6871" fg:w="146"/><text x="34.6084%" y="1310.50"></text></g><g><title>unlink_chunk (39 samples, 0.20%)</title><rect x="34.8935%" y="1316" width="0.1950%" height="15" fill="rgb(249,119,36)" fg:x="6978" fg:w="39"/><text x="35.1435%" y="1326.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored::_{{closure}} (59 samples, 0.30%)</title><rect x="35.0885%" y="1140" width="0.2950%" height="15" fill="rgb(209,23,33)" fg:x="7017" fg:w="59"/><text x="35.3385%" y="1150.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (59 samples, 0.30%)</title><rect x="35.0885%" y="1156" width="0.2950%" height="15" fill="rgb(211,10,0)" fg:x="7017" fg:w="59"/><text x="35.3385%" y="1166.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (59 samples, 0.30%)</title><rect x="35.0885%" y="1172" width="0.2950%" height="15" fill="rgb(208,99,37)" fg:x="7017" fg:w="59"/><text x="35.3385%" y="1182.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (59 samples, 0.30%)</title><rect x="35.0885%" y="1188" width="0.2950%" height="15" fill="rgb(213,132,31)" fg:x="7017" fg:w="59"/><text x="35.3385%" y="1198.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored::_{{closure}} (59 samples, 0.30%)</title><rect x="35.0885%" y="1204" width="0.2950%" height="15" fill="rgb(243,129,40)" fg:x="7017" fg:w="59"/><text x="35.3385%" y="1214.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write_vectored (59 samples, 0.30%)</title><rect x="35.0885%" y="1220" width="0.2950%" height="15" fill="rgb(210,66,33)" fg:x="7017" fg:w="59"/><text x="35.3385%" y="1230.50"></text></g><g><title>std::sys_common::net::TcpStream::write_vectored (58 samples, 0.29%)</title><rect x="35.0935%" y="1236" width="0.2900%" height="15" fill="rgb(209,189,4)" fg:x="7018" fg:w="58"/><text x="35.3435%" y="1246.50"></text></g><g><title>std::sys::unix::net::Socket::write_vectored (58 samples, 0.29%)</title><rect x="35.0935%" y="1252" width="0.2900%" height="15" fill="rgb(214,107,37)" fg:x="7018" fg:w="58"/><text x="35.3435%" y="1262.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write_vectored (58 samples, 0.29%)</title><rect x="35.0935%" y="1268" width="0.2900%" height="15" fill="rgb(245,88,54)" fg:x="7018" fg:w="58"/><text x="35.3435%" y="1278.50"></text></g><g><title>__GI___writev (58 samples, 0.29%)</title><rect x="35.0935%" y="1284" width="0.2900%" height="15" fill="rgb(205,146,20)" fg:x="7018" fg:w="58"/><text x="35.3435%" y="1294.50"></text></g><g><title>__GI___writev (56 samples, 0.28%)</title><rect x="35.1035%" y="1300" width="0.2800%" height="15" fill="rgb(220,161,25)" fg:x="7020" fg:w="56"/><text x="35.3535%" y="1310.50"></text></g><g><title>[unknown] (56 samples, 0.28%)</title><rect x="35.1035%" y="1316" width="0.2800%" height="15" fill="rgb(215,152,15)" fg:x="7020" fg:w="56"/><text x="35.3535%" y="1326.50"></text></g><g><title>[unknown] (52 samples, 0.26%)</title><rect x="35.1235%" y="1332" width="0.2600%" height="15" fill="rgb(233,192,44)" fg:x="7024" fg:w="52"/><text x="35.3735%" y="1342.50"></text></g><g><title>[unknown] (44 samples, 0.22%)</title><rect x="35.1635%" y="1348" width="0.2200%" height="15" fill="rgb(240,170,46)" fg:x="7032" fg:w="44"/><text x="35.4135%" y="1358.50"></text></g><g><title>[unknown] (44 samples, 0.22%)</title><rect x="35.1635%" y="1364" width="0.2200%" height="15" fill="rgb(207,104,33)" fg:x="7032" fg:w="44"/><text x="35.4135%" y="1374.50"></text></g><g><title>[unknown] (41 samples, 0.21%)</title><rect x="35.1785%" y="1380" width="0.2050%" height="15" fill="rgb(219,21,39)" fg:x="7035" fg:w="41"/><text x="35.4285%" y="1390.50"></text></g><g><title>[unknown] (34 samples, 0.17%)</title><rect x="35.2135%" y="1396" width="0.1700%" height="15" fill="rgb(214,133,29)" fg:x="7042" fg:w="34"/><text x="35.4635%" y="1406.50"></text></g><g><title>[unknown] (23 samples, 0.12%)</title><rect x="35.2685%" y="1412" width="0.1150%" height="15" fill="rgb(226,93,6)" fg:x="7053" fg:w="23"/><text x="35.5185%" y="1422.50"></text></g><g><title>[unknown] (21 samples, 0.11%)</title><rect x="35.2785%" y="1428" width="0.1050%" height="15" fill="rgb(252,222,34)" fg:x="7055" fg:w="21"/><text x="35.5285%" y="1438.50"></text></g><g><title>[unknown] (11 samples, 0.06%)</title><rect x="35.3285%" y="1444" width="0.0550%" height="15" fill="rgb(252,92,48)" fg:x="7065" fg:w="11"/><text x="35.5785%" y="1454.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="35.3735%" y="1460" width="0.0100%" height="15" fill="rgb(245,223,24)" fg:x="7074" fg:w="2"/><text x="35.6235%" y="1470.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (207 samples, 1.04%)</title><rect x="34.3584%" y="996" width="1.0351%" height="15" fill="rgb(205,176,3)" fg:x="6871" fg:w="207"/><text x="34.6084%" y="1006.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (207 samples, 1.04%)</title><rect x="34.3584%" y="1012" width="1.0351%" height="15" fill="rgb(235,151,15)" fg:x="6871" fg:w="207"/><text x="34.6084%" y="1022.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (207 samples, 1.04%)</title><rect x="34.3584%" y="1028" width="1.0351%" height="15" fill="rgb(237,209,11)" fg:x="6871" fg:w="207"/><text x="34.6084%" y="1038.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (61 samples, 0.31%)</title><rect x="35.0885%" y="1044" width="0.3050%" height="15" fill="rgb(243,227,24)" fg:x="7017" fg:w="61"/><text x="35.3385%" y="1054.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (61 samples, 0.31%)</title><rect x="35.0885%" y="1060" width="0.3050%" height="15" fill="rgb(239,193,16)" fg:x="7017" fg:w="61"/><text x="35.3385%" y="1070.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv (61 samples, 0.31%)</title><rect x="35.0885%" y="1076" width="0.3050%" height="15" fill="rgb(231,27,9)" fg:x="7017" fg:w="61"/><text x="35.3385%" y="1086.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored (61 samples, 0.31%)</title><rect x="35.0885%" y="1092" width="0.3050%" height="15" fill="rgb(219,169,10)" fg:x="7017" fg:w="61"/><text x="35.3385%" y="1102.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_io (61 samples, 0.31%)</title><rect x="35.0885%" y="1108" width="0.3050%" height="15" fill="rgb(244,229,43)" fg:x="7017" fg:w="61"/><text x="35.3385%" y="1118.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (61 samples, 0.31%)</title><rect x="35.0885%" y="1124" width="0.3050%" height="15" fill="rgb(254,38,20)" fg:x="7017" fg:w="61"/><text x="35.3385%" y="1134.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="35.3835%" y="1140" width="0.0100%" height="15" fill="rgb(250,47,30)" fg:x="7076" fg:w="2"/><text x="35.6335%" y="1150.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.01%)</title><rect x="35.3835%" y="1156" width="0.0100%" height="15" fill="rgb(224,124,36)" fg:x="7076" fg:w="2"/><text x="35.6335%" y="1166.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.02%)</title><rect x="35.4185%" y="1060" width="0.0200%" height="15" fill="rgb(246,68,51)" fg:x="7083" fg:w="4"/><text x="35.6685%" y="1070.50"></text></g><g><title>__memmove_avx_unaligned (3 samples, 0.02%)</title><rect x="35.4235%" y="1076" width="0.0150%" height="15" fill="rgb(253,43,49)" fg:x="7084" fg:w="3"/><text x="35.6735%" y="1086.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="35.4385%" y="1060" width="0.0100%" height="15" fill="rgb(219,54,36)" fg:x="7087" fg:w="2"/><text x="35.6885%" y="1070.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::max (2 samples, 0.01%)</title><rect x="35.4535%" y="1060" width="0.0100%" height="15" fill="rgb(227,133,34)" fg:x="7090" fg:w="2"/><text x="35.7035%" y="1070.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (15 samples, 0.08%)</title><rect x="35.3935%" y="996" width="0.0750%" height="15" fill="rgb(247,227,15)" fg:x="7078" fg:w="15"/><text x="35.6435%" y="1006.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (15 samples, 0.08%)</title><rect x="35.3935%" y="1012" width="0.0750%" height="15" fill="rgb(229,96,14)" fg:x="7078" fg:w="15"/><text x="35.6435%" y="1022.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (15 samples, 0.08%)</title><rect x="35.3935%" y="1028" width="0.0750%" height="15" fill="rgb(220,79,17)" fg:x="7078" fg:w="15"/><text x="35.6435%" y="1038.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (15 samples, 0.08%)</title><rect x="35.3935%" y="1044" width="0.0750%" height="15" fill="rgb(205,131,53)" fg:x="7078" fg:w="15"/><text x="35.6435%" y="1054.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="35.4685%" y="1188" width="0.0150%" height="15" fill="rgb(209,50,29)" fg:x="7093" fg:w="3"/><text x="35.7185%" y="1198.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="35.4835%" y="1188" width="0.0100%" height="15" fill="rgb(245,86,46)" fg:x="7096" fg:w="2"/><text x="35.7335%" y="1198.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="35.4935%" y="1252" width="0.0150%" height="15" fill="rgb(235,66,46)" fg:x="7098" fg:w="3"/><text x="35.7435%" y="1262.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call (9 samples, 0.05%)</title><rect x="35.4685%" y="1140" width="0.0450%" height="15" fill="rgb(232,148,31)" fg:x="7093" fg:w="9"/><text x="35.7185%" y="1150.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (9 samples, 0.05%)</title><rect x="35.4685%" y="1156" width="0.0450%" height="15" fill="rgb(217,149,8)" fg:x="7093" fg:w="9"/><text x="35.7185%" y="1166.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (9 samples, 0.05%)</title><rect x="35.4685%" y="1172" width="0.0450%" height="15" fill="rgb(209,183,11)" fg:x="7093" fg:w="9"/><text x="35.7185%" y="1182.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.02%)</title><rect x="35.4935%" y="1188" width="0.0200%" height="15" fill="rgb(208,55,20)" fg:x="7098" fg:w="4"/><text x="35.7435%" y="1198.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="35.4935%" y="1204" width="0.0200%" height="15" fill="rgb(218,39,14)" fg:x="7098" fg:w="4"/><text x="35.7435%" y="1214.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="35.4935%" y="1220" width="0.0200%" height="15" fill="rgb(216,169,33)" fg:x="7098" fg:w="4"/><text x="35.7435%" y="1230.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="35.4935%" y="1236" width="0.0200%" height="15" fill="rgb(233,80,24)" fg:x="7098" fg:w="4"/><text x="35.7435%" y="1246.50"></text></g><g><title>&lt;tower::util::map_response::MapResponse&lt;S,F&gt; as tower_service::Service&lt;Request&gt;&gt;::call (11 samples, 0.06%)</title><rect x="35.4685%" y="1108" width="0.0550%" height="15" fill="rgb(213,179,31)" fg:x="7093" fg:w="11"/><text x="35.7185%" y="1118.50"></text></g><g><title>&lt;axum::handler::service::HandlerService&lt;H,T,S,B&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (11 samples, 0.06%)</title><rect x="35.4685%" y="1124" width="0.0550%" height="15" fill="rgb(209,19,5)" fg:x="7093" fg:w="11"/><text x="35.7185%" y="1134.50"></text></g><g><title>&lt;sqlx_core::pool::Pool&lt;DB&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="35.5136%" y="1140" width="0.0100%" height="15" fill="rgb(219,18,35)" fg:x="7102" fg:w="2"/><text x="35.7636%" y="1150.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="35.5136%" y="1156" width="0.0100%" height="15" fill="rgb(209,169,16)" fg:x="7102" fg:w="2"/><text x="35.7636%" y="1166.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.02%)</title><rect x="35.5236%" y="1220" width="0.0200%" height="15" fill="rgb(245,90,51)" fg:x="7104" fg:w="4"/><text x="35.7736%" y="1230.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="35.5286%" y="1236" width="0.0150%" height="15" fill="rgb(220,99,45)" fg:x="7105" fg:w="3"/><text x="35.7786%" y="1246.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (240 samples, 1.20%)</title><rect x="34.3534%" y="100" width="1.2001%" height="15" fill="rgb(249,89,25)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="110.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="116" width="1.2001%" height="15" fill="rgb(239,193,0)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="126.50"></text></g><g><title>std::panic::catch_unwind (240 samples, 1.20%)</title><rect x="34.3534%" y="132" width="1.2001%" height="15" fill="rgb(231,126,1)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="142.50"></text></g><g><title>std::panicking::try (240 samples, 1.20%)</title><rect x="34.3534%" y="148" width="1.2001%" height="15" fill="rgb(243,166,3)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="158.50"></text></g><g><title>std::panicking::try::do_call (240 samples, 1.20%)</title><rect x="34.3534%" y="164" width="1.2001%" height="15" fill="rgb(223,22,34)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="174.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (240 samples, 1.20%)</title><rect x="34.3534%" y="180" width="1.2001%" height="15" fill="rgb(251,52,51)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="190.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="196" width="1.2001%" height="15" fill="rgb(221,165,28)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="206.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (240 samples, 1.20%)</title><rect x="34.3534%" y="212" width="1.2001%" height="15" fill="rgb(218,121,47)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="222.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="228" width="1.2001%" height="15" fill="rgb(209,120,9)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="238.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (240 samples, 1.20%)</title><rect x="34.3534%" y="244" width="1.2001%" height="15" fill="rgb(236,68,12)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="254.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (240 samples, 1.20%)</title><rect x="34.3534%" y="260" width="1.2001%" height="15" fill="rgb(225,194,26)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="270.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (240 samples, 1.20%)</title><rect x="34.3534%" y="276" width="1.2001%" height="15" fill="rgb(231,84,39)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="286.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (240 samples, 1.20%)</title><rect x="34.3534%" y="292" width="1.2001%" height="15" fill="rgb(210,11,45)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="302.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (240 samples, 1.20%)</title><rect x="34.3534%" y="308" width="1.2001%" height="15" fill="rgb(224,54,52)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="318.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (240 samples, 1.20%)</title><rect x="34.3534%" y="324" width="1.2001%" height="15" fill="rgb(238,102,14)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="334.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (240 samples, 1.20%)</title><rect x="34.3534%" y="340" width="1.2001%" height="15" fill="rgb(243,160,52)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="350.50"></text></g><g><title>std::panic::catch_unwind (240 samples, 1.20%)</title><rect x="34.3534%" y="356" width="1.2001%" height="15" fill="rgb(216,114,19)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="366.50"></text></g><g><title>std::panicking::try (240 samples, 1.20%)</title><rect x="34.3534%" y="372" width="1.2001%" height="15" fill="rgb(244,166,37)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="382.50"></text></g><g><title>std::panicking::try::do_call (240 samples, 1.20%)</title><rect x="34.3534%" y="388" width="1.2001%" height="15" fill="rgb(246,29,44)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="398.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (240 samples, 1.20%)</title><rect x="34.3534%" y="404" width="1.2001%" height="15" fill="rgb(215,56,53)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="414.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="420" width="1.2001%" height="15" fill="rgb(217,60,2)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="430.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (240 samples, 1.20%)</title><rect x="34.3534%" y="436" width="1.2001%" height="15" fill="rgb(207,26,24)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="446.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (240 samples, 1.20%)</title><rect x="34.3534%" y="452" width="1.2001%" height="15" fill="rgb(252,210,15)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="462.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="468" width="1.2001%" height="15" fill="rgb(253,209,26)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="478.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (240 samples, 1.20%)</title><rect x="34.3534%" y="484" width="1.2001%" height="15" fill="rgb(238,170,14)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="494.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="500" width="1.2001%" height="15" fill="rgb(216,178,15)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="510.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (240 samples, 1.20%)</title><rect x="34.3534%" y="516" width="1.2001%" height="15" fill="rgb(250,197,2)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="526.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (240 samples, 1.20%)</title><rect x="34.3534%" y="532" width="1.2001%" height="15" fill="rgb(212,70,42)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="542.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="548" width="1.2001%" height="15" fill="rgb(227,213,9)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="558.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (240 samples, 1.20%)</title><rect x="34.3534%" y="564" width="1.2001%" height="15" fill="rgb(245,99,25)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="574.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="580" width="1.2001%" height="15" fill="rgb(250,82,29)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="590.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (240 samples, 1.20%)</title><rect x="34.3534%" y="596" width="1.2001%" height="15" fill="rgb(241,226,54)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="606.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (240 samples, 1.20%)</title><rect x="34.3534%" y="612" width="1.2001%" height="15" fill="rgb(221,99,41)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="622.50"></text></g><g><title>tokio::runtime::coop::budget (240 samples, 1.20%)</title><rect x="34.3534%" y="628" width="1.2001%" height="15" fill="rgb(213,90,21)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="638.50"></text></g><g><title>tokio::runtime::coop::with_budget (240 samples, 1.20%)</title><rect x="34.3534%" y="644" width="1.2001%" height="15" fill="rgb(205,208,24)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="654.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (240 samples, 1.20%)</title><rect x="34.3534%" y="660" width="1.2001%" height="15" fill="rgb(246,31,12)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="670.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (240 samples, 1.20%)</title><rect x="34.3534%" y="676" width="1.2001%" height="15" fill="rgb(213,154,6)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="686.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (240 samples, 1.20%)</title><rect x="34.3534%" y="692" width="1.2001%" height="15" fill="rgb(222,163,29)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="702.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (240 samples, 1.20%)</title><rect x="34.3534%" y="708" width="1.2001%" height="15" fill="rgb(227,201,8)" fg:x="6870" fg:w="240"/><text x="34.6034%" y="718.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (239 samples, 1.20%)</title><rect x="34.3584%" y="724" width="1.1951%" height="15" fill="rgb(233,9,32)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="734.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (239 samples, 1.20%)</title><rect x="34.3584%" y="740" width="1.1951%" height="15" fill="rgb(217,54,24)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="750.50"></text></g><g><title>std::panic::catch_unwind (239 samples, 1.20%)</title><rect x="34.3584%" y="756" width="1.1951%" height="15" fill="rgb(235,192,0)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="766.50"></text></g><g><title>std::panicking::try (239 samples, 1.20%)</title><rect x="34.3584%" y="772" width="1.1951%" height="15" fill="rgb(235,45,9)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="782.50"></text></g><g><title>std::panicking::try::do_call (239 samples, 1.20%)</title><rect x="34.3584%" y="788" width="1.1951%" height="15" fill="rgb(246,42,40)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="798.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (239 samples, 1.20%)</title><rect x="34.3584%" y="804" width="1.1951%" height="15" fill="rgb(248,111,24)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="814.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (239 samples, 1.20%)</title><rect x="34.3584%" y="820" width="1.1951%" height="15" fill="rgb(249,65,22)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="830.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (239 samples, 1.20%)</title><rect x="34.3584%" y="836" width="1.1951%" height="15" fill="rgb(238,111,51)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="846.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (239 samples, 1.20%)</title><rect x="34.3584%" y="852" width="1.1951%" height="15" fill="rgb(250,118,22)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="862.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (239 samples, 1.20%)</title><rect x="34.3584%" y="868" width="1.1951%" height="15" fill="rgb(234,84,26)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="878.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (239 samples, 1.20%)</title><rect x="34.3584%" y="884" width="1.1951%" height="15" fill="rgb(243,172,12)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="894.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (239 samples, 1.20%)</title><rect x="34.3584%" y="900" width="1.1951%" height="15" fill="rgb(236,150,49)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="910.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (239 samples, 1.20%)</title><rect x="34.3584%" y="916" width="1.1951%" height="15" fill="rgb(225,197,26)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="926.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (239 samples, 1.20%)</title><rect x="34.3584%" y="932" width="1.1951%" height="15" fill="rgb(214,17,42)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="942.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (239 samples, 1.20%)</title><rect x="34.3584%" y="948" width="1.1951%" height="15" fill="rgb(224,165,40)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="958.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (239 samples, 1.20%)</title><rect x="34.3584%" y="964" width="1.1951%" height="15" fill="rgb(246,100,4)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="974.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (239 samples, 1.20%)</title><rect x="34.3584%" y="980" width="1.1951%" height="15" fill="rgb(222,103,0)" fg:x="6871" fg:w="239"/><text x="34.6084%" y="990.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (17 samples, 0.09%)</title><rect x="35.4685%" y="996" width="0.0850%" height="15" fill="rgb(227,189,26)" fg:x="7093" fg:w="17"/><text x="35.7185%" y="1006.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (17 samples, 0.09%)</title><rect x="35.4685%" y="1012" width="0.0850%" height="15" fill="rgb(214,202,17)" fg:x="7093" fg:w="17"/><text x="35.7185%" y="1022.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (17 samples, 0.09%)</title><rect x="35.4685%" y="1028" width="0.0850%" height="15" fill="rgb(229,111,3)" fg:x="7093" fg:w="17"/><text x="35.7185%" y="1038.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (17 samples, 0.09%)</title><rect x="35.4685%" y="1044" width="0.0850%" height="15" fill="rgb(229,172,15)" fg:x="7093" fg:w="17"/><text x="35.7185%" y="1054.50"></text></g><g><title>&lt;tower::util::boxed_clone::BoxCloneService&lt;T,U,E&gt; as tower_service::Service&lt;T&gt;&gt;::call (17 samples, 0.09%)</title><rect x="35.4685%" y="1060" width="0.0850%" height="15" fill="rgb(230,224,35)" fg:x="7093" fg:w="17"/><text x="35.7185%" y="1070.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::call (17 samples, 0.09%)</title><rect x="35.4685%" y="1076" width="0.0850%" height="15" fill="rgb(251,141,6)" fg:x="7093" fg:w="17"/><text x="35.7185%" y="1086.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (17 samples, 0.09%)</title><rect x="35.4685%" y="1092" width="0.0850%" height="15" fill="rgb(225,208,6)" fg:x="7093" fg:w="17"/><text x="35.7185%" y="1102.50"></text></g><g><title>tower::util::boxed_clone::BoxCloneService&lt;T,U,E&gt;::new::_{{closure}} (6 samples, 0.03%)</title><rect x="35.5236%" y="1108" width="0.0300%" height="15" fill="rgb(246,181,16)" fg:x="7104" fg:w="6"/><text x="35.7736%" y="1118.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (6 samples, 0.03%)</title><rect x="35.5236%" y="1124" width="0.0300%" height="15" fill="rgb(227,129,36)" fg:x="7104" fg:w="6"/><text x="35.7736%" y="1134.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="35.5236%" y="1140" width="0.0300%" height="15" fill="rgb(248,117,24)" fg:x="7104" fg:w="6"/><text x="35.7736%" y="1150.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.03%)</title><rect x="35.5236%" y="1156" width="0.0300%" height="15" fill="rgb(214,185,35)" fg:x="7104" fg:w="6"/><text x="35.7736%" y="1166.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="35.5236%" y="1172" width="0.0300%" height="15" fill="rgb(236,150,34)" fg:x="7104" fg:w="6"/><text x="35.7736%" y="1182.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="35.5236%" y="1188" width="0.0300%" height="15" fill="rgb(243,228,27)" fg:x="7104" fg:w="6"/><text x="35.7736%" y="1198.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="35.5236%" y="1204" width="0.0300%" height="15" fill="rgb(245,77,44)" fg:x="7104" fg:w="6"/><text x="35.7736%" y="1214.50"></text></g><g><title>epoll_wait (5 samples, 0.03%)</title><rect x="35.5536%" y="100" width="0.0250%" height="15" fill="rgb(235,214,42)" fg:x="7110" fg:w="5"/><text x="35.8036%" y="110.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="35.5536%" y="116" width="0.0250%" height="15" fill="rgb(221,74,3)" fg:x="7110" fg:w="5"/><text x="35.8036%" y="126.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.02%)</title><rect x="35.5986%" y="580" width="0.0200%" height="15" fill="rgb(206,121,29)" fg:x="7119" fg:w="4"/><text x="35.8486%" y="590.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.02%)</title><rect x="35.5986%" y="596" width="0.0200%" height="15" fill="rgb(249,131,53)" fg:x="7119" fg:w="4"/><text x="35.8486%" y="606.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.02%)</title><rect x="35.5986%" y="612" width="0.0200%" height="15" fill="rgb(236,170,29)" fg:x="7119" fg:w="4"/><text x="35.8486%" y="622.50"></text></g><g><title>tokio::runtime::task::Task&lt;S&gt;::header (4 samples, 0.02%)</title><rect x="35.6186%" y="580" width="0.0200%" height="15" fill="rgb(247,96,15)" fg:x="7123" fg:w="4"/><text x="35.8686%" y="590.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::header (4 samples, 0.02%)</title><rect x="35.6186%" y="596" width="0.0200%" height="15" fill="rgb(211,210,7)" fg:x="7123" fg:w="4"/><text x="35.8686%" y="606.50"></text></g><g><title>&lt;tokio::runtime::task::Task&lt;S&gt; as tokio::util::linked_list::Link&gt;::pointers (5 samples, 0.03%)</title><rect x="35.6436%" y="612" width="0.0250%" height="15" fill="rgb(240,88,50)" fg:x="7128" fg:w="5"/><text x="35.8936%" y="622.50"></text></g><g><title>tokio::runtime::task::core::Header::get_trailer (5 samples, 0.03%)</title><rect x="35.6436%" y="628" width="0.0250%" height="15" fill="rgb(209,229,26)" fg:x="7128" fg:w="5"/><text x="35.8936%" y="638.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.02%)</title><rect x="35.6536%" y="644" width="0.0150%" height="15" fill="rgb(210,68,23)" fg:x="7130" fg:w="3"/><text x="35.9036%" y="654.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind_inner (17 samples, 0.09%)</title><rect x="35.5886%" y="564" width="0.0850%" height="15" fill="rgb(229,180,13)" fg:x="7117" fg:w="17"/><text x="35.8386%" y="574.50"></text></g><g><title>tokio::util::linked_list::CountedLinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (7 samples, 0.04%)</title><rect x="35.6386%" y="580" width="0.0350%" height="15" fill="rgb(236,53,44)" fg:x="7127" fg:w="7"/><text x="35.8886%" y="590.50"></text></g><g><title>tokio::util::linked_list::LinkedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::push_front (7 samples, 0.04%)</title><rect x="35.6386%" y="596" width="0.0350%" height="15" fill="rgb(244,214,29)" fg:x="7127" fg:w="7"/><text x="35.8886%" y="606.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="35.6736%" y="596" width="0.0100%" height="15" fill="rgb(220,75,29)" fg:x="7134" fg:w="2"/><text x="35.9236%" y="606.50"></text></g><g><title>tokio::runtime::task::core::Cell&lt;T,S&gt;::new (4 samples, 0.02%)</title><rect x="35.6886%" y="596" width="0.0200%" height="15" fill="rgb(214,183,37)" fg:x="7137" fg:w="4"/><text x="35.9386%" y="606.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (26 samples, 0.13%)</title><rect x="35.5836%" y="100" width="0.1300%" height="15" fill="rgb(239,117,29)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="110.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (26 samples, 0.13%)</title><rect x="35.5836%" y="116" width="0.1300%" height="15" fill="rgb(237,171,35)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="126.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (26 samples, 0.13%)</title><rect x="35.5836%" y="132" width="0.1300%" height="15" fill="rgb(229,178,53)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="142.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (26 samples, 0.13%)</title><rect x="35.5836%" y="148" width="0.1300%" height="15" fill="rgb(210,102,19)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="158.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (26 samples, 0.13%)</title><rect x="35.5836%" y="164" width="0.1300%" height="15" fill="rgb(235,127,22)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="174.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="180" width="0.1300%" height="15" fill="rgb(244,31,31)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="190.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="196" width="0.1300%" height="15" fill="rgb(231,43,21)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="206.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="212" width="0.1300%" height="15" fill="rgb(217,131,35)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="222.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="228" width="0.1300%" height="15" fill="rgb(221,149,4)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="238.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="244" width="0.1300%" height="15" fill="rgb(232,170,28)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="254.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="260" width="0.1300%" height="15" fill="rgb(238,56,10)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="270.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="276" width="0.1300%" height="15" fill="rgb(235,196,14)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="286.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="292" width="0.1300%" height="15" fill="rgb(216,45,48)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="302.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (26 samples, 0.13%)</title><rect x="35.5836%" y="308" width="0.1300%" height="15" fill="rgb(238,213,17)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="318.50"></text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="324" width="0.1300%" height="15" fill="rgb(212,13,2)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="334.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="340" width="0.1300%" height="15" fill="rgb(240,114,20)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="350.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="356" width="0.1300%" height="15" fill="rgb(228,41,40)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="366.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (26 samples, 0.13%)</title><rect x="35.5836%" y="372" width="0.1300%" height="15" fill="rgb(244,132,35)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="382.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}} (26 samples, 0.13%)</title><rect x="35.5836%" y="388" width="0.1300%" height="15" fill="rgb(253,189,4)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="398.50"></text></g><g><title>rust_axum::read_users::_{{closure}} (26 samples, 0.13%)</title><rect x="35.5836%" y="404" width="0.1300%" height="15" fill="rgb(224,37,19)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="414.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;&gt; (26 samples, 0.13%)</title><rect x="35.5836%" y="420" width="0.1300%" height="15" fill="rgb(235,223,18)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="430.50"></text></g><g><title>&lt;sqlx_core::pool::connection::PoolConnection&lt;DB&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 0.13%)</title><rect x="35.5836%" y="436" width="0.1300%" height="15" fill="rgb(235,163,25)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="446.50"></text></g><g><title>sqlx_core::rt::spawn (26 samples, 0.13%)</title><rect x="35.5836%" y="452" width="0.1300%" height="15" fill="rgb(217,145,28)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="462.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn (26 samples, 0.13%)</title><rect x="35.5836%" y="468" width="0.1300%" height="15" fill="rgb(223,223,32)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="478.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_named (26 samples, 0.13%)</title><rect x="35.5836%" y="484" width="0.1300%" height="15" fill="rgb(227,189,39)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="494.50"></text></g><g><title>tokio::runtime::scheduler::Handle::spawn (26 samples, 0.13%)</title><rect x="35.5836%" y="500" width="0.1300%" height="15" fill="rgb(248,10,22)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="510.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::spawn (26 samples, 0.13%)</title><rect x="35.5836%" y="516" width="0.1300%" height="15" fill="rgb(248,46,39)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="526.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::handle::Handle::bind_new_task (26 samples, 0.13%)</title><rect x="35.5836%" y="532" width="0.1300%" height="15" fill="rgb(248,113,48)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="542.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::bind (26 samples, 0.13%)</title><rect x="35.5836%" y="548" width="0.1300%" height="15" fill="rgb(245,16,25)" fg:x="7116" fg:w="26"/><text x="35.8336%" y="558.50"></text></g><g><title>tokio::runtime::task::new_task (8 samples, 0.04%)</title><rect x="35.6736%" y="564" width="0.0400%" height="15" fill="rgb(249,152,16)" fg:x="7134" fg:w="8"/><text x="35.9236%" y="574.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::new (8 samples, 0.04%)</title><rect x="35.6736%" y="580" width="0.0400%" height="15" fill="rgb(250,16,1)" fg:x="7134" fg:w="8"/><text x="35.9236%" y="590.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.02%)</title><rect x="35.7536%" y="1108" width="0.0150%" height="15" fill="rgb(249,138,3)" fg:x="7150" fg:w="3"/><text x="36.0036%" y="1118.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::advance (3 samples, 0.02%)</title><rect x="35.7536%" y="1124" width="0.0150%" height="15" fill="rgb(227,71,41)" fg:x="7150" fg:w="3"/><text x="36.0036%" y="1134.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="35.7536%" y="1140" width="0.0150%" height="15" fill="rgb(209,184,23)" fg:x="7150" fg:w="3"/><text x="36.0036%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt; (3 samples, 0.02%)</title><rect x="35.7536%" y="1156" width="0.0150%" height="15" fill="rgb(223,215,31)" fg:x="7150" fg:w="3"/><text x="36.0036%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::BufKind&lt;bytes::bytes::Bytes&gt;&gt; (3 samples, 0.02%)</title><rect x="35.7536%" y="1172" width="0.0150%" height="15" fill="rgb(210,146,28)" fg:x="7150" fg:w="3"/><text x="36.0036%" y="1182.50"></text></g><g><title>bytes::bytes::shared_drop (2 samples, 0.01%)</title><rect x="35.7586%" y="1188" width="0.0100%" height="15" fill="rgb(209,183,41)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1198.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (2 samples, 0.01%)</title><rect x="35.7586%" y="1204" width="0.0100%" height="15" fill="rgb(209,224,45)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1214.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (2 samples, 0.01%)</title><rect x="35.7586%" y="1220" width="0.0100%" height="15" fill="rgb(224,209,51)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1230.50"></text></g><g><title>bytes::bytes::release_shared (2 samples, 0.01%)</title><rect x="35.7586%" y="1236" width="0.0100%" height="15" fill="rgb(223,17,39)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1246.50"></text></g><g><title>core::mem::drop (2 samples, 0.01%)</title><rect x="35.7586%" y="1252" width="0.0100%" height="15" fill="rgb(234,204,37)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1262.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (2 samples, 0.01%)</title><rect x="35.7586%" y="1268" width="0.0100%" height="15" fill="rgb(236,120,5)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1278.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Shared&gt; (2 samples, 0.01%)</title><rect x="35.7586%" y="1284" width="0.0100%" height="15" fill="rgb(248,97,27)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1294.50"></text></g><g><title>&lt;bytes::bytes::Shared as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="35.7586%" y="1300" width="0.0100%" height="15" fill="rgb(240,66,17)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1310.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="35.7586%" y="1316" width="0.0100%" height="15" fill="rgb(210,79,3)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1326.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="35.7586%" y="1332" width="0.0100%" height="15" fill="rgb(214,176,27)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1342.50"></text></g><g><title>__GI___lll_lock_wake_private (2 samples, 0.01%)</title><rect x="35.7586%" y="1348" width="0.0100%" height="15" fill="rgb(235,185,3)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1358.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="35.7586%" y="1364" width="0.0100%" height="15" fill="rgb(227,24,12)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1374.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="35.7586%" y="1380" width="0.0100%" height="15" fill="rgb(252,169,48)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1390.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="35.7586%" y="1396" width="0.0100%" height="15" fill="rgb(212,65,1)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1406.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="35.7586%" y="1412" width="0.0100%" height="15" fill="rgb(242,39,24)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1422.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="35.7586%" y="1428" width="0.0100%" height="15" fill="rgb(249,32,23)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1438.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="35.7586%" y="1444" width="0.0100%" height="15" fill="rgb(251,195,23)" fg:x="7151" fg:w="2"/><text x="36.0086%" y="1454.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="35.7686%" y="1140" width="0.0150%" height="15" fill="rgb(236,174,8)" fg:x="7153" fg:w="3"/><text x="36.0186%" y="1150.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="35.7686%" y="1156" width="0.0150%" height="15" fill="rgb(220,197,8)" fg:x="7153" fg:w="3"/><text x="36.0186%" y="1166.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::chunks_vectored (4 samples, 0.02%)</title><rect x="35.7686%" y="1124" width="0.0200%" height="15" fill="rgb(240,108,37)" fg:x="7153" fg:w="4"/><text x="36.0186%" y="1134.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::chunks_vectored (6 samples, 0.03%)</title><rect x="35.7686%" y="1108" width="0.0300%" height="15" fill="rgb(232,176,24)" fg:x="7153" fg:w="6"/><text x="36.0186%" y="1118.50"></text></g><g><title>bytes::buf::buf_impl::Buf::chunks_vectored (2 samples, 0.01%)</title><rect x="35.7886%" y="1124" width="0.0100%" height="15" fill="rgb(243,35,29)" fg:x="7157" fg:w="2"/><text x="36.0386%" y="1134.50"></text></g><g><title>bytes::buf::buf_impl::Buf::has_remaining (2 samples, 0.01%)</title><rect x="35.7886%" y="1140" width="0.0100%" height="15" fill="rgb(210,37,18)" fg:x="7157" fg:w="2"/><text x="36.0386%" y="1150.50"></text></g><g><title>&lt;hyper::proto::h1::io::Cursor&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (2 samples, 0.01%)</title><rect x="35.7886%" y="1156" width="0.0100%" height="15" fill="rgb(224,184,40)" fg:x="7157" fg:w="2"/><text x="36.0386%" y="1166.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::iter (2 samples, 0.01%)</title><rect x="35.7986%" y="1140" width="0.0100%" height="15" fill="rgb(236,39,29)" fg:x="7159" fg:w="2"/><text x="36.0486%" y="1150.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (8 samples, 0.04%)</title><rect x="35.7986%" y="1124" width="0.0400%" height="15" fill="rgb(232,48,39)" fg:x="7159" fg:w="8"/><text x="36.0486%" y="1134.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (6 samples, 0.03%)</title><rect x="35.8086%" y="1140" width="0.0300%" height="15" fill="rgb(236,34,42)" fg:x="7161" fg:w="6"/><text x="36.0586%" y="1150.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (6 samples, 0.03%)</title><rect x="35.8086%" y="1156" width="0.0300%" height="15" fill="rgb(243,106,37)" fg:x="7161" fg:w="6"/><text x="36.0586%" y="1166.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.03%)</title><rect x="35.8086%" y="1172" width="0.0300%" height="15" fill="rgb(218,96,6)" fg:x="7161" fg:w="6"/><text x="36.0586%" y="1182.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.03%)</title><rect x="35.8086%" y="1188" width="0.0300%" height="15" fill="rgb(235,130,12)" fg:x="7161" fg:w="6"/><text x="36.0586%" y="1198.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (10 samples, 0.05%)</title><rect x="35.7986%" y="1108" width="0.0500%" height="15" fill="rgb(231,95,0)" fg:x="7159" fg:w="10"/><text x="36.0486%" y="1118.50"></text></g><g><title>&lt;hyper::proto::h1::io::Cursor&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (2 samples, 0.01%)</title><rect x="35.8386%" y="1124" width="0.0100%" height="15" fill="rgb(228,12,23)" fg:x="7167" fg:w="2"/><text x="36.0886%" y="1134.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 0.01%)</title><rect x="35.8486%" y="1108" width="0.0100%" height="15" fill="rgb(216,12,1)" fg:x="7169" fg:w="2"/><text x="36.0986%" y="1118.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (2 samples, 0.01%)</title><rect x="35.8486%" y="1124" width="0.0100%" height="15" fill="rgb(219,59,3)" fg:x="7169" fg:w="2"/><text x="36.0986%" y="1134.50"></text></g><g><title>start_thread (30 samples, 0.15%)</title><rect x="35.7136%" y="100" width="0.1500%" height="15" fill="rgb(215,208,46)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="110.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (30 samples, 0.15%)</title><rect x="35.7136%" y="116" width="0.1500%" height="15" fill="rgb(254,224,29)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="126.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (30 samples, 0.15%)</title><rect x="35.7136%" y="132" width="0.1500%" height="15" fill="rgb(232,14,29)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="142.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (30 samples, 0.15%)</title><rect x="35.7136%" y="148" width="0.1500%" height="15" fill="rgb(208,45,52)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="158.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (30 samples, 0.15%)</title><rect x="35.7136%" y="164" width="0.1500%" height="15" fill="rgb(234,191,28)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="174.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="180" width="0.1500%" height="15" fill="rgb(244,67,43)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="190.50"></text></g><g><title>std::panic::catch_unwind (30 samples, 0.15%)</title><rect x="35.7136%" y="196" width="0.1500%" height="15" fill="rgb(236,189,24)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="206.50"></text></g><g><title>std::panicking::try (30 samples, 0.15%)</title><rect x="35.7136%" y="212" width="0.1500%" height="15" fill="rgb(239,214,33)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="222.50"></text></g><g><title>std::panicking::try::do_call (30 samples, 0.15%)</title><rect x="35.7136%" y="228" width="0.1500%" height="15" fill="rgb(226,176,41)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="238.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (30 samples, 0.15%)</title><rect x="35.7136%" y="244" width="0.1500%" height="15" fill="rgb(248,47,8)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="254.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="260" width="0.1500%" height="15" fill="rgb(218,81,44)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="270.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (30 samples, 0.15%)</title><rect x="35.7136%" y="276" width="0.1500%" height="15" fill="rgb(213,98,6)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="286.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="292" width="0.1500%" height="15" fill="rgb(222,85,22)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="302.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (30 samples, 0.15%)</title><rect x="35.7136%" y="308" width="0.1500%" height="15" fill="rgb(239,46,39)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="318.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (30 samples, 0.15%)</title><rect x="35.7136%" y="324" width="0.1500%" height="15" fill="rgb(237,12,29)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="334.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (30 samples, 0.15%)</title><rect x="35.7136%" y="340" width="0.1500%" height="15" fill="rgb(214,77,8)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="350.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="356" width="0.1500%" height="15" fill="rgb(217,168,37)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="366.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="372" width="0.1500%" height="15" fill="rgb(221,217,23)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="382.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (30 samples, 0.15%)</title><rect x="35.7136%" y="388" width="0.1500%" height="15" fill="rgb(243,229,36)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="398.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (30 samples, 0.15%)</title><rect x="35.7136%" y="404" width="0.1500%" height="15" fill="rgb(251,163,40)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="414.50"></text></g><g><title>std::panic::catch_unwind (30 samples, 0.15%)</title><rect x="35.7136%" y="420" width="0.1500%" height="15" fill="rgb(237,222,12)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="430.50"></text></g><g><title>std::panicking::try (30 samples, 0.15%)</title><rect x="35.7136%" y="436" width="0.1500%" height="15" fill="rgb(248,132,6)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="446.50"></text></g><g><title>std::panicking::try::do_call (30 samples, 0.15%)</title><rect x="35.7136%" y="452" width="0.1500%" height="15" fill="rgb(227,167,50)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="462.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (30 samples, 0.15%)</title><rect x="35.7136%" y="468" width="0.1500%" height="15" fill="rgb(242,84,37)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="478.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="484" width="0.1500%" height="15" fill="rgb(212,4,50)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="494.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="500" width="0.1500%" height="15" fill="rgb(230,228,32)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="510.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (30 samples, 0.15%)</title><rect x="35.7136%" y="516" width="0.1500%" height="15" fill="rgb(248,217,23)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="526.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="532" width="0.1500%" height="15" fill="rgb(238,197,32)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="542.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="548" width="0.1500%" height="15" fill="rgb(236,106,1)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="558.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="564" width="0.1500%" height="15" fill="rgb(219,228,13)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="574.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (30 samples, 0.15%)</title><rect x="35.7136%" y="580" width="0.1500%" height="15" fill="rgb(238,30,35)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="590.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (30 samples, 0.15%)</title><rect x="35.7136%" y="596" width="0.1500%" height="15" fill="rgb(236,70,23)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="606.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="612" width="0.1500%" height="15" fill="rgb(249,104,48)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="622.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (30 samples, 0.15%)</title><rect x="35.7136%" y="628" width="0.1500%" height="15" fill="rgb(254,117,50)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="638.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="644" width="0.1500%" height="15" fill="rgb(223,152,4)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="654.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (30 samples, 0.15%)</title><rect x="35.7136%" y="660" width="0.1500%" height="15" fill="rgb(245,6,2)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="670.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (30 samples, 0.15%)</title><rect x="35.7136%" y="676" width="0.1500%" height="15" fill="rgb(249,150,24)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="686.50"></text></g><g><title>tokio::runtime::coop::budget (30 samples, 0.15%)</title><rect x="35.7136%" y="692" width="0.1500%" height="15" fill="rgb(228,185,42)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="702.50"></text></g><g><title>tokio::runtime::coop::with_budget (30 samples, 0.15%)</title><rect x="35.7136%" y="708" width="0.1500%" height="15" fill="rgb(226,39,33)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="724" width="0.1500%" height="15" fill="rgb(221,166,19)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="734.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (30 samples, 0.15%)</title><rect x="35.7136%" y="740" width="0.1500%" height="15" fill="rgb(209,109,2)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="750.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="756" width="0.1500%" height="15" fill="rgb(252,216,26)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="766.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="772" width="0.1500%" height="15" fill="rgb(227,173,36)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="782.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (30 samples, 0.15%)</title><rect x="35.7136%" y="788" width="0.1500%" height="15" fill="rgb(209,90,7)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="798.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (30 samples, 0.15%)</title><rect x="35.7136%" y="804" width="0.1500%" height="15" fill="rgb(250,194,11)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="814.50"></text></g><g><title>std::panic::catch_unwind (30 samples, 0.15%)</title><rect x="35.7136%" y="820" width="0.1500%" height="15" fill="rgb(220,72,50)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="830.50"></text></g><g><title>std::panicking::try (30 samples, 0.15%)</title><rect x="35.7136%" y="836" width="0.1500%" height="15" fill="rgb(222,106,48)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="846.50"></text></g><g><title>std::panicking::try::do_call (30 samples, 0.15%)</title><rect x="35.7136%" y="852" width="0.1500%" height="15" fill="rgb(216,220,45)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="862.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (30 samples, 0.15%)</title><rect x="35.7136%" y="868" width="0.1500%" height="15" fill="rgb(234,112,18)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="878.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="884" width="0.1500%" height="15" fill="rgb(206,179,9)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="894.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="900" width="0.1500%" height="15" fill="rgb(215,115,40)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="910.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (30 samples, 0.15%)</title><rect x="35.7136%" y="916" width="0.1500%" height="15" fill="rgb(222,69,34)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="926.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (30 samples, 0.15%)</title><rect x="35.7136%" y="932" width="0.1500%" height="15" fill="rgb(209,161,10)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="942.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="948" width="0.1500%" height="15" fill="rgb(217,6,38)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="958.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="964" width="0.1500%" height="15" fill="rgb(229,229,48)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="974.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="980" width="0.1500%" height="15" fill="rgb(225,21,28)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="990.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (30 samples, 0.15%)</title><rect x="35.7136%" y="996" width="0.1500%" height="15" fill="rgb(206,33,13)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="1006.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (30 samples, 0.15%)</title><rect x="35.7136%" y="1012" width="0.1500%" height="15" fill="rgb(242,178,17)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="1022.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (30 samples, 0.15%)</title><rect x="35.7136%" y="1028" width="0.1500%" height="15" fill="rgb(220,162,5)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="1038.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (30 samples, 0.15%)</title><rect x="35.7136%" y="1044" width="0.1500%" height="15" fill="rgb(210,33,43)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="1054.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (30 samples, 0.15%)</title><rect x="35.7136%" y="1060" width="0.1500%" height="15" fill="rgb(216,116,54)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="1070.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (30 samples, 0.15%)</title><rect x="35.7136%" y="1076" width="0.1500%" height="15" fill="rgb(249,92,24)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="1086.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (30 samples, 0.15%)</title><rect x="35.7136%" y="1092" width="0.1500%" height="15" fill="rgb(231,189,14)" fg:x="7142" fg:w="30"/><text x="35.9636%" y="1102.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.02%)</title><rect x="35.8636%" y="1092" width="0.0200%" height="15" fill="rgb(230,8,41)" fg:x="7172" fg:w="4"/><text x="36.1136%" y="1102.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::advance (4 samples, 0.02%)</title><rect x="35.8636%" y="1108" width="0.0200%" height="15" fill="rgb(249,7,27)" fg:x="7172" fg:w="4"/><text x="36.1136%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="35.8636%" y="1124" width="0.0200%" height="15" fill="rgb(232,86,5)" fg:x="7172" fg:w="4"/><text x="36.1136%" y="1134.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::EncodedBuf&lt;bytes::bytes::Bytes&gt;&gt; (4 samples, 0.02%)</title><rect x="35.8636%" y="1140" width="0.0200%" height="15" fill="rgb(224,175,18)" fg:x="7172" fg:w="4"/><text x="36.1136%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::encode::BufKind&lt;bytes::bytes::Bytes&gt;&gt; (4 samples, 0.02%)</title><rect x="35.8636%" y="1156" width="0.0200%" height="15" fill="rgb(220,129,12)" fg:x="7172" fg:w="4"/><text x="36.1136%" y="1166.50"></text></g><g><title>bytes::bytes::shared_drop (3 samples, 0.02%)</title><rect x="35.8686%" y="1172" width="0.0150%" height="15" fill="rgb(210,19,36)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1182.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (3 samples, 0.02%)</title><rect x="35.8686%" y="1188" width="0.0150%" height="15" fill="rgb(219,96,14)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1198.50"></text></g><g><title>bytes::bytes::shared_drop::_{{closure}} (3 samples, 0.02%)</title><rect x="35.8686%" y="1204" width="0.0150%" height="15" fill="rgb(249,106,1)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1214.50"></text></g><g><title>bytes::bytes::release_shared (3 samples, 0.02%)</title><rect x="35.8686%" y="1220" width="0.0150%" height="15" fill="rgb(249,155,20)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1230.50"></text></g><g><title>core::mem::drop (3 samples, 0.02%)</title><rect x="35.8686%" y="1236" width="0.0150%" height="15" fill="rgb(244,168,9)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1246.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes::Shared&gt;&gt; (3 samples, 0.02%)</title><rect x="35.8686%" y="1252" width="0.0150%" height="15" fill="rgb(216,23,50)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1262.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Shared&gt; (3 samples, 0.02%)</title><rect x="35.8686%" y="1268" width="0.0150%" height="15" fill="rgb(224,219,20)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1278.50"></text></g><g><title>&lt;bytes::bytes::Shared as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="35.8686%" y="1284" width="0.0150%" height="15" fill="rgb(222,156,15)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1294.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="35.8686%" y="1300" width="0.0150%" height="15" fill="rgb(231,97,17)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1310.50"></text></g><g><title>__GI___libc_free (3 samples, 0.02%)</title><rect x="35.8686%" y="1316" width="0.0150%" height="15" fill="rgb(218,70,48)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1326.50"></text></g><g><title>_int_free (3 samples, 0.02%)</title><rect x="35.8686%" y="1332" width="0.0150%" height="15" fill="rgb(212,196,52)" fg:x="7173" fg:w="3"/><text x="36.1186%" y="1342.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored::_{{closure}} (2 samples, 0.01%)</title><rect x="35.8836%" y="1188" width="0.0100%" height="15" fill="rgb(243,203,18)" fg:x="7176" fg:w="2"/><text x="36.1336%" y="1198.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write_vectored (2 samples, 0.01%)</title><rect x="35.8836%" y="1204" width="0.0100%" height="15" fill="rgb(252,125,41)" fg:x="7176" fg:w="2"/><text x="36.1336%" y="1214.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (8 samples, 0.04%)</title><rect x="35.8636%" y="948" width="0.0400%" height="15" fill="rgb(223,180,33)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="958.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (8 samples, 0.04%)</title><rect x="35.8636%" y="964" width="0.0400%" height="15" fill="rgb(254,159,46)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="974.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.04%)</title><rect x="35.8636%" y="980" width="0.0400%" height="15" fill="rgb(254,38,10)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="990.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (8 samples, 0.04%)</title><rect x="35.8636%" y="996" width="0.0400%" height="15" fill="rgb(208,217,32)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="1006.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (8 samples, 0.04%)</title><rect x="35.8636%" y="1012" width="0.0400%" height="15" fill="rgb(221,120,13)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="1022.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (8 samples, 0.04%)</title><rect x="35.8636%" y="1028" width="0.0400%" height="15" fill="rgb(246,54,52)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="1038.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (8 samples, 0.04%)</title><rect x="35.8636%" y="1044" width="0.0400%" height="15" fill="rgb(242,34,25)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="1054.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (8 samples, 0.04%)</title><rect x="35.8636%" y="1060" width="0.0400%" height="15" fill="rgb(247,209,9)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="1070.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (8 samples, 0.04%)</title><rect x="35.8636%" y="1076" width="0.0400%" height="15" fill="rgb(228,71,26)" fg:x="7172" fg:w="8"/><text x="36.1136%" y="1086.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (4 samples, 0.02%)</title><rect x="35.8836%" y="1092" width="0.0200%" height="15" fill="rgb(222,145,49)" fg:x="7176" fg:w="4"/><text x="36.1336%" y="1102.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_write::AsyncWrite&gt;::poll_write_vectored (4 samples, 0.02%)</title><rect x="35.8836%" y="1108" width="0.0200%" height="15" fill="rgb(218,121,17)" fg:x="7176" fg:w="4"/><text x="36.1336%" y="1118.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv (4 samples, 0.02%)</title><rect x="35.8836%" y="1124" width="0.0200%" height="15" fill="rgb(244,50,7)" fg:x="7176" fg:w="4"/><text x="36.1336%" y="1134.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_write_vectored (4 samples, 0.02%)</title><rect x="35.8836%" y="1140" width="0.0200%" height="15" fill="rgb(246,229,37)" fg:x="7176" fg:w="4"/><text x="36.1336%" y="1150.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_write_io (4 samples, 0.02%)</title><rect x="35.8836%" y="1156" width="0.0200%" height="15" fill="rgb(225,18,5)" fg:x="7176" fg:w="4"/><text x="36.1336%" y="1166.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_io (4 samples, 0.02%)</title><rect x="35.8836%" y="1172" width="0.0200%" height="15" fill="rgb(213,204,8)" fg:x="7176" fg:w="4"/><text x="36.1336%" y="1182.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (2 samples, 0.01%)</title><rect x="35.8936%" y="1188" width="0.0100%" height="15" fill="rgb(238,103,6)" fg:x="7178" fg:w="2"/><text x="36.1436%" y="1198.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (9 samples, 0.05%)</title><rect x="35.8636%" y="100" width="0.0450%" height="15" fill="rgb(222,25,35)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="110.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9 samples, 0.05%)</title><rect x="35.8636%" y="116" width="0.0450%" height="15" fill="rgb(213,203,35)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="126.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (9 samples, 0.05%)</title><rect x="35.8636%" y="132" width="0.0450%" height="15" fill="rgb(221,79,53)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="142.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (9 samples, 0.05%)</title><rect x="35.8636%" y="148" width="0.0450%" height="15" fill="rgb(243,200,35)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="158.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="164" width="0.0450%" height="15" fill="rgb(248,60,25)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="174.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.05%)</title><rect x="35.8636%" y="180" width="0.0450%" height="15" fill="rgb(227,53,46)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="190.50"></text></g><g><title>std::panicking::try (9 samples, 0.05%)</title><rect x="35.8636%" y="196" width="0.0450%" height="15" fill="rgb(216,120,32)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="206.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.05%)</title><rect x="35.8636%" y="212" width="0.0450%" height="15" fill="rgb(220,134,1)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="222.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9 samples, 0.05%)</title><rect x="35.8636%" y="228" width="0.0450%" height="15" fill="rgb(237,168,5)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="238.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="244" width="0.0450%" height="15" fill="rgb(231,100,33)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="254.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 0.05%)</title><rect x="35.8636%" y="260" width="0.0450%" height="15" fill="rgb(236,177,47)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="270.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="276" width="0.0450%" height="15" fill="rgb(235,7,49)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="286.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (9 samples, 0.05%)</title><rect x="35.8636%" y="292" width="0.0450%" height="15" fill="rgb(232,119,22)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="302.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (9 samples, 0.05%)</title><rect x="35.8636%" y="308" width="0.0450%" height="15" fill="rgb(254,73,53)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="318.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (9 samples, 0.05%)</title><rect x="35.8636%" y="324" width="0.0450%" height="15" fill="rgb(251,35,20)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="334.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="340" width="0.0450%" height="15" fill="rgb(241,119,20)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="350.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="356" width="0.0450%" height="15" fill="rgb(207,102,14)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="366.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (9 samples, 0.05%)</title><rect x="35.8636%" y="372" width="0.0450%" height="15" fill="rgb(248,201,50)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="382.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (9 samples, 0.05%)</title><rect x="35.8636%" y="388" width="0.0450%" height="15" fill="rgb(222,185,44)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="398.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.05%)</title><rect x="35.8636%" y="404" width="0.0450%" height="15" fill="rgb(218,107,18)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="414.50"></text></g><g><title>std::panicking::try (9 samples, 0.05%)</title><rect x="35.8636%" y="420" width="0.0450%" height="15" fill="rgb(237,177,39)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="430.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.05%)</title><rect x="35.8636%" y="436" width="0.0450%" height="15" fill="rgb(246,69,6)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="446.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9 samples, 0.05%)</title><rect x="35.8636%" y="452" width="0.0450%" height="15" fill="rgb(234,208,37)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="462.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="468" width="0.0450%" height="15" fill="rgb(225,4,6)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="478.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="484" width="0.0450%" height="15" fill="rgb(233,45,0)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="494.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (9 samples, 0.05%)</title><rect x="35.8636%" y="500" width="0.0450%" height="15" fill="rgb(226,136,5)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="510.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="516" width="0.0450%" height="15" fill="rgb(211,91,47)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="526.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="532" width="0.0450%" height="15" fill="rgb(242,88,51)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="542.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="548" width="0.0450%" height="15" fill="rgb(230,91,28)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="558.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (9 samples, 0.05%)</title><rect x="35.8636%" y="564" width="0.0450%" height="15" fill="rgb(254,186,29)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="574.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (9 samples, 0.05%)</title><rect x="35.8636%" y="580" width="0.0450%" height="15" fill="rgb(238,6,4)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="590.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="596" width="0.0450%" height="15" fill="rgb(221,151,16)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="606.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (9 samples, 0.05%)</title><rect x="35.8636%" y="612" width="0.0450%" height="15" fill="rgb(251,143,52)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="622.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="628" width="0.0450%" height="15" fill="rgb(206,90,15)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="638.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (9 samples, 0.05%)</title><rect x="35.8636%" y="644" width="0.0450%" height="15" fill="rgb(218,35,8)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="654.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (9 samples, 0.05%)</title><rect x="35.8636%" y="660" width="0.0450%" height="15" fill="rgb(239,215,6)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="670.50"></text></g><g><title>tokio::runtime::coop::budget (9 samples, 0.05%)</title><rect x="35.8636%" y="676" width="0.0450%" height="15" fill="rgb(245,116,39)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="686.50"></text></g><g><title>tokio::runtime::coop::with_budget (9 samples, 0.05%)</title><rect x="35.8636%" y="692" width="0.0450%" height="15" fill="rgb(242,65,28)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="708" width="0.0450%" height="15" fill="rgb(252,132,53)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="718.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (9 samples, 0.05%)</title><rect x="35.8636%" y="724" width="0.0450%" height="15" fill="rgb(224,159,50)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="734.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="740" width="0.0450%" height="15" fill="rgb(224,93,4)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="750.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="756" width="0.0450%" height="15" fill="rgb(208,81,34)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="766.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (9 samples, 0.05%)</title><rect x="35.8636%" y="772" width="0.0450%" height="15" fill="rgb(233,92,54)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="782.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (9 samples, 0.05%)</title><rect x="35.8636%" y="788" width="0.0450%" height="15" fill="rgb(237,21,14)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="798.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.05%)</title><rect x="35.8636%" y="804" width="0.0450%" height="15" fill="rgb(249,128,51)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="814.50"></text></g><g><title>std::panicking::try (9 samples, 0.05%)</title><rect x="35.8636%" y="820" width="0.0450%" height="15" fill="rgb(223,129,24)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="830.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.05%)</title><rect x="35.8636%" y="836" width="0.0450%" height="15" fill="rgb(231,168,25)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="846.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9 samples, 0.05%)</title><rect x="35.8636%" y="852" width="0.0450%" height="15" fill="rgb(224,39,20)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="862.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="868" width="0.0450%" height="15" fill="rgb(225,152,53)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="878.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="884" width="0.0450%" height="15" fill="rgb(252,17,24)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="894.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (9 samples, 0.05%)</title><rect x="35.8636%" y="900" width="0.0450%" height="15" fill="rgb(250,114,30)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="910.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (9 samples, 0.05%)</title><rect x="35.8636%" y="916" width="0.0450%" height="15" fill="rgb(229,5,4)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="926.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (9 samples, 0.05%)</title><rect x="35.8636%" y="932" width="0.0450%" height="15" fill="rgb(225,176,49)" fg:x="7172" fg:w="9"/><text x="36.1136%" y="942.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (13 samples, 0.07%)</title><rect x="35.9136%" y="100" width="0.0650%" height="15" fill="rgb(224,221,49)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="110.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (13 samples, 0.07%)</title><rect x="35.9136%" y="116" width="0.0650%" height="15" fill="rgb(253,169,27)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="126.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (13 samples, 0.07%)</title><rect x="35.9136%" y="132" width="0.0650%" height="15" fill="rgb(211,206,16)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="142.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="148" width="0.0650%" height="15" fill="rgb(244,87,35)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="158.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="164" width="0.0650%" height="15" fill="rgb(246,28,10)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="174.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (13 samples, 0.07%)</title><rect x="35.9136%" y="180" width="0.0650%" height="15" fill="rgb(229,12,44)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="190.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (13 samples, 0.07%)</title><rect x="35.9136%" y="196" width="0.0650%" height="15" fill="rgb(210,145,37)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="206.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.07%)</title><rect x="35.9136%" y="212" width="0.0650%" height="15" fill="rgb(227,112,52)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="222.50"></text></g><g><title>std::panicking::try (13 samples, 0.07%)</title><rect x="35.9136%" y="228" width="0.0650%" height="15" fill="rgb(238,155,34)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="238.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.07%)</title><rect x="35.9136%" y="244" width="0.0650%" height="15" fill="rgb(239,226,36)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="254.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 0.07%)</title><rect x="35.9136%" y="260" width="0.0650%" height="15" fill="rgb(230,16,23)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="270.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="276" width="0.0650%" height="15" fill="rgb(236,171,36)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="286.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="292" width="0.0650%" height="15" fill="rgb(221,22,14)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="302.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (13 samples, 0.07%)</title><rect x="35.9136%" y="308" width="0.0650%" height="15" fill="rgb(242,43,11)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="318.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="324" width="0.0650%" height="15" fill="rgb(232,69,23)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="334.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="340" width="0.0650%" height="15" fill="rgb(216,180,54)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="350.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="356" width="0.0650%" height="15" fill="rgb(216,5,24)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="366.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (13 samples, 0.07%)</title><rect x="35.9136%" y="372" width="0.0650%" height="15" fill="rgb(225,89,9)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="382.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (13 samples, 0.07%)</title><rect x="35.9136%" y="388" width="0.0650%" height="15" fill="rgb(243,75,33)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="398.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="404" width="0.0650%" height="15" fill="rgb(247,141,45)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="414.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (13 samples, 0.07%)</title><rect x="35.9136%" y="420" width="0.0650%" height="15" fill="rgb(232,177,36)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="430.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="436" width="0.0650%" height="15" fill="rgb(219,125,36)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="446.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (13 samples, 0.07%)</title><rect x="35.9136%" y="452" width="0.0650%" height="15" fill="rgb(227,94,9)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="462.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (13 samples, 0.07%)</title><rect x="35.9136%" y="468" width="0.0650%" height="15" fill="rgb(240,34,52)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="478.50"></text></g><g><title>tokio::runtime::coop::budget (13 samples, 0.07%)</title><rect x="35.9136%" y="484" width="0.0650%" height="15" fill="rgb(216,45,12)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="494.50"></text></g><g><title>tokio::runtime::coop::with_budget (13 samples, 0.07%)</title><rect x="35.9136%" y="500" width="0.0650%" height="15" fill="rgb(246,21,19)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="510.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="516" width="0.0650%" height="15" fill="rgb(213,98,42)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="526.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (13 samples, 0.07%)</title><rect x="35.9136%" y="532" width="0.0650%" height="15" fill="rgb(250,136,47)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="542.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="548" width="0.0650%" height="15" fill="rgb(251,124,27)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="558.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="564" width="0.0650%" height="15" fill="rgb(229,180,14)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="574.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (13 samples, 0.07%)</title><rect x="35.9136%" y="580" width="0.0650%" height="15" fill="rgb(245,216,25)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="590.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (13 samples, 0.07%)</title><rect x="35.9136%" y="596" width="0.0650%" height="15" fill="rgb(251,43,5)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="606.50"></text></g><g><title>std::panic::catch_unwind (13 samples, 0.07%)</title><rect x="35.9136%" y="612" width="0.0650%" height="15" fill="rgb(250,128,24)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="622.50"></text></g><g><title>std::panicking::try (13 samples, 0.07%)</title><rect x="35.9136%" y="628" width="0.0650%" height="15" fill="rgb(217,117,27)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="638.50"></text></g><g><title>std::panicking::try::do_call (13 samples, 0.07%)</title><rect x="35.9136%" y="644" width="0.0650%" height="15" fill="rgb(245,147,4)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="654.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (13 samples, 0.07%)</title><rect x="35.9136%" y="660" width="0.0650%" height="15" fill="rgb(242,201,35)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="670.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="676" width="0.0650%" height="15" fill="rgb(218,181,1)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="686.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="692" width="0.0650%" height="15" fill="rgb(222,6,29)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="702.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (13 samples, 0.07%)</title><rect x="35.9136%" y="708" width="0.0650%" height="15" fill="rgb(208,186,3)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="718.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (13 samples, 0.07%)</title><rect x="35.9136%" y="724" width="0.0650%" height="15" fill="rgb(216,36,26)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="734.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="740" width="0.0650%" height="15" fill="rgb(248,201,23)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="750.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="756" width="0.0650%" height="15" fill="rgb(251,170,31)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="766.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="772" width="0.0650%" height="15" fill="rgb(207,110,25)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="782.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="788" width="0.0650%" height="15" fill="rgb(250,54,15)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="798.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (13 samples, 0.07%)</title><rect x="35.9136%" y="804" width="0.0650%" height="15" fill="rgb(227,68,33)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="814.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (13 samples, 0.07%)</title><rect x="35.9136%" y="820" width="0.0650%" height="15" fill="rgb(238,34,41)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="830.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (13 samples, 0.07%)</title><rect x="35.9136%" y="836" width="0.0650%" height="15" fill="rgb(220,11,15)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="846.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (13 samples, 0.07%)</title><rect x="35.9136%" y="852" width="0.0650%" height="15" fill="rgb(246,111,35)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="862.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (13 samples, 0.07%)</title><rect x="35.9136%" y="868" width="0.0650%" height="15" fill="rgb(209,88,53)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="878.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="884" width="0.0650%" height="15" fill="rgb(231,185,47)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="894.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (13 samples, 0.07%)</title><rect x="35.9136%" y="900" width="0.0650%" height="15" fill="rgb(233,154,1)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="910.50"></text></g><g><title>&lt;tower::util::boxed_clone::BoxCloneService&lt;T,U,E&gt; as tower_service::Service&lt;T&gt;&gt;::call (13 samples, 0.07%)</title><rect x="35.9136%" y="916" width="0.0650%" height="15" fill="rgb(225,15,46)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="926.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::call (13 samples, 0.07%)</title><rect x="35.9136%" y="932" width="0.0650%" height="15" fill="rgb(211,135,41)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="942.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::call (13 samples, 0.07%)</title><rect x="35.9136%" y="948" width="0.0650%" height="15" fill="rgb(208,54,0)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="958.50"></text></g><g><title>&lt;tower::util::map_response::MapResponse&lt;S,F&gt; as tower_service::Service&lt;Request&gt;&gt;::call (13 samples, 0.07%)</title><rect x="35.9136%" y="964" width="0.0650%" height="15" fill="rgb(244,136,14)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="974.50"></text></g><g><title>&lt;axum::handler::service::HandlerService&lt;H,T,S,B&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (13 samples, 0.07%)</title><rect x="35.9136%" y="980" width="0.0650%" height="15" fill="rgb(241,56,14)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="990.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call (13 samples, 0.07%)</title><rect x="35.9136%" y="996" width="0.0650%" height="15" fill="rgb(205,80,24)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1006.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (13 samples, 0.07%)</title><rect x="35.9136%" y="1012" width="0.0650%" height="15" fill="rgb(220,57,4)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1022.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (13 samples, 0.07%)</title><rect x="35.9136%" y="1028" width="0.0650%" height="15" fill="rgb(226,193,50)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1038.50"></text></g><g><title>alloc::alloc::exchange_malloc (13 samples, 0.07%)</title><rect x="35.9136%" y="1044" width="0.0650%" height="15" fill="rgb(231,168,22)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1054.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.07%)</title><rect x="35.9136%" y="1060" width="0.0650%" height="15" fill="rgb(254,215,14)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1070.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.07%)</title><rect x="35.9136%" y="1076" width="0.0650%" height="15" fill="rgb(211,115,16)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1086.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.07%)</title><rect x="35.9136%" y="1092" width="0.0650%" height="15" fill="rgb(236,210,16)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1102.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.07%)</title><rect x="35.9136%" y="1108" width="0.0650%" height="15" fill="rgb(221,94,12)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1118.50"></text></g><g><title>_int_malloc (13 samples, 0.07%)</title><rect x="35.9136%" y="1124" width="0.0650%" height="15" fill="rgb(235,218,49)" fg:x="7182" fg:w="13"/><text x="36.1636%" y="1134.50"></text></g><g><title>unlink_chunk (2 samples, 0.01%)</title><rect x="35.9686%" y="1140" width="0.0100%" height="15" fill="rgb(217,114,14)" fg:x="7193" fg:w="2"/><text x="36.2186%" y="1150.50"></text></g><g><title>[unknown] (80 samples, 0.40%)</title><rect x="35.9786%" y="836" width="0.4000%" height="15" fill="rgb(216,145,22)" fg:x="7195" fg:w="80"/><text x="36.2286%" y="846.50"></text></g><g><title>[unknown] (76 samples, 0.38%)</title><rect x="35.9986%" y="852" width="0.3800%" height="15" fill="rgb(217,112,39)" fg:x="7199" fg:w="76"/><text x="36.2486%" y="862.50"></text></g><g><title>[unknown] (75 samples, 0.38%)</title><rect x="36.0036%" y="868" width="0.3750%" height="15" fill="rgb(225,85,32)" fg:x="7200" fg:w="75"/><text x="36.2536%" y="878.50"></text></g><g><title>[unknown] (72 samples, 0.36%)</title><rect x="36.0186%" y="884" width="0.3600%" height="15" fill="rgb(245,209,47)" fg:x="7203" fg:w="72"/><text x="36.2686%" y="894.50"></text></g><g><title>[unknown] (71 samples, 0.36%)</title><rect x="36.0236%" y="900" width="0.3550%" height="15" fill="rgb(218,220,15)" fg:x="7204" fg:w="71"/><text x="36.2736%" y="910.50"></text></g><g><title>[unknown] (70 samples, 0.35%)</title><rect x="36.0286%" y="916" width="0.3500%" height="15" fill="rgb(222,202,31)" fg:x="7205" fg:w="70"/><text x="36.2786%" y="926.50"></text></g><g><title>[unknown] (63 samples, 0.32%)</title><rect x="36.0636%" y="932" width="0.3150%" height="15" fill="rgb(243,203,4)" fg:x="7212" fg:w="63"/><text x="36.3136%" y="942.50"></text></g><g><title>[unknown] (56 samples, 0.28%)</title><rect x="36.0986%" y="948" width="0.2800%" height="15" fill="rgb(237,92,17)" fg:x="7219" fg:w="56"/><text x="36.3486%" y="958.50"></text></g><g><title>[unknown] (49 samples, 0.25%)</title><rect x="36.1336%" y="964" width="0.2450%" height="15" fill="rgb(231,119,7)" fg:x="7226" fg:w="49"/><text x="36.3836%" y="974.50"></text></g><g><title>[unknown] (42 samples, 0.21%)</title><rect x="36.1686%" y="980" width="0.2100%" height="15" fill="rgb(237,82,41)" fg:x="7233" fg:w="42"/><text x="36.4186%" y="990.50"></text></g><g><title>[unknown] (27 samples, 0.14%)</title><rect x="36.2436%" y="996" width="0.1350%" height="15" fill="rgb(226,81,48)" fg:x="7248" fg:w="27"/><text x="36.4936%" y="1006.50"></text></g><g><title>[unknown] (20 samples, 0.10%)</title><rect x="36.2786%" y="1012" width="0.1000%" height="15" fill="rgb(234,70,51)" fg:x="7255" fg:w="20"/><text x="36.5286%" y="1022.50"></text></g><g><title>[unknown] (18 samples, 0.09%)</title><rect x="36.2886%" y="1028" width="0.0900%" height="15" fill="rgb(251,86,4)" fg:x="7257" fg:w="18"/><text x="36.5386%" y="1038.50"></text></g><g><title>[unknown] (15 samples, 0.08%)</title><rect x="36.3036%" y="1044" width="0.0750%" height="15" fill="rgb(244,144,28)" fg:x="7260" fg:w="15"/><text x="36.5536%" y="1054.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="36.3436%" y="1060" width="0.0350%" height="15" fill="rgb(232,161,39)" fg:x="7268" fg:w="7"/><text x="36.5936%" y="1070.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="36.3636%" y="1076" width="0.0150%" height="15" fill="rgb(247,34,51)" fg:x="7272" fg:w="3"/><text x="36.6136%" y="1086.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (83 samples, 0.42%)</title><rect x="35.9786%" y="676" width="0.4150%" height="15" fill="rgb(225,132,2)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="686.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (83 samples, 0.42%)</title><rect x="35.9786%" y="692" width="0.4150%" height="15" fill="rgb(209,159,44)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="702.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (83 samples, 0.42%)</title><rect x="35.9786%" y="708" width="0.4150%" height="15" fill="rgb(251,214,1)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="718.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (83 samples, 0.42%)</title><rect x="35.9786%" y="724" width="0.4150%" height="15" fill="rgb(247,84,47)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="734.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (83 samples, 0.42%)</title><rect x="35.9786%" y="740" width="0.4150%" height="15" fill="rgb(240,111,43)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="750.50"></text></g><g><title>std::sys_common::net::TcpStream::read (83 samples, 0.42%)</title><rect x="35.9786%" y="756" width="0.4150%" height="15" fill="rgb(215,214,35)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="766.50"></text></g><g><title>std::sys::unix::net::Socket::read (83 samples, 0.42%)</title><rect x="35.9786%" y="772" width="0.4150%" height="15" fill="rgb(248,207,23)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="782.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (83 samples, 0.42%)</title><rect x="35.9786%" y="788" width="0.4150%" height="15" fill="rgb(214,186,4)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="798.50"></text></g><g><title>__libc_recv (83 samples, 0.42%)</title><rect x="35.9786%" y="804" width="0.4150%" height="15" fill="rgb(220,133,22)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="814.50"></text></g><g><title>__libc_recv (83 samples, 0.42%)</title><rect x="35.9786%" y="820" width="0.4150%" height="15" fill="rgb(239,134,19)" fg:x="7195" fg:w="83"/><text x="36.2286%" y="830.50"></text></g><g><title>__GI___pthread_enable_asynccancel (3 samples, 0.02%)</title><rect x="36.3786%" y="836" width="0.0150%" height="15" fill="rgb(250,140,9)" fg:x="7275" fg:w="3"/><text x="36.6286%" y="846.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (3 samples, 0.02%)</title><rect x="36.4086%" y="692" width="0.0150%" height="15" fill="rgb(225,59,14)" fg:x="7281" fg:w="3"/><text x="36.6586%" y="702.50"></text></g><g><title>tokio::runtime::context::budget (3 samples, 0.02%)</title><rect x="36.4086%" y="708" width="0.0150%" height="15" fill="rgb(214,152,51)" fg:x="7281" fg:w="3"/><text x="36.6586%" y="718.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.02%)</title><rect x="36.4086%" y="724" width="0.0150%" height="15" fill="rgb(251,227,43)" fg:x="7281" fg:w="3"/><text x="36.6586%" y="734.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_read::AsyncRead&gt;::poll_read (97 samples, 0.49%)</title><rect x="35.9786%" y="644" width="0.4850%" height="15" fill="rgb(241,96,17)" fg:x="7195" fg:w="97"/><text x="36.2286%" y="654.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (97 samples, 0.49%)</title><rect x="35.9786%" y="660" width="0.4850%" height="15" fill="rgb(234,198,43)" fg:x="7195" fg:w="97"/><text x="36.2286%" y="670.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (14 samples, 0.07%)</title><rect x="36.3936%" y="676" width="0.0700%" height="15" fill="rgb(220,108,29)" fg:x="7278" fg:w="14"/><text x="36.6436%" y="686.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (8 samples, 0.04%)</title><rect x="36.4236%" y="692" width="0.0400%" height="15" fill="rgb(226,163,33)" fg:x="7284" fg:w="8"/><text x="36.6736%" y="702.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (4 samples, 0.02%)</title><rect x="36.4436%" y="708" width="0.0200%" height="15" fill="rgb(205,194,45)" fg:x="7288" fg:w="4"/><text x="36.6936%" y="718.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (98 samples, 0.49%)</title><rect x="35.9786%" y="100" width="0.4900%" height="15" fill="rgb(206,143,44)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="110.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (98 samples, 0.49%)</title><rect x="35.9786%" y="116" width="0.4900%" height="15" fill="rgb(236,136,36)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="126.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (98 samples, 0.49%)</title><rect x="35.9786%" y="132" width="0.4900%" height="15" fill="rgb(249,172,42)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="142.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (98 samples, 0.49%)</title><rect x="35.9786%" y="148" width="0.4900%" height="15" fill="rgb(216,139,23)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="158.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (98 samples, 0.49%)</title><rect x="35.9786%" y="164" width="0.4900%" height="15" fill="rgb(207,166,20)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="174.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (98 samples, 0.49%)</title><rect x="35.9786%" y="180" width="0.4900%" height="15" fill="rgb(210,209,22)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="190.50"></text></g><g><title>tokio::runtime::coop::budget (98 samples, 0.49%)</title><rect x="35.9786%" y="196" width="0.4900%" height="15" fill="rgb(232,118,20)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="206.50"></text></g><g><title>tokio::runtime::coop::with_budget (98 samples, 0.49%)</title><rect x="35.9786%" y="212" width="0.4900%" height="15" fill="rgb(238,113,42)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="222.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (98 samples, 0.49%)</title><rect x="35.9786%" y="228" width="0.4900%" height="15" fill="rgb(231,42,5)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="238.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (98 samples, 0.49%)</title><rect x="35.9786%" y="244" width="0.4900%" height="15" fill="rgb(243,166,24)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="254.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (98 samples, 0.49%)</title><rect x="35.9786%" y="260" width="0.4900%" height="15" fill="rgb(237,226,12)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="270.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (98 samples, 0.49%)</title><rect x="35.9786%" y="276" width="0.4900%" height="15" fill="rgb(229,133,24)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="286.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (98 samples, 0.49%)</title><rect x="35.9786%" y="292" width="0.4900%" height="15" fill="rgb(238,33,43)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="302.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (98 samples, 0.49%)</title><rect x="35.9786%" y="308" width="0.4900%" height="15" fill="rgb(227,59,38)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="318.50"></text></g><g><title>std::panic::catch_unwind (98 samples, 0.49%)</title><rect x="35.9786%" y="324" width="0.4900%" height="15" fill="rgb(230,97,0)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="334.50"></text></g><g><title>std::panicking::try (98 samples, 0.49%)</title><rect x="35.9786%" y="340" width="0.4900%" height="15" fill="rgb(250,173,50)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="350.50"></text></g><g><title>std::panicking::try::do_call (98 samples, 0.49%)</title><rect x="35.9786%" y="356" width="0.4900%" height="15" fill="rgb(240,15,50)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="366.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (98 samples, 0.49%)</title><rect x="35.9786%" y="372" width="0.4900%" height="15" fill="rgb(221,93,22)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="382.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (98 samples, 0.49%)</title><rect x="35.9786%" y="388" width="0.4900%" height="15" fill="rgb(245,180,53)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="398.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (98 samples, 0.49%)</title><rect x="35.9786%" y="404" width="0.4900%" height="15" fill="rgb(231,88,51)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="414.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (98 samples, 0.49%)</title><rect x="35.9786%" y="420" width="0.4900%" height="15" fill="rgb(240,58,21)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="430.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (98 samples, 0.49%)</title><rect x="35.9786%" y="436" width="0.4900%" height="15" fill="rgb(237,21,10)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="446.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (98 samples, 0.49%)</title><rect x="35.9786%" y="452" width="0.4900%" height="15" fill="rgb(218,43,11)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="462.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (98 samples, 0.49%)</title><rect x="35.9786%" y="468" width="0.4900%" height="15" fill="rgb(218,221,29)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="478.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (98 samples, 0.49%)</title><rect x="35.9786%" y="484" width="0.4900%" height="15" fill="rgb(214,118,42)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="494.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (98 samples, 0.49%)</title><rect x="35.9786%" y="500" width="0.4900%" height="15" fill="rgb(251,200,26)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="510.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (98 samples, 0.49%)</title><rect x="35.9786%" y="516" width="0.4900%" height="15" fill="rgb(237,101,39)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="526.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (98 samples, 0.49%)</title><rect x="35.9786%" y="532" width="0.4900%" height="15" fill="rgb(251,117,11)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="542.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (98 samples, 0.49%)</title><rect x="35.9786%" y="548" width="0.4900%" height="15" fill="rgb(216,223,23)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="558.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (98 samples, 0.49%)</title><rect x="35.9786%" y="564" width="0.4900%" height="15" fill="rgb(251,54,12)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="574.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (98 samples, 0.49%)</title><rect x="35.9786%" y="580" width="0.4900%" height="15" fill="rgb(254,176,54)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="590.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (98 samples, 0.49%)</title><rect x="35.9786%" y="596" width="0.4900%" height="15" fill="rgb(210,32,8)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="606.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (98 samples, 0.49%)</title><rect x="35.9786%" y="612" width="0.4900%" height="15" fill="rgb(235,52,38)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="622.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (98 samples, 0.49%)</title><rect x="35.9786%" y="628" width="0.4900%" height="15" fill="rgb(231,4,44)" fg:x="7195" fg:w="98"/><text x="36.2286%" y="638.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (3 samples, 0.02%)</title><rect x="36.4686%" y="580" width="0.0150%" height="15" fill="rgb(249,2,32)" fg:x="7293" fg:w="3"/><text x="36.7186%" y="590.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (4 samples, 0.02%)</title><rect x="36.4686%" y="100" width="0.0200%" height="15" fill="rgb(224,65,26)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="110.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.02%)</title><rect x="36.4686%" y="116" width="0.0200%" height="15" fill="rgb(250,73,40)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="126.50"></text></g><g><title>tokio::runtime::coop::budget (4 samples, 0.02%)</title><rect x="36.4686%" y="132" width="0.0200%" height="15" fill="rgb(253,177,16)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="142.50"></text></g><g><title>tokio::runtime::coop::with_budget (4 samples, 0.02%)</title><rect x="36.4686%" y="148" width="0.0200%" height="15" fill="rgb(217,32,34)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="158.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4686%" y="164" width="0.0200%" height="15" fill="rgb(212,7,10)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="174.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (4 samples, 0.02%)</title><rect x="36.4686%" y="180" width="0.0200%" height="15" fill="rgb(245,89,8)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="190.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 0.02%)</title><rect x="36.4686%" y="196" width="0.0200%" height="15" fill="rgb(237,16,53)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="206.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.02%)</title><rect x="36.4686%" y="212" width="0.0200%" height="15" fill="rgb(250,204,30)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="222.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 0.02%)</title><rect x="36.4686%" y="228" width="0.0200%" height="15" fill="rgb(208,77,27)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="238.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 0.02%)</title><rect x="36.4686%" y="244" width="0.0200%" height="15" fill="rgb(250,204,28)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="254.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.02%)</title><rect x="36.4686%" y="260" width="0.0200%" height="15" fill="rgb(244,63,21)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="270.50"></text></g><g><title>std::panicking::try (4 samples, 0.02%)</title><rect x="36.4686%" y="276" width="0.0200%" height="15" fill="rgb(236,85,44)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="286.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.02%)</title><rect x="36.4686%" y="292" width="0.0200%" height="15" fill="rgb(215,98,4)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="302.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 0.02%)</title><rect x="36.4686%" y="308" width="0.0200%" height="15" fill="rgb(235,38,11)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="318.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4686%" y="324" width="0.0200%" height="15" fill="rgb(254,186,25)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="334.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.02%)</title><rect x="36.4686%" y="340" width="0.0200%" height="15" fill="rgb(225,55,31)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="350.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.02%)</title><rect x="36.4686%" y="356" width="0.0200%" height="15" fill="rgb(211,15,21)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="366.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4686%" y="372" width="0.0200%" height="15" fill="rgb(215,187,41)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="382.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4686%" y="388" width="0.0200%" height="15" fill="rgb(248,69,32)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="398.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4686%" y="404" width="0.0200%" height="15" fill="rgb(252,102,52)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="414.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4686%" y="420" width="0.0200%" height="15" fill="rgb(253,140,32)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="430.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4686%" y="436" width="0.0200%" height="15" fill="rgb(216,56,42)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="446.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4 samples, 0.02%)</title><rect x="36.4686%" y="452" width="0.0200%" height="15" fill="rgb(216,184,14)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="462.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (4 samples, 0.02%)</title><rect x="36.4686%" y="468" width="0.0200%" height="15" fill="rgb(237,187,27)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="478.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (4 samples, 0.02%)</title><rect x="36.4686%" y="484" width="0.0200%" height="15" fill="rgb(219,65,3)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="494.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (4 samples, 0.02%)</title><rect x="36.4686%" y="500" width="0.0200%" height="15" fill="rgb(245,83,25)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="510.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (4 samples, 0.02%)</title><rect x="36.4686%" y="516" width="0.0200%" height="15" fill="rgb(214,205,45)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="526.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (4 samples, 0.02%)</title><rect x="36.4686%" y="532" width="0.0200%" height="15" fill="rgb(241,20,18)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="542.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (4 samples, 0.02%)</title><rect x="36.4686%" y="548" width="0.0200%" height="15" fill="rgb(232,163,23)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="558.50"></text></g><g><title>&lt;axum::routing::Router&lt;(),B&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (4 samples, 0.02%)</title><rect x="36.4686%" y="564" width="0.0200%" height="15" fill="rgb(214,5,46)" fg:x="7293" fg:w="4"/><text x="36.7186%" y="574.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (4 samples, 0.02%)</title><rect x="36.4886%" y="100" width="0.0200%" height="15" fill="rgb(229,78,17)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="110.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (4 samples, 0.02%)</title><rect x="36.4886%" y="116" width="0.0200%" height="15" fill="rgb(248,89,10)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="126.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4886%" y="132" width="0.0200%" height="15" fill="rgb(248,54,15)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="142.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (4 samples, 0.02%)</title><rect x="36.4886%" y="148" width="0.0200%" height="15" fill="rgb(223,116,6)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="158.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4886%" y="164" width="0.0200%" height="15" fill="rgb(205,125,38)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="174.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (4 samples, 0.02%)</title><rect x="36.4886%" y="180" width="0.0200%" height="15" fill="rgb(251,78,38)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="190.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (4 samples, 0.02%)</title><rect x="36.4886%" y="196" width="0.0200%" height="15" fill="rgb(253,78,28)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="206.50"></text></g><g><title>tokio::runtime::coop::budget (4 samples, 0.02%)</title><rect x="36.4886%" y="212" width="0.0200%" height="15" fill="rgb(209,120,3)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="222.50"></text></g><g><title>tokio::runtime::coop::with_budget (4 samples, 0.02%)</title><rect x="36.4886%" y="228" width="0.0200%" height="15" fill="rgb(238,229,9)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="238.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4886%" y="244" width="0.0200%" height="15" fill="rgb(253,159,18)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="254.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (4 samples, 0.02%)</title><rect x="36.4886%" y="260" width="0.0200%" height="15" fill="rgb(244,42,34)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="270.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (4 samples, 0.02%)</title><rect x="36.4886%" y="276" width="0.0200%" height="15" fill="rgb(224,8,7)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="286.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (4 samples, 0.02%)</title><rect x="36.4886%" y="292" width="0.0200%" height="15" fill="rgb(210,201,45)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="302.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (4 samples, 0.02%)</title><rect x="36.4886%" y="308" width="0.0200%" height="15" fill="rgb(252,185,21)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="318.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (4 samples, 0.02%)</title><rect x="36.4886%" y="324" width="0.0200%" height="15" fill="rgb(223,131,1)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="334.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.02%)</title><rect x="36.4886%" y="340" width="0.0200%" height="15" fill="rgb(245,141,16)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="350.50"></text></g><g><title>std::panicking::try (4 samples, 0.02%)</title><rect x="36.4886%" y="356" width="0.0200%" height="15" fill="rgb(229,55,45)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="366.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.02%)</title><rect x="36.4886%" y="372" width="0.0200%" height="15" fill="rgb(208,92,15)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="382.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (4 samples, 0.02%)</title><rect x="36.4886%" y="388" width="0.0200%" height="15" fill="rgb(234,185,47)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="398.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4886%" y="404" width="0.0200%" height="15" fill="rgb(253,104,50)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="414.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (4 samples, 0.02%)</title><rect x="36.4886%" y="420" width="0.0200%" height="15" fill="rgb(205,70,7)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="430.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (4 samples, 0.02%)</title><rect x="36.4886%" y="436" width="0.0200%" height="15" fill="rgb(240,178,43)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="446.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4886%" y="452" width="0.0200%" height="15" fill="rgb(214,112,2)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="462.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4886%" y="468" width="0.0200%" height="15" fill="rgb(206,46,17)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="478.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4886%" y="484" width="0.0200%" height="15" fill="rgb(225,220,16)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="494.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4886%" y="500" width="0.0200%" height="15" fill="rgb(238,65,40)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="510.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="36.4886%" y="516" width="0.0200%" height="15" fill="rgb(230,151,21)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="526.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (4 samples, 0.02%)</title><rect x="36.4886%" y="532" width="0.0200%" height="15" fill="rgb(218,58,49)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="542.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (4 samples, 0.02%)</title><rect x="36.4886%" y="548" width="0.0200%" height="15" fill="rgb(219,179,14)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="558.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (4 samples, 0.02%)</title><rect x="36.4886%" y="564" width="0.0200%" height="15" fill="rgb(223,72,1)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="574.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (4 samples, 0.02%)</title><rect x="36.4886%" y="580" width="0.0200%" height="15" fill="rgb(238,126,10)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="590.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (4 samples, 0.02%)</title><rect x="36.4886%" y="596" width="0.0200%" height="15" fill="rgb(224,206,38)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="606.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (4 samples, 0.02%)</title><rect x="36.4886%" y="612" width="0.0200%" height="15" fill="rgb(212,201,54)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="622.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (4 samples, 0.02%)</title><rect x="36.4886%" y="628" width="0.0200%" height="15" fill="rgb(218,154,48)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="638.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (4 samples, 0.02%)</title><rect x="36.4886%" y="644" width="0.0200%" height="15" fill="rgb(232,93,24)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="654.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_read::AsyncRead&gt;::poll_read (4 samples, 0.02%)</title><rect x="36.4886%" y="660" width="0.0200%" height="15" fill="rgb(245,30,21)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="670.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (4 samples, 0.02%)</title><rect x="36.4886%" y="676" width="0.0200%" height="15" fill="rgb(242,148,29)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="686.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (4 samples, 0.02%)</title><rect x="36.4886%" y="692" width="0.0200%" height="15" fill="rgb(244,153,54)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="702.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (4 samples, 0.02%)</title><rect x="36.4886%" y="708" width="0.0200%" height="15" fill="rgb(252,87,22)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="718.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (4 samples, 0.02%)</title><rect x="36.4886%" y="724" width="0.0200%" height="15" fill="rgb(210,51,29)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="734.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (4 samples, 0.02%)</title><rect x="36.4886%" y="740" width="0.0200%" height="15" fill="rgb(242,136,47)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="750.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (4 samples, 0.02%)</title><rect x="36.4886%" y="756" width="0.0200%" height="15" fill="rgb(238,68,4)" fg:x="7297" fg:w="4"/><text x="36.7386%" y="766.50"></text></g><g><title>std::sys_common::net::TcpStream::read (3 samples, 0.02%)</title><rect x="36.4936%" y="772" width="0.0150%" height="15" fill="rgb(242,161,30)" fg:x="7298" fg:w="3"/><text x="36.7436%" y="782.50"></text></g><g><title>std::sys::unix::net::Socket::read (3 samples, 0.02%)</title><rect x="36.4936%" y="788" width="0.0150%" height="15" fill="rgb(218,58,44)" fg:x="7298" fg:w="3"/><text x="36.7436%" y="798.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (3 samples, 0.02%)</title><rect x="36.4936%" y="804" width="0.0150%" height="15" fill="rgb(252,125,32)" fg:x="7298" fg:w="3"/><text x="36.7436%" y="814.50"></text></g><g><title>__libc_recv (3 samples, 0.02%)</title><rect x="36.4936%" y="820" width="0.0150%" height="15" fill="rgb(219,178,0)" fg:x="7298" fg:w="3"/><text x="36.7436%" y="830.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::rt::JoinHandle&lt;()&gt;&gt; (4 samples, 0.02%)</title><rect x="36.5137%" y="564" width="0.0200%" height="15" fill="rgb(213,152,7)" fg:x="7302" fg:w="4"/><text x="36.7637%" y="574.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::join::JoinHandle&lt;()&gt;&gt; (4 samples, 0.02%)</title><rect x="36.5137%" y="580" width="0.0200%" height="15" fill="rgb(249,109,34)" fg:x="7302" fg:w="4"/><text x="36.7637%" y="590.50"></text></g><g><title>&lt;tokio::runtime::task::join::JoinHandle&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="36.5137%" y="596" width="0.0200%" height="15" fill="rgb(232,96,21)" fg:x="7302" fg:w="4"/><text x="36.7637%" y="606.50"></text></g><g><title>tokio::runtime::task::state::State::drop_join_handle_fast (4 samples, 0.02%)</title><rect x="36.5137%" y="612" width="0.0200%" height="15" fill="rgb(228,27,39)" fg:x="7302" fg:w="4"/><text x="36.7637%" y="622.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (3 samples, 0.02%)</title><rect x="36.5187%" y="628" width="0.0150%" height="15" fill="rgb(211,182,52)" fg:x="7303" fg:w="3"/><text x="36.7687%" y="638.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (3 samples, 0.02%)</title><rect x="36.5187%" y="644" width="0.0150%" height="15" fill="rgb(234,178,38)" fg:x="7303" fg:w="3"/><text x="36.7687%" y="654.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.01%)</title><rect x="36.5337%" y="612" width="0.0100%" height="15" fill="rgb(221,111,3)" fg:x="7306" fg:w="2"/><text x="36.7837%" y="622.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;&gt; (9 samples, 0.05%)</title><rect x="36.5137%" y="532" width="0.0450%" height="15" fill="rgb(228,175,21)" fg:x="7302" fg:w="9"/><text x="36.7637%" y="542.50"></text></g><g><title>&lt;sqlx_core::pool::connection::PoolConnection&lt;DB&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.05%)</title><rect x="36.5137%" y="548" width="0.0450%" height="15" fill="rgb(228,174,43)" fg:x="7302" fg:w="9"/><text x="36.7637%" y="558.50"></text></g><g><title>sqlx_core::pool::connection::PoolConnection&lt;DB&gt;::return_to_pool (5 samples, 0.03%)</title><rect x="36.5337%" y="564" width="0.0250%" height="15" fill="rgb(211,191,0)" fg:x="7306" fg:w="5"/><text x="36.7837%" y="574.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.03%)</title><rect x="36.5337%" y="580" width="0.0250%" height="15" fill="rgb(253,117,3)" fg:x="7306" fg:w="5"/><text x="36.7837%" y="590.50"></text></g><g><title>sqlx_core::pool::connection::PoolConnection&lt;DB&gt;::return_to_pool::_{{closure}} (5 samples, 0.03%)</title><rect x="36.5337%" y="596" width="0.0250%" height="15" fill="rgb(241,127,19)" fg:x="7306" fg:w="5"/><text x="36.7837%" y="606.50"></text></g><g><title>sqlx_core::pool::connection::Live&lt;DB&gt;::float (3 samples, 0.02%)</title><rect x="36.5437%" y="612" width="0.0150%" height="15" fill="rgb(218,103,12)" fg:x="7308" fg:w="3"/><text x="36.7937%" y="622.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="36.5487%" y="628" width="0.0100%" height="15" fill="rgb(236,214,43)" fg:x="7309" fg:w="2"/><text x="36.7987%" y="638.50"></text></g><g><title>__GI___lll_lock_wait_private (4 samples, 0.02%)</title><rect x="36.9787%" y="1012" width="0.0200%" height="15" fill="rgb(244,144,19)" fg:x="7395" fg:w="4"/><text x="37.2287%" y="1022.50"></text></g><g><title>futex_wait (4 samples, 0.02%)</title><rect x="36.9787%" y="1028" width="0.0200%" height="15" fill="rgb(246,188,10)" fg:x="7395" fg:w="4"/><text x="37.2287%" y="1038.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="36.9787%" y="1044" width="0.0200%" height="15" fill="rgb(212,193,33)" fg:x="7395" fg:w="4"/><text x="37.2287%" y="1054.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="36.9837%" y="1060" width="0.0150%" height="15" fill="rgb(241,51,29)" fg:x="7396" fg:w="3"/><text x="37.2337%" y="1070.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="36.9837%" y="1076" width="0.0150%" height="15" fill="rgb(211,58,19)" fg:x="7396" fg:w="3"/><text x="37.2337%" y="1086.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="36.9837%" y="1092" width="0.0150%" height="15" fill="rgb(229,111,26)" fg:x="7396" fg:w="3"/><text x="37.2337%" y="1102.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="36.9837%" y="1108" width="0.0150%" height="15" fill="rgb(213,115,40)" fg:x="7396" fg:w="3"/><text x="37.2337%" y="1118.50"></text></g><g><title>__GI___lll_lock_wake_private (4 samples, 0.02%)</title><rect x="36.9987%" y="1012" width="0.0200%" height="15" fill="rgb(209,56,44)" fg:x="7399" fg:w="4"/><text x="37.2487%" y="1022.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="36.9987%" y="1028" width="0.0200%" height="15" fill="rgb(230,108,32)" fg:x="7399" fg:w="4"/><text x="37.2487%" y="1038.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="37.0037%" y="1044" width="0.0150%" height="15" fill="rgb(216,165,31)" fg:x="7400" fg:w="3"/><text x="37.2537%" y="1054.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="37.0037%" y="1060" width="0.0150%" height="15" fill="rgb(218,122,21)" fg:x="7400" fg:w="3"/><text x="37.2537%" y="1070.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="37.0037%" y="1076" width="0.0150%" height="15" fill="rgb(223,224,47)" fg:x="7400" fg:w="3"/><text x="37.2537%" y="1086.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="37.0037%" y="1092" width="0.0150%" height="15" fill="rgb(238,102,44)" fg:x="7400" fg:w="3"/><text x="37.2537%" y="1102.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="37.0037%" y="1108" width="0.0150%" height="15" fill="rgb(236,46,40)" fg:x="7400" fg:w="3"/><text x="37.2537%" y="1118.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="37.0087%" y="1124" width="0.0100%" height="15" fill="rgb(247,202,50)" fg:x="7401" fg:w="2"/><text x="37.2587%" y="1134.50"></text></g><g><title>alloc_perturb (2 samples, 0.01%)</title><rect x="37.6138%" y="1028" width="0.0100%" height="15" fill="rgb(209,99,20)" fg:x="7522" fg:w="2"/><text x="37.8638%" y="1038.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="37.6288%" y="1028" width="0.0100%" height="15" fill="rgb(252,27,34)" fg:x="7525" fg:w="2"/><text x="37.8788%" y="1038.50"></text></g><g><title>tcache_put (5 samples, 0.03%)</title><rect x="37.6388%" y="1028" width="0.0250%" height="15" fill="rgb(215,206,23)" fg:x="7527" fg:w="5"/><text x="37.8888%" y="1038.50"></text></g><g><title>_int_malloc (154 samples, 0.77%)</title><rect x="37.0187%" y="1012" width="0.7701%" height="15" fill="rgb(212,135,36)" fg:x="7403" fg:w="154"/><text x="37.2687%" y="1022.50"></text></g><g><title>unlink_chunk (25 samples, 0.13%)</title><rect x="37.6638%" y="1028" width="0.1250%" height="15" fill="rgb(240,189,1)" fg:x="7532" fg:w="25"/><text x="37.9138%" y="1038.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::park (251 samples, 1.26%)</title><rect x="36.5587%" y="868" width="1.2551%" height="15" fill="rgb(242,56,20)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="878.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (251 samples, 1.26%)</title><rect x="36.5587%" y="884" width="1.2551%" height="15" fill="rgb(247,132,33)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="894.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (251 samples, 1.26%)</title><rect x="36.5587%" y="900" width="1.2551%" height="15" fill="rgb(208,149,11)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="910.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (251 samples, 1.26%)</title><rect x="36.5587%" y="916" width="1.2551%" height="15" fill="rgb(211,33,11)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="926.50"></text></g><g><title>alloc::alloc::exchange_malloc (251 samples, 1.26%)</title><rect x="36.5587%" y="932" width="1.2551%" height="15" fill="rgb(221,29,38)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="942.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (251 samples, 1.26%)</title><rect x="36.5587%" y="948" width="1.2551%" height="15" fill="rgb(206,182,49)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="958.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (251 samples, 1.26%)</title><rect x="36.5587%" y="964" width="1.2551%" height="15" fill="rgb(216,140,1)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="974.50"></text></g><g><title>alloc::alloc::alloc (251 samples, 1.26%)</title><rect x="36.5587%" y="980" width="1.2551%" height="15" fill="rgb(232,57,40)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="990.50"></text></g><g><title>__GI___libc_malloc (251 samples, 1.26%)</title><rect x="36.5587%" y="996" width="1.2551%" height="15" fill="rgb(224,186,18)" fg:x="7311" fg:w="251"/><text x="36.8087%" y="1006.50"></text></g><g><title>arena_for_chunk (5 samples, 0.03%)</title><rect x="37.7888%" y="1012" width="0.0250%" height="15" fill="rgb(215,121,11)" fg:x="7557" fg:w="5"/><text x="38.0388%" y="1022.50"></text></g><g><title>arena_for_chunk (5 samples, 0.03%)</title><rect x="37.7888%" y="1028" width="0.0250%" height="15" fill="rgb(245,147,10)" fg:x="7557" fg:w="5"/><text x="38.0388%" y="1038.50"></text></g><g><title>heap_for_ptr (4 samples, 0.02%)</title><rect x="37.7938%" y="1044" width="0.0200%" height="15" fill="rgb(238,153,13)" fg:x="7558" fg:w="4"/><text x="38.0438%" y="1054.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::do_send_b (283 samples, 1.42%)</title><rect x="36.5587%" y="852" width="1.4151%" height="15" fill="rgb(233,108,0)" fg:x="7311" fg:w="283"/><text x="36.8087%" y="862.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::queue_push_and_signal (32 samples, 0.16%)</title><rect x="37.8138%" y="868" width="0.1600%" height="15" fill="rgb(212,157,17)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="878.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (32 samples, 0.16%)</title><rect x="37.8138%" y="884" width="0.1600%" height="15" fill="rgb(225,213,38)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="894.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (32 samples, 0.16%)</title><rect x="37.8138%" y="900" width="0.1600%" height="15" fill="rgb(248,16,11)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="910.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (32 samples, 0.16%)</title><rect x="37.8138%" y="916" width="0.1600%" height="15" fill="rgb(241,33,4)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="926.50"></text></g><g><title>alloc::alloc::exchange_malloc (32 samples, 0.16%)</title><rect x="37.8138%" y="932" width="0.1600%" height="15" fill="rgb(222,26,43)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="942.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 0.16%)</title><rect x="37.8138%" y="948" width="0.1600%" height="15" fill="rgb(243,29,36)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="958.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 0.16%)</title><rect x="37.8138%" y="964" width="0.1600%" height="15" fill="rgb(241,9,27)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="974.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 0.16%)</title><rect x="37.8138%" y="980" width="0.1600%" height="15" fill="rgb(205,117,26)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="990.50"></text></g><g><title>__GI___libc_malloc (32 samples, 0.16%)</title><rect x="37.8138%" y="996" width="0.1600%" height="15" fill="rgb(209,80,39)" fg:x="7562" fg:w="32"/><text x="38.0638%" y="1006.50"></text></g><g><title>tcache_get (9 samples, 0.05%)</title><rect x="37.9288%" y="1012" width="0.0450%" height="15" fill="rgb(239,155,6)" fg:x="7585" fg:w="9"/><text x="38.1788%" y="1022.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (286 samples, 1.43%)</title><rect x="36.5587%" y="740" width="1.4301%" height="15" fill="rgb(212,104,12)" fg:x="7311" fg:w="286"/><text x="36.8087%" y="750.50"></text></g><g><title>&lt;futures_util::sink::feed::Feed&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (286 samples, 1.43%)</title><rect x="36.5587%" y="756" width="1.4301%" height="15" fill="rgb(234,204,3)" fg:x="7311" fg:w="286"/><text x="36.8087%" y="766.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (286 samples, 1.43%)</title><rect x="36.5587%" y="772" width="1.4301%" height="15" fill="rgb(251,218,7)" fg:x="7311" fg:w="286"/><text x="36.8087%" y="782.50"></text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::start_send (286 samples, 1.43%)</title><rect x="36.5587%" y="788" width="1.4301%" height="15" fill="rgb(221,81,32)" fg:x="7311" fg:w="286"/><text x="36.8087%" y="798.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::start_send (286 samples, 1.43%)</title><rect x="36.5587%" y="804" width="1.4301%" height="15" fill="rgb(214,152,26)" fg:x="7311" fg:w="286"/><text x="36.8087%" y="814.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (286 samples, 1.43%)</title><rect x="36.5587%" y="820" width="1.4301%" height="15" fill="rgb(223,22,3)" fg:x="7311" fg:w="286"/><text x="36.8087%" y="830.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (286 samples, 1.43%)</title><rect x="36.5587%" y="836" width="1.4301%" height="15" fill="rgb(207,174,7)" fg:x="7311" fg:w="286"/><text x="36.8087%" y="846.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (3 samples, 0.02%)</title><rect x="37.9738%" y="852" width="0.0150%" height="15" fill="rgb(224,19,52)" fg:x="7594" fg:w="3"/><text x="38.2238%" y="862.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17he15746afdfa2baffE.llvm.14649322283256066022 (3 samples, 0.02%)</title><rect x="37.9888%" y="852" width="0.0150%" height="15" fill="rgb(228,24,14)" fg:x="7597" fg:w="3"/><text x="38.2388%" y="862.50"></text></g><g><title>_ZN15futures_channel4mpsc17Receiver$LT$T$GT$12next_message17he15746afdfa2baffE.llvm.14649322283256066022 (6 samples, 0.03%)</title><rect x="38.4438%" y="900" width="0.0300%" height="15" fill="rgb(230,153,43)" fg:x="7688" fg:w="6"/><text x="38.6938%" y="910.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (9 samples, 0.05%)</title><rect x="38.4438%" y="868" width="0.0450%" height="15" fill="rgb(231,106,12)" fg:x="7688" fg:w="9"/><text x="38.6938%" y="878.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (9 samples, 0.05%)</title><rect x="38.4438%" y="884" width="0.0450%" height="15" fill="rgb(215,92,2)" fg:x="7688" fg:w="9"/><text x="38.6938%" y="894.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="38.4738%" y="900" width="0.0150%" height="15" fill="rgb(249,143,25)" fg:x="7694" fg:w="3"/><text x="38.7238%" y="910.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (10 samples, 0.05%)</title><rect x="38.4888%" y="868" width="0.0500%" height="15" fill="rgb(252,7,35)" fg:x="7697" fg:w="10"/><text x="38.7388%" y="878.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="38.5439%" y="916" width="0.0100%" height="15" fill="rgb(216,69,40)" fg:x="7708" fg:w="2"/><text x="38.7939%" y="926.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="38.5539%" y="1012" width="0.0100%" height="15" fill="rgb(240,36,33)" fg:x="7710" fg:w="2"/><text x="38.8039%" y="1022.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="38.5539%" y="1028" width="0.0100%" height="15" fill="rgb(231,128,14)" fg:x="7710" fg:w="2"/><text x="38.8039%" y="1038.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="38.5539%" y="1044" width="0.0100%" height="15" fill="rgb(245,143,14)" fg:x="7710" fg:w="2"/><text x="38.8039%" y="1054.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="38.5539%" y="1060" width="0.0100%" height="15" fill="rgb(222,130,28)" fg:x="7710" fg:w="2"/><text x="38.8039%" y="1070.50"></text></g><g><title>core::mem::drop (3 samples, 0.02%)</title><rect x="38.5539%" y="980" width="0.0150%" height="15" fill="rgb(212,10,48)" fg:x="7710" fg:w="3"/><text x="38.8039%" y="990.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="38.5539%" y="996" width="0.0150%" height="15" fill="rgb(254,118,45)" fg:x="7710" fg:w="3"/><text x="38.8039%" y="1006.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::queue::Queue&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="38.5539%" y="948" width="0.0200%" height="15" fill="rgb(228,6,45)" fg:x="7710" fg:w="4"/><text x="38.8039%" y="958.50"></text></g><g><title>&lt;futures_channel::mpsc::queue::Queue&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="38.5539%" y="964" width="0.0200%" height="15" fill="rgb(241,18,35)" fg:x="7710" fg:w="4"/><text x="38.8039%" y="974.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt;&gt; (8 samples, 0.04%)</title><rect x="38.5389%" y="868" width="0.0400%" height="15" fill="rgb(227,214,53)" fg:x="7707" fg:w="8"/><text x="38.7889%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (8 samples, 0.04%)</title><rect x="38.5389%" y="884" width="0.0400%" height="15" fill="rgb(224,107,51)" fg:x="7707" fg:w="8"/><text x="38.7889%" y="894.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="38.5389%" y="900" width="0.0400%" height="15" fill="rgb(248,60,28)" fg:x="7707" fg:w="8"/><text x="38.7889%" y="910.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.03%)</title><rect x="38.5539%" y="916" width="0.0250%" height="15" fill="rgb(249,101,23)" fg:x="7710" fg:w="5"/><text x="38.8039%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="38.5539%" y="932" width="0.0250%" height="15" fill="rgb(228,51,19)" fg:x="7710" fg:w="5"/><text x="38.8039%" y="942.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt; (41 samples, 0.21%)</title><rect x="38.6039%" y="884" width="0.2050%" height="15" fill="rgb(213,20,6)" fg:x="7720" fg:w="41"/><text x="38.8539%" y="894.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.21%)</title><rect x="38.6039%" y="900" width="0.2050%" height="15" fill="rgb(212,124,10)" fg:x="7720" fg:w="41"/><text x="38.8539%" y="910.50"></text></g><g><title>std::sync::poison::Flag::done (5 samples, 0.03%)</title><rect x="38.8089%" y="916" width="0.0250%" height="15" fill="rgb(248,3,40)" fg:x="7761" fg:w="5"/><text x="39.0589%" y="926.50"></text></g><g><title>std::thread::panicking (4 samples, 0.02%)</title><rect x="38.8139%" y="932" width="0.0200%" height="15" fill="rgb(223,178,23)" fg:x="7762" fg:w="4"/><text x="39.0639%" y="942.50"></text></g><g><title>std::panicking::panicking (4 samples, 0.02%)</title><rect x="38.8139%" y="948" width="0.0200%" height="15" fill="rgb(240,132,45)" fg:x="7762" fg:w="4"/><text x="39.0639%" y="958.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (4 samples, 0.02%)</title><rect x="38.8139%" y="964" width="0.0200%" height="15" fill="rgb(245,164,36)" fg:x="7762" fg:w="4"/><text x="39.0639%" y="974.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.23%)</title><rect x="38.8089%" y="900" width="0.2300%" height="15" fill="rgb(231,188,53)" fg:x="7761" fg:w="46"/><text x="39.0589%" y="910.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (41 samples, 0.21%)</title><rect x="38.8339%" y="916" width="0.2050%" height="15" fill="rgb(237,198,39)" fg:x="7766" fg:w="41"/><text x="39.0839%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (47 samples, 0.24%)</title><rect x="38.8089%" y="884" width="0.2350%" height="15" fill="rgb(223,120,35)" fg:x="7761" fg:w="47"/><text x="39.0589%" y="894.50"></text></g><g><title>futures_channel::mpsc::SenderTask::notify (6 samples, 0.03%)</title><rect x="39.0439%" y="884" width="0.0300%" height="15" fill="rgb(253,107,49)" fg:x="7808" fg:w="6"/><text x="39.2939%" y="894.50"></text></g><g><title>_int_free (36 samples, 0.18%)</title><rect x="39.2089%" y="1012" width="0.1800%" height="15" fill="rgb(216,44,31)" fg:x="7841" fg:w="36"/><text x="39.4589%" y="1022.50"></text></g><g><title>tcache_put (5 samples, 0.03%)</title><rect x="39.3639%" y="1028" width="0.0250%" height="15" fill="rgb(253,87,21)" fg:x="7872" fg:w="5"/><text x="39.6139%" y="1038.50"></text></g><g><title>__GI___libc_free (65 samples, 0.33%)</title><rect x="39.0989%" y="996" width="0.3250%" height="15" fill="rgb(226,18,2)" fg:x="7819" fg:w="65"/><text x="39.3489%" y="1006.50"></text></g><g><title>arena_for_chunk (7 samples, 0.04%)</title><rect x="39.3889%" y="1012" width="0.0350%" height="15" fill="rgb(216,8,46)" fg:x="7877" fg:w="7"/><text x="39.6389%" y="1022.50"></text></g><g><title>arena_for_chunk (6 samples, 0.03%)</title><rect x="39.3939%" y="1028" width="0.0300%" height="15" fill="rgb(226,140,39)" fg:x="7878" fg:w="6"/><text x="39.6439%" y="1038.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.03%)</title><rect x="39.4239%" y="996" width="0.0250%" height="15" fill="rgb(221,194,54)" fg:x="7884" fg:w="5"/><text x="39.6739%" y="1006.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.03%)</title><rect x="39.4239%" y="1012" width="0.0250%" height="15" fill="rgb(213,92,11)" fg:x="7884" fg:w="5"/><text x="39.6739%" y="1022.50"></text></g><g><title>core::mem::drop (79 samples, 0.40%)</title><rect x="39.0989%" y="916" width="0.3950%" height="15" fill="rgb(229,162,46)" fg:x="7819" fg:w="79"/><text x="39.3489%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt;&gt;&gt; (79 samples, 0.40%)</title><rect x="39.0989%" y="932" width="0.3950%" height="15" fill="rgb(214,111,36)" fg:x="7819" fg:w="79"/><text x="39.3489%" y="942.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (79 samples, 0.40%)</title><rect x="39.0989%" y="948" width="0.3950%" height="15" fill="rgb(207,6,21)" fg:x="7819" fg:w="79"/><text x="39.3489%" y="958.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 0.40%)</title><rect x="39.0989%" y="964" width="0.3950%" height="15" fill="rgb(213,127,38)" fg:x="7819" fg:w="79"/><text x="39.3489%" y="974.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.40%)</title><rect x="39.0989%" y="980" width="0.3950%" height="15" fill="rgb(238,118,32)" fg:x="7819" fg:w="79"/><text x="39.3489%" y="990.50"></text></g><g><title>__rust_dealloc (9 samples, 0.05%)</title><rect x="39.4489%" y="996" width="0.0450%" height="15" fill="rgb(240,139,39)" fg:x="7889" fg:w="9"/><text x="39.6989%" y="1006.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (85 samples, 0.43%)</title><rect x="39.0739%" y="884" width="0.4250%" height="15" fill="rgb(235,10,37)" fg:x="7814" fg:w="85"/><text x="39.3239%" y="894.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (82 samples, 0.41%)</title><rect x="39.0889%" y="900" width="0.4100%" height="15" fill="rgb(249,171,38)" fg:x="7817" fg:w="82"/><text x="39.3389%" y="910.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="39.4989%" y="900" width="0.0200%" height="15" fill="rgb(242,144,32)" fg:x="7899" fg:w="4"/><text x="39.7489%" y="910.50"></text></g><g><title>std::sync::poison::Flag::guard (4 samples, 0.02%)</title><rect x="39.4989%" y="916" width="0.0200%" height="15" fill="rgb(217,117,21)" fg:x="7899" fg:w="4"/><text x="39.7489%" y="926.50"></text></g><g><title>std::thread::panicking (4 samples, 0.02%)</title><rect x="39.4989%" y="932" width="0.0200%" height="15" fill="rgb(249,87,1)" fg:x="7899" fg:w="4"/><text x="39.7489%" y="942.50"></text></g><g><title>std::panicking::panicking (4 samples, 0.02%)</title><rect x="39.4989%" y="948" width="0.0200%" height="15" fill="rgb(248,196,48)" fg:x="7899" fg:w="4"/><text x="39.7489%" y="958.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (4 samples, 0.02%)</title><rect x="39.4989%" y="964" width="0.0200%" height="15" fill="rgb(251,206,33)" fg:x="7899" fg:w="4"/><text x="39.7489%" y="974.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (17 samples, 0.09%)</title><rect x="39.4989%" y="884" width="0.0850%" height="15" fill="rgb(232,141,28)" fg:x="7899" fg:w="17"/><text x="39.7489%" y="894.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (13 samples, 0.07%)</title><rect x="39.5190%" y="900" width="0.0650%" height="15" fill="rgb(209,167,14)" fg:x="7903" fg:w="13"/><text x="39.7690%" y="910.50"></text></g><g><title>tokio::runtime::task::state::State::load (2 samples, 0.01%)</title><rect x="39.8190%" y="948" width="0.0100%" height="15" fill="rgb(225,11,50)" fg:x="7963" fg:w="2"/><text x="40.0690%" y="958.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="39.8190%" y="964" width="0.0100%" height="15" fill="rgb(209,50,20)" fg:x="7963" fg:w="2"/><text x="40.0690%" y="974.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="39.8190%" y="980" width="0.0100%" height="15" fill="rgb(212,17,46)" fg:x="7963" fg:w="2"/><text x="40.0690%" y="990.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::unpark_one (255 samples, 1.28%)</title><rect x="38.5789%" y="868" width="1.2751%" height="15" fill="rgb(216,101,39)" fg:x="7715" fg:w="255"/><text x="38.8289%" y="878.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (54 samples, 0.27%)</title><rect x="39.5840%" y="884" width="0.2700%" height="15" fill="rgb(212,228,48)" fg:x="7916" fg:w="54"/><text x="39.8340%" y="894.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (52 samples, 0.26%)</title><rect x="39.5940%" y="900" width="0.2600%" height="15" fill="rgb(250,6,50)" fg:x="7918" fg:w="52"/><text x="39.8440%" y="910.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (48 samples, 0.24%)</title><rect x="39.6140%" y="916" width="0.2400%" height="15" fill="rgb(250,160,48)" fg:x="7922" fg:w="48"/><text x="39.8640%" y="926.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (44 samples, 0.22%)</title><rect x="39.6340%" y="932" width="0.2200%" height="15" fill="rgb(244,216,33)" fg:x="7926" fg:w="44"/><text x="39.8840%" y="942.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::_{{closure}} (5 samples, 0.03%)</title><rect x="39.8290%" y="948" width="0.0250%" height="15" fill="rgb(207,157,5)" fg:x="7965" fg:w="5"/><text x="40.0790%" y="958.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_dec (4 samples, 0.02%)</title><rect x="39.8340%" y="964" width="0.0200%" height="15" fill="rgb(228,199,8)" fg:x="7966" fg:w="4"/><text x="40.0840%" y="974.50"></text></g><g><title>_int_free (21 samples, 0.11%)</title><rect x="40.7491%" y="996" width="0.1050%" height="15" fill="rgb(227,80,20)" fg:x="8149" fg:w="21"/><text x="40.9991%" y="1006.50"></text></g><g><title>tcache_put (3 samples, 0.02%)</title><rect x="40.8391%" y="1012" width="0.0150%" height="15" fill="rgb(222,9,33)" fg:x="8167" fg:w="3"/><text x="41.0891%" y="1022.50"></text></g><g><title>__GI___libc_free (126 samples, 0.63%)</title><rect x="40.2640%" y="980" width="0.6301%" height="15" fill="rgb(239,44,28)" fg:x="8052" fg:w="126"/><text x="40.5140%" y="990.50"></text></g><g><title>arena_for_chunk (8 samples, 0.04%)</title><rect x="40.8541%" y="996" width="0.0400%" height="15" fill="rgb(249,187,43)" fg:x="8170" fg:w="8"/><text x="41.1041%" y="1006.50"></text></g><g><title>arena_for_chunk (4 samples, 0.02%)</title><rect x="40.8741%" y="1012" width="0.0200%" height="15" fill="rgb(216,141,28)" fg:x="8174" fg:w="4"/><text x="41.1241%" y="1022.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="40.8941%" y="980" width="0.0200%" height="15" fill="rgb(230,154,53)" fg:x="8178" fg:w="4"/><text x="41.1441%" y="990.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="40.8941%" y="996" width="0.0200%" height="15" fill="rgb(227,82,4)" fg:x="8178" fg:w="4"/><text x="41.1441%" y="1006.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (140 samples, 0.70%)</title><rect x="40.2540%" y="932" width="0.7001%" height="15" fill="rgb(220,107,16)" fg:x="8050" fg:w="140"/><text x="40.5040%" y="942.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (140 samples, 0.70%)</title><rect x="40.2540%" y="948" width="0.7001%" height="15" fill="rgb(207,187,2)" fg:x="8050" fg:w="140"/><text x="40.5040%" y="958.50"></text></g><g><title>alloc::alloc::dealloc (140 samples, 0.70%)</title><rect x="40.2540%" y="964" width="0.7001%" height="15" fill="rgb(210,162,52)" fg:x="8050" fg:w="140"/><text x="40.5040%" y="974.50"></text></g><g><title>__rust_dealloc (8 samples, 0.04%)</title><rect x="40.9141%" y="980" width="0.0400%" height="15" fill="rgb(217,216,49)" fg:x="8182" fg:w="8"/><text x="41.1641%" y="990.50"></text></g><g><title>core::mem::drop (142 samples, 0.71%)</title><rect x="40.2540%" y="900" width="0.7101%" height="15" fill="rgb(218,146,49)" fg:x="8050" fg:w="142"/><text x="40.5040%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (142 samples, 0.71%)</title><rect x="40.2540%" y="916" width="0.7101%" height="15" fill="rgb(216,55,40)" fg:x="8050" fg:w="142"/><text x="40.5040%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::queue::Node&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="40.9541%" y="932" width="0.0100%" height="15" fill="rgb(208,196,21)" fg:x="8190" fg:w="2"/><text x="41.2041%" y="942.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="40.9541%" y="948" width="0.0100%" height="15" fill="rgb(242,117,42)" fg:x="8190" fg:w="2"/><text x="41.2041%" y="958.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.01%)</title><rect x="40.9641%" y="900" width="0.0100%" height="15" fill="rgb(210,11,23)" fg:x="8192" fg:w="2"/><text x="41.2141%" y="910.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (20 samples, 0.10%)</title><rect x="40.9741%" y="900" width="0.1000%" height="15" fill="rgb(217,110,2)" fg:x="8194" fg:w="20"/><text x="41.2241%" y="910.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (2 samples, 0.01%)</title><rect x="41.0741%" y="900" width="0.0100%" height="15" fill="rgb(229,77,54)" fg:x="8214" fg:w="2"/><text x="41.3241%" y="910.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (2 samples, 0.01%)</title><rect x="41.0741%" y="916" width="0.0100%" height="15" fill="rgb(218,53,16)" fg:x="8214" fg:w="2"/><text x="41.3241%" y="926.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_next::TryNext&lt;St&gt; as core::future::future::Future&gt;::poll (622 samples, 3.11%)</title><rect x="37.9888%" y="740" width="3.1103%" height="15" fill="rgb(215,38,13)" fg:x="7597" fg:w="622"/><text x="38.2388%" y="750.50">&lt;fu..</text></g><g><title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (622 samples, 3.11%)</title><rect x="37.9888%" y="756" width="3.1103%" height="15" fill="rgb(235,42,18)" fg:x="7597" fg:w="622"/><text x="38.2388%" y="766.50">fut..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (622 samples, 3.11%)</title><rect x="37.9888%" y="772" width="3.1103%" height="15" fill="rgb(219,66,54)" fg:x="7597" fg:w="622"/><text x="38.2388%" y="782.50">&lt;S ..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (622 samples, 3.11%)</title><rect x="37.9888%" y="788" width="3.1103%" height="15" fill="rgb(222,205,4)" fg:x="7597" fg:w="622"/><text x="38.2388%" y="798.50">&lt;co..</text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (622 samples, 3.11%)</title><rect x="37.9888%" y="804" width="3.1103%" height="15" fill="rgb(227,213,46)" fg:x="7597" fg:w="622"/><text x="38.2388%" y="814.50">&lt;sq..</text></g><g><title>&lt;&amp;mut S as futures_core::stream::Stream&gt;::poll_next (622 samples, 3.11%)</title><rect x="37.9888%" y="820" width="3.1103%" height="15" fill="rgb(250,145,42)" fg:x="7597" fg:w="622"/><text x="38.2388%" y="830.50">&lt;&amp;m..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (622 samples, 3.11%)</title><rect x="37.9888%" y="836" width="3.1103%" height="15" fill="rgb(219,15,2)" fg:x="7597" fg:w="622"/><text x="38.2388%" y="846.50">&lt;fu..</text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (619 samples, 3.10%)</title><rect x="38.0038%" y="852" width="3.0953%" height="15" fill="rgb(231,181,52)" fg:x="7600" fg:w="619"/><text x="38.2538%" y="862.50">fut..</text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (248 samples, 1.24%)</title><rect x="39.8590%" y="868" width="1.2401%" height="15" fill="rgb(235,1,42)" fg:x="7971" fg:w="248"/><text x="40.1090%" y="878.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (179 samples, 0.90%)</title><rect x="40.2040%" y="884" width="0.8951%" height="15" fill="rgb(249,88,27)" fg:x="8040" fg:w="179"/><text x="40.4540%" y="894.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (3 samples, 0.02%)</title><rect x="41.0841%" y="900" width="0.0150%" height="15" fill="rgb(235,145,16)" fg:x="8216" fg:w="3"/><text x="41.3341%" y="910.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="41.0841%" y="916" width="0.0150%" height="15" fill="rgb(237,114,19)" fg:x="8216" fg:w="3"/><text x="41.3341%" y="926.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="100" width="4.8255%" height="15" fill="rgb(238,51,50)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="110.50">tokio:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (965 samples, 4.83%)</title><rect x="36.5087%" y="116" width="4.8255%" height="15" fill="rgb(205,194,25)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="126.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (965 samples, 4.83%)</title><rect x="36.5087%" y="132" width="4.8255%" height="15" fill="rgb(215,203,17)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="142.50">tokio:..</text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="148" width="4.8255%" height="15" fill="rgb(233,112,49)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="158.50">&lt;hyper..</text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="164" width="4.8255%" height="15" fill="rgb(241,130,26)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="174.50">&lt;hyper..</text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="180" width="4.8255%" height="15" fill="rgb(252,223,19)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="190.50">&lt;hyper..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="196" width="4.8255%" height="15" fill="rgb(211,95,25)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="206.50">&lt;hyper..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (965 samples, 4.83%)</title><rect x="36.5087%" y="212" width="4.8255%" height="15" fill="rgb(251,182,27)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="222.50">hyper:..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (965 samples, 4.83%)</title><rect x="36.5087%" y="228" width="4.8255%" height="15" fill="rgb(238,24,4)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="238.50">hyper:..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (965 samples, 4.83%)</title><rect x="36.5087%" y="244" width="4.8255%" height="15" fill="rgb(224,220,25)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="254.50">hyper:..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (965 samples, 4.83%)</title><rect x="36.5087%" y="260" width="4.8255%" height="15" fill="rgb(239,133,26)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="270.50">hyper:..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (965 samples, 4.83%)</title><rect x="36.5087%" y="276" width="4.8255%" height="15" fill="rgb(211,94,48)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="286.50">&lt;hyper..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="292" width="4.8255%" height="15" fill="rgb(239,87,6)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="302.50">&lt;axum:..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="308" width="4.8255%" height="15" fill="rgb(227,62,0)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="318.50">&lt;tower..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="324" width="4.8255%" height="15" fill="rgb(211,226,4)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="334.50">&lt;core:..</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="340" width="4.8255%" height="15" fill="rgb(253,38,52)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="350.50">&lt;tower..</text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="356" width="4.8255%" height="15" fill="rgb(229,126,40)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="366.50">&lt;futur..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="372" width="4.8255%" height="15" fill="rgb(229,165,44)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="382.50">&lt;futur..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="388" width="4.8255%" height="15" fill="rgb(247,95,47)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="398.50">&lt;futur..</text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="404" width="4.8255%" height="15" fill="rgb(216,140,30)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="414.50">&lt;futur..</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (965 samples, 4.83%)</title><rect x="36.5087%" y="420" width="4.8255%" height="15" fill="rgb(246,214,8)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="430.50">&lt;F as ..</text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="436" width="4.8255%" height="15" fill="rgb(227,224,15)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="446.50">&lt;axum:..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="452" width="4.8255%" height="15" fill="rgb(233,175,4)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="462.50">&lt;futur..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="468" width="4.8255%" height="15" fill="rgb(221,66,45)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="478.50">&lt;futur..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (965 samples, 4.83%)</title><rect x="36.5087%" y="484" width="4.8255%" height="15" fill="rgb(221,178,18)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="494.50">&lt;core:..</text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}} (965 samples, 4.83%)</title><rect x="36.5087%" y="500" width="4.8255%" height="15" fill="rgb(213,81,29)" fg:x="7301" fg:w="965"/><text x="36.7587%" y="510.50">&lt;F as ..</text></g><g><title>rust_axum::read_users::_{{closure}} (964 samples, 4.82%)</title><rect x="36.5137%" y="516" width="4.8205%" height="15" fill="rgb(220,89,49)" fg:x="7302" fg:w="964"/><text x="36.7637%" y="526.50">rust_a..</text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_all::_{{closure}} (955 samples, 4.78%)</title><rect x="36.5587%" y="532" width="4.7755%" height="15" fill="rgb(227,60,33)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="542.50">sqlx_c..</text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (955 samples, 4.78%)</title><rect x="36.5587%" y="548" width="4.7755%" height="15" fill="rgb(205,113,12)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="558.50">&lt;futur..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (955 samples, 4.78%)</title><rect x="36.5587%" y="564" width="4.7755%" height="15" fill="rgb(211,32,1)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="574.50">&lt;S as ..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (955 samples, 4.78%)</title><rect x="36.5587%" y="580" width="4.7755%" height="15" fill="rgb(246,2,12)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="590.50">&lt;core:..</text></g><g><title>&lt;futures_util::stream::try_stream::try_filter_map::TryFilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (955 samples, 4.78%)</title><rect x="36.5587%" y="596" width="4.7755%" height="15" fill="rgb(243,37,27)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="606.50">&lt;futur..</text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (955 samples, 4.78%)</title><rect x="36.5587%" y="612" width="4.7755%" height="15" fill="rgb(248,211,31)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="622.50">&lt;S as ..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (955 samples, 4.78%)</title><rect x="36.5587%" y="628" width="4.7755%" height="15" fill="rgb(242,146,47)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="638.50">&lt;core:..</text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (955 samples, 4.78%)</title><rect x="36.5587%" y="644" width="4.7755%" height="15" fill="rgb(206,70,20)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="654.50">&lt;sqlx_..</text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (955 samples, 4.78%)</title><rect x="36.5587%" y="660" width="4.7755%" height="15" fill="rgb(215,10,51)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="670.50">&lt;&amp;mut ..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (955 samples, 4.78%)</title><rect x="36.5587%" y="676" width="4.7755%" height="15" fill="rgb(243,178,53)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="686.50">&lt;core:..</text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (955 samples, 4.78%)</title><rect x="36.5587%" y="692" width="4.7755%" height="15" fill="rgb(233,221,20)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="702.50">&lt;futur..</text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new::_{{closure}} (955 samples, 4.78%)</title><rect x="36.5587%" y="708" width="4.7755%" height="15" fill="rgb(218,95,35)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="718.50">sqlx_c..</text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_many::_{{closure}}::_{{closure}} (955 samples, 4.78%)</title><rect x="36.5587%" y="724" width="4.7755%" height="15" fill="rgb(229,13,5)" fg:x="7311" fg:w="955"/><text x="36.8087%" y="734.50">sqlx_c..</text></g><g><title>rust_axum::read_users::_{{closure}}::_{{closure}} (47 samples, 0.24%)</title><rect x="41.0991%" y="740" width="0.2350%" height="15" fill="rgb(252,164,30)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="750.50"></text></g><g><title>sqlx_core::row::Row::try_get_unchecked (47 samples, 0.24%)</title><rect x="41.0991%" y="756" width="0.2350%" height="15" fill="rgb(232,68,36)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="766.50"></text></g><g><title>sqlx_postgres::types::str::&lt;impl sqlx_core::decode::Decode&lt;sqlx_postgres::database::Postgres&gt; for alloc::string::String&gt;::decode (47 samples, 0.24%)</title><rect x="41.0991%" y="772" width="0.2350%" height="15" fill="rgb(219,59,54)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="782.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (47 samples, 0.24%)</title><rect x="41.0991%" y="788" width="0.2350%" height="15" fill="rgb(250,92,33)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="798.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (47 samples, 0.24%)</title><rect x="41.0991%" y="804" width="0.2350%" height="15" fill="rgb(229,162,54)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="814.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (47 samples, 0.24%)</title><rect x="41.0991%" y="820" width="0.2350%" height="15" fill="rgb(244,114,52)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="830.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (47 samples, 0.24%)</title><rect x="41.0991%" y="836" width="0.2350%" height="15" fill="rgb(212,211,43)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="846.50"></text></g><g><title>alloc::slice::hack::to_vec (47 samples, 0.24%)</title><rect x="41.0991%" y="852" width="0.2350%" height="15" fill="rgb(226,147,8)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="862.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (47 samples, 0.24%)</title><rect x="41.0991%" y="868" width="0.2350%" height="15" fill="rgb(226,23,13)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="878.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (47 samples, 0.24%)</title><rect x="41.0991%" y="884" width="0.2350%" height="15" fill="rgb(240,63,4)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="894.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (47 samples, 0.24%)</title><rect x="41.0991%" y="900" width="0.2350%" height="15" fill="rgb(221,1,32)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="910.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (47 samples, 0.24%)</title><rect x="41.0991%" y="916" width="0.2350%" height="15" fill="rgb(242,117,10)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="926.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (47 samples, 0.24%)</title><rect x="41.0991%" y="932" width="0.2350%" height="15" fill="rgb(249,172,44)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="942.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (47 samples, 0.24%)</title><rect x="41.0991%" y="948" width="0.2350%" height="15" fill="rgb(244,46,45)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="958.50"></text></g><g><title>alloc::alloc::alloc (47 samples, 0.24%)</title><rect x="41.0991%" y="964" width="0.2350%" height="15" fill="rgb(206,43,17)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="974.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.24%)</title><rect x="41.0991%" y="980" width="0.2350%" height="15" fill="rgb(239,218,39)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="990.50"></text></g><g><title>_int_malloc (47 samples, 0.24%)</title><rect x="41.0991%" y="996" width="0.2350%" height="15" fill="rgb(208,169,54)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="1006.50"></text></g><g><title>unlink_chunk (47 samples, 0.24%)</title><rect x="41.0991%" y="1012" width="0.2350%" height="15" fill="rgb(247,25,42)" fg:x="8219" fg:w="47"/><text x="41.3491%" y="1022.50"></text></g><g><title>&lt;http::uri::authority::Authority as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="41.3391%" y="516" width="0.0150%" height="15" fill="rgb(226,23,31)" fg:x="8267" fg:w="3"/><text x="41.5891%" y="526.50"></text></g><g><title>&lt;http::byte_str::ByteStr as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="41.3391%" y="532" width="0.0150%" height="15" fill="rgb(247,16,28)" fg:x="8267" fg:w="3"/><text x="41.5891%" y="542.50"></text></g><g><title>&lt;http::uri::Uri as core::clone::Clone&gt;::clone (4 samples, 0.02%)</title><rect x="41.3391%" y="500" width="0.0200%" height="15" fill="rgb(231,147,38)" fg:x="8267" fg:w="4"/><text x="41.5891%" y="510.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="41.3591%" y="500" width="0.0100%" height="15" fill="rgb(253,81,48)" fg:x="8271" fg:w="2"/><text x="41.6091%" y="510.50"></text></g><g><title>__memmove_avx_unaligned (3 samples, 0.02%)</title><rect x="41.3691%" y="500" width="0.0150%" height="15" fill="rgb(249,222,43)" fg:x="8273" fg:w="3"/><text x="41.6191%" y="510.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="41.3841%" y="596" width="0.0150%" height="15" fill="rgb(221,3,27)" fg:x="8276" fg:w="3"/><text x="41.6341%" y="606.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="41.3841%" y="612" width="0.0150%" height="15" fill="rgb(228,180,5)" fg:x="8276" fg:w="3"/><text x="41.6341%" y="622.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.02%)</title><rect x="41.3841%" y="628" width="0.0150%" height="15" fill="rgb(227,131,42)" fg:x="8276" fg:w="3"/><text x="41.6341%" y="638.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="41.3841%" y="644" width="0.0150%" height="15" fill="rgb(212,3,39)" fg:x="8276" fg:w="3"/><text x="41.6341%" y="654.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="41.3841%" y="660" width="0.0150%" height="15" fill="rgb(226,45,5)" fg:x="8276" fg:w="3"/><text x="41.6341%" y="670.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="41.3841%" y="676" width="0.0150%" height="15" fill="rgb(215,167,45)" fg:x="8276" fg:w="3"/><text x="41.6341%" y="686.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="41.3891%" y="692" width="0.0100%" height="15" fill="rgb(250,218,53)" fg:x="8277" fg:w="2"/><text x="41.6391%" y="702.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.01%)</title><rect x="41.3891%" y="708" width="0.0100%" height="15" fill="rgb(207,140,0)" fg:x="8277" fg:w="2"/><text x="41.6391%" y="718.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.03%)</title><rect x="41.3841%" y="500" width="0.0250%" height="15" fill="rgb(238,133,51)" fg:x="8276" fg:w="5"/><text x="41.6341%" y="510.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.03%)</title><rect x="41.3841%" y="516" width="0.0250%" height="15" fill="rgb(218,203,53)" fg:x="8276" fg:w="5"/><text x="41.6341%" y="526.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.03%)</title><rect x="41.3841%" y="532" width="0.0250%" height="15" fill="rgb(226,184,25)" fg:x="8276" fg:w="5"/><text x="41.6341%" y="542.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.03%)</title><rect x="41.3841%" y="548" width="0.0250%" height="15" fill="rgb(231,121,21)" fg:x="8276" fg:w="5"/><text x="41.6341%" y="558.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.03%)</title><rect x="41.3841%" y="564" width="0.0250%" height="15" fill="rgb(251,14,34)" fg:x="8276" fg:w="5"/><text x="41.6341%" y="574.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.03%)</title><rect x="41.3841%" y="580" width="0.0250%" height="15" fill="rgb(249,193,11)" fg:x="8276" fg:w="5"/><text x="41.6341%" y="590.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.01%)</title><rect x="41.3991%" y="596" width="0.0100%" height="15" fill="rgb(220,172,37)" fg:x="8279" fg:w="2"/><text x="41.6491%" y="606.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="41.3991%" y="612" width="0.0100%" height="15" fill="rgb(231,229,43)" fg:x="8279" fg:w="2"/><text x="41.6491%" y="622.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (2 samples, 0.01%)</title><rect x="41.4141%" y="532" width="0.0100%" height="15" fill="rgb(250,161,5)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="542.50"></text></g><g><title>axum::extract::matched_path::append_nested_matched_path::_{{closure}} (2 samples, 0.01%)</title><rect x="41.4141%" y="548" width="0.0100%" height="15" fill="rgb(218,225,18)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="558.50"></text></g><g><title>http::extensions::Extensions::get (2 samples, 0.01%)</title><rect x="41.4141%" y="564" width="0.0100%" height="15" fill="rgb(245,45,42)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="574.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.01%)</title><rect x="41.4141%" y="580" width="0.0100%" height="15" fill="rgb(211,115,1)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="590.50"></text></g><g><title>http::extensions::Extensions::get::_{{closure}} (2 samples, 0.01%)</title><rect x="41.4141%" y="596" width="0.0100%" height="15" fill="rgb(248,133,52)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="606.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.01%)</title><rect x="41.4141%" y="612" width="0.0100%" height="15" fill="rgb(238,100,21)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="622.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.01%)</title><rect x="41.4141%" y="628" width="0.0100%" height="15" fill="rgb(247,144,11)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="638.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.01%)</title><rect x="41.4141%" y="644" width="0.0100%" height="15" fill="rgb(206,164,16)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="654.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.01%)</title><rect x="41.4141%" y="660" width="0.0100%" height="15" fill="rgb(222,34,3)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="670.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="41.4141%" y="676" width="0.0100%" height="15" fill="rgb(248,82,4)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="686.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.01%)</title><rect x="41.4141%" y="692" width="0.0100%" height="15" fill="rgb(228,81,46)" fg:x="8282" fg:w="2"/><text x="41.6641%" y="702.50"></text></g><g><title>axum::extract::matched_path::append_nested_matched_path (3 samples, 0.02%)</title><rect x="41.4141%" y="516" width="0.0150%" height="15" fill="rgb(227,67,47)" fg:x="8282" fg:w="3"/><text x="41.6641%" y="526.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="41.4491%" y="532" width="0.0100%" height="15" fill="rgb(215,93,53)" fg:x="8289" fg:w="2"/><text x="41.6991%" y="542.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="41.4491%" y="548" width="0.0100%" height="15" fill="rgb(248,194,39)" fg:x="8289" fg:w="2"/><text x="41.6991%" y="558.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="41.4491%" y="564" width="0.0100%" height="15" fill="rgb(215,5,19)" fg:x="8289" fg:w="2"/><text x="41.6991%" y="574.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="41.4491%" y="580" width="0.0100%" height="15" fill="rgb(226,215,51)" fg:x="8289" fg:w="2"/><text x="41.6991%" y="590.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="41.4491%" y="596" width="0.0100%" height="15" fill="rgb(225,56,26)" fg:x="8289" fg:w="2"/><text x="41.6991%" y="606.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="41.4491%" y="612" width="0.0100%" height="15" fill="rgb(222,75,29)" fg:x="8289" fg:w="2"/><text x="41.6991%" y="622.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="41.4491%" y="628" width="0.0100%" height="15" fill="rgb(236,139,6)" fg:x="8289" fg:w="2"/><text x="41.6991%" y="638.50"></text></g><g><title>http::extensions::Extensions::insert (11 samples, 0.06%)</title><rect x="41.4291%" y="516" width="0.0550%" height="15" fill="rgb(223,137,36)" fg:x="8285" fg:w="11"/><text x="41.6791%" y="526.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (4 samples, 0.02%)</title><rect x="41.4641%" y="532" width="0.0200%" height="15" fill="rgb(226,99,2)" fg:x="8292" fg:w="4"/><text x="41.7141%" y="542.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.02%)</title><rect x="41.4641%" y="548" width="0.0200%" height="15" fill="rgb(206,133,23)" fg:x="8292" fg:w="4"/><text x="41.7141%" y="558.50"></text></g><g><title>http::extensions::Extensions::remove (3 samples, 0.02%)</title><rect x="41.4841%" y="516" width="0.0150%" height="15" fill="rgb(243,173,15)" fg:x="8296" fg:w="3"/><text x="41.7341%" y="526.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (3 samples, 0.02%)</title><rect x="41.4841%" y="532" width="0.0150%" height="15" fill="rgb(228,69,28)" fg:x="8296" fg:w="3"/><text x="41.7341%" y="542.50"></text></g><g><title>http::extensions::Extensions::remove::_{{closure}} (3 samples, 0.02%)</title><rect x="41.4841%" y="548" width="0.0150%" height="15" fill="rgb(212,51,22)" fg:x="8296" fg:w="3"/><text x="41.7341%" y="558.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::remove (3 samples, 0.02%)</title><rect x="41.4841%" y="564" width="0.0150%" height="15" fill="rgb(227,113,0)" fg:x="8296" fg:w="3"/><text x="41.7341%" y="574.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (3 samples, 0.02%)</title><rect x="41.4841%" y="580" width="0.0150%" height="15" fill="rgb(252,84,27)" fg:x="8296" fg:w="3"/><text x="41.7341%" y="590.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove_entry (3 samples, 0.02%)</title><rect x="41.4841%" y="596" width="0.0150%" height="15" fill="rgb(223,145,39)" fg:x="8296" fg:w="3"/><text x="41.7341%" y="606.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (3 samples, 0.02%)</title><rect x="41.4841%" y="612" width="0.0150%" height="15" fill="rgb(239,219,30)" fg:x="8296" fg:w="3"/><text x="41.7341%" y="622.50"></text></g><g><title>axum::extract::matched_path::set_matched_path_for_request (24 samples, 0.12%)</title><rect x="41.4091%" y="500" width="0.1200%" height="15" fill="rgb(224,196,39)" fg:x="8281" fg:w="24"/><text x="41.6591%" y="510.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (6 samples, 0.03%)</title><rect x="41.4991%" y="516" width="0.0300%" height="15" fill="rgb(205,35,43)" fg:x="8299" fg:w="6"/><text x="41.7491%" y="526.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (6 samples, 0.03%)</title><rect x="41.4991%" y="532" width="0.0300%" height="15" fill="rgb(228,201,21)" fg:x="8299" fg:w="6"/><text x="41.7491%" y="542.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (6 samples, 0.03%)</title><rect x="41.4991%" y="548" width="0.0300%" height="15" fill="rgb(237,118,16)" fg:x="8299" fg:w="6"/><text x="41.7491%" y="558.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.01%)</title><rect x="41.5192%" y="564" width="0.0100%" height="15" fill="rgb(241,17,19)" fg:x="8303" fg:w="2"/><text x="41.7692%" y="574.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="41.5192%" y="580" width="0.0100%" height="15" fill="rgb(214,10,25)" fg:x="8303" fg:w="2"/><text x="41.7692%" y="590.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.01%)</title><rect x="41.5192%" y="596" width="0.0100%" height="15" fill="rgb(238,37,29)" fg:x="8303" fg:w="2"/><text x="41.7692%" y="606.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="41.5342%" y="564" width="0.0250%" height="15" fill="rgb(253,83,25)" fg:x="8306" fg:w="5"/><text x="41.7842%" y="574.50"></text></g><g><title>&lt;tower::util::map_response::MapResponse&lt;S,F&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="41.5342%" y="580" width="0.0250%" height="15" fill="rgb(234,192,12)" fg:x="8306" fg:w="5"/><text x="41.7842%" y="590.50"></text></g><g><title>&lt;axum::handler::service::HandlerService&lt;H,T,S,B&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="41.5342%" y="596" width="0.0250%" height="15" fill="rgb(241,216,45)" fg:x="8306" fg:w="5"/><text x="41.7842%" y="606.50"></text></g><g><title>&lt;sqlx_core::pool::Pool&lt;DB&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="41.5342%" y="612" width="0.0250%" height="15" fill="rgb(242,22,33)" fg:x="8306" fg:w="5"/><text x="41.7842%" y="622.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="41.5342%" y="628" width="0.0250%" height="15" fill="rgb(231,105,49)" fg:x="8306" fg:w="5"/><text x="41.7842%" y="638.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.01%)</title><rect x="41.5492%" y="644" width="0.0100%" height="15" fill="rgb(218,204,15)" fg:x="8309" fg:w="2"/><text x="41.7992%" y="654.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.01%)</title><rect x="41.5492%" y="660" width="0.0100%" height="15" fill="rgb(235,138,41)" fg:x="8309" fg:w="2"/><text x="41.7992%" y="670.50"></text></g><g><title>axum::routing::method_routing::MethodRouter&lt;S,B,E&gt;::call_with_state (8 samples, 0.04%)</title><rect x="41.5292%" y="500" width="0.0400%" height="15" fill="rgb(246,0,9)" fg:x="8305" fg:w="8"/><text x="41.7792%" y="510.50"></text></g><g><title>axum::routing::route::Route&lt;B,E&gt;::oneshot_inner (7 samples, 0.04%)</title><rect x="41.5342%" y="516" width="0.0350%" height="15" fill="rgb(210,74,4)" fg:x="8306" fg:w="7"/><text x="41.7842%" y="526.50"></text></g><g><title>&lt;tower::util::boxed_clone::BoxCloneService&lt;T,U,E&gt; as core::clone::Clone&gt;::clone (7 samples, 0.04%)</title><rect x="41.5342%" y="532" width="0.0350%" height="15" fill="rgb(250,60,41)" fg:x="8306" fg:w="7"/><text x="41.7842%" y="542.50"></text></g><g><title>&lt;T as tower::util::boxed_clone::CloneService&lt;R&gt;&gt;::clone_box (7 samples, 0.04%)</title><rect x="41.5342%" y="548" width="0.0350%" height="15" fill="rgb(220,115,12)" fg:x="8306" fg:w="7"/><text x="41.7842%" y="558.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="41.5592%" y="564" width="0.0100%" height="15" fill="rgb(237,100,13)" fg:x="8311" fg:w="2"/><text x="41.8092%" y="574.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="41.5592%" y="580" width="0.0100%" height="15" fill="rgb(213,55,26)" fg:x="8311" fg:w="2"/><text x="41.8092%" y="590.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="41.5592%" y="596" width="0.0100%" height="15" fill="rgb(216,17,4)" fg:x="8311" fg:w="2"/><text x="41.8092%" y="606.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="41.5592%" y="612" width="0.0100%" height="15" fill="rgb(220,153,47)" fg:x="8311" fg:w="2"/><text x="41.8092%" y="622.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="41.5592%" y="628" width="0.0100%" height="15" fill="rgb(215,131,9)" fg:x="8311" fg:w="2"/><text x="41.8092%" y="638.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="41.5592%" y="644" width="0.0100%" height="15" fill="rgb(233,46,42)" fg:x="8311" fg:w="2"/><text x="41.8092%" y="654.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (3 samples, 0.02%)</title><rect x="41.5892%" y="548" width="0.0150%" height="15" fill="rgb(226,86,7)" fg:x="8317" fg:w="3"/><text x="41.8392%" y="558.50"></text></g><g><title>axum::routing::path_router::Node::at (12 samples, 0.06%)</title><rect x="41.5692%" y="500" width="0.0600%" height="15" fill="rgb(239,226,21)" fg:x="8313" fg:w="12"/><text x="41.8192%" y="510.50"></text></g><g><title>matchit::router::Router&lt;T&gt;::at (12 samples, 0.06%)</title><rect x="41.5692%" y="516" width="0.0600%" height="15" fill="rgb(244,137,22)" fg:x="8313" fg:w="12"/><text x="41.8192%" y="526.50"></text></g><g><title>matchit::tree::Node&lt;T&gt;::at (11 samples, 0.06%)</title><rect x="41.5742%" y="532" width="0.0550%" height="15" fill="rgb(211,139,35)" fg:x="8314" fg:w="11"/><text x="41.8242%" y="542.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A&gt;&gt; for &amp;[T]&gt;::eq (4 samples, 0.02%)</title><rect x="41.6092%" y="548" width="0.0200%" height="15" fill="rgb(214,62,50)" fg:x="8321" fg:w="4"/><text x="41.8592%" y="558.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.02%)</title><rect x="41.6092%" y="564" width="0.0200%" height="15" fill="rgb(212,113,44)" fg:x="8321" fg:w="4"/><text x="41.8592%" y="574.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.02%)</title><rect x="41.6092%" y="580" width="0.0200%" height="15" fill="rgb(226,150,43)" fg:x="8321" fg:w="4"/><text x="41.8592%" y="590.50"></text></g><g><title>__memcmp_avx2_movbe (4 samples, 0.02%)</title><rect x="41.6092%" y="596" width="0.0200%" height="15" fill="rgb(250,71,37)" fg:x="8321" fg:w="4"/><text x="41.8592%" y="606.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.04%)</title><rect x="41.6592%" y="644" width="0.0350%" height="15" fill="rgb(219,76,19)" fg:x="8331" fg:w="7"/><text x="41.9092%" y="654.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (7 samples, 0.04%)</title><rect x="41.6592%" y="660" width="0.0350%" height="15" fill="rgb(250,39,11)" fg:x="8331" fg:w="7"/><text x="41.9092%" y="670.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.04%)</title><rect x="41.6592%" y="676" width="0.0350%" height="15" fill="rgb(230,64,31)" fg:x="8331" fg:w="7"/><text x="41.9092%" y="686.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.04%)</title><rect x="41.6592%" y="692" width="0.0350%" height="15" fill="rgb(208,222,23)" fg:x="8331" fg:w="7"/><text x="41.9092%" y="702.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.02%)</title><rect x="41.6742%" y="708" width="0.0200%" height="15" fill="rgb(227,125,18)" fg:x="8334" fg:w="4"/><text x="41.9242%" y="718.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.02%)</title><rect x="41.6742%" y="724" width="0.0200%" height="15" fill="rgb(234,210,9)" fg:x="8334" fg:w="4"/><text x="41.9242%" y="734.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (4 samples, 0.02%)</title><rect x="41.6742%" y="740" width="0.0200%" height="15" fill="rgb(217,127,24)" fg:x="8334" fg:w="4"/><text x="41.9242%" y="750.50"></text></g><g><title>&lt;matchit::params::ParamsIter as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="41.6792%" y="756" width="0.0150%" height="15" fill="rgb(239,141,48)" fg:x="8335" fg:w="3"/><text x="41.9292%" y="766.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.05%)</title><rect x="41.6492%" y="516" width="0.0500%" height="15" fill="rgb(227,109,8)" fg:x="8329" fg:w="10"/><text x="41.8992%" y="526.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (10 samples, 0.05%)</title><rect x="41.6492%" y="532" width="0.0500%" height="15" fill="rgb(235,184,23)" fg:x="8329" fg:w="10"/><text x="41.8992%" y="542.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.05%)</title><rect x="41.6492%" y="548" width="0.0500%" height="15" fill="rgb(227,226,48)" fg:x="8329" fg:w="10"/><text x="41.8992%" y="558.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (10 samples, 0.05%)</title><rect x="41.6492%" y="564" width="0.0500%" height="15" fill="rgb(206,150,11)" fg:x="8329" fg:w="10"/><text x="41.8992%" y="574.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 0.05%)</title><rect x="41.6492%" y="580" width="0.0500%" height="15" fill="rgb(254,2,33)" fg:x="8329" fg:w="10"/><text x="41.8992%" y="590.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (10 samples, 0.05%)</title><rect x="41.6492%" y="596" width="0.0500%" height="15" fill="rgb(243,160,20)" fg:x="8329" fg:w="10"/><text x="41.8992%" y="606.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.05%)</title><rect x="41.6492%" y="612" width="0.0500%" height="15" fill="rgb(218,208,30)" fg:x="8329" fg:w="10"/><text x="41.8992%" y="622.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.04%)</title><rect x="41.6592%" y="628" width="0.0400%" height="15" fill="rgb(224,120,49)" fg:x="8331" fg:w="8"/><text x="41.9092%" y="638.50"></text></g><g><title>http::extensions::Extensions::get_mut (2 samples, 0.01%)</title><rect x="41.6992%" y="516" width="0.0100%" height="15" fill="rgb(246,12,2)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="526.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (2 samples, 0.01%)</title><rect x="41.6992%" y="532" width="0.0100%" height="15" fill="rgb(236,117,3)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="542.50"></text></g><g><title>http::extensions::Extensions::get_mut::_{{closure}} (2 samples, 0.01%)</title><rect x="41.6992%" y="548" width="0.0100%" height="15" fill="rgb(216,128,52)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="558.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.01%)</title><rect x="41.6992%" y="564" width="0.0100%" height="15" fill="rgb(246,145,19)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="574.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.01%)</title><rect x="41.6992%" y="580" width="0.0100%" height="15" fill="rgb(222,11,46)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="590.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.01%)</title><rect x="41.6992%" y="596" width="0.0100%" height="15" fill="rgb(245,82,36)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="606.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.01%)</title><rect x="41.6992%" y="612" width="0.0100%" height="15" fill="rgb(250,73,51)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="622.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.01%)</title><rect x="41.6992%" y="628" width="0.0100%" height="15" fill="rgb(221,189,23)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="638.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (2 samples, 0.01%)</title><rect x="41.6992%" y="644" width="0.0100%" height="15" fill="rgb(210,33,7)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="654.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (2 samples, 0.01%)</title><rect x="41.6992%" y="660" width="0.0100%" height="15" fill="rgb(210,107,22)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="670.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.01%)</title><rect x="41.6992%" y="676" width="0.0100%" height="15" fill="rgb(222,116,37)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="686.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (2 samples, 0.01%)</title><rect x="41.6992%" y="692" width="0.0100%" height="15" fill="rgb(254,17,48)" fg:x="8339" fg:w="2"/><text x="41.9492%" y="702.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.03%)</title><rect x="41.7092%" y="612" width="0.0250%" height="15" fill="rgb(224,36,32)" fg:x="8341" fg:w="5"/><text x="41.9592%" y="622.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="41.7242%" y="628" width="0.0100%" height="15" fill="rgb(232,90,46)" fg:x="8344" fg:w="2"/><text x="41.9742%" y="638.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="41.7092%" y="532" width="0.0300%" height="15" fill="rgb(241,66,40)" fg:x="8341" fg:w="6"/><text x="41.9592%" y="542.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.03%)</title><rect x="41.7092%" y="548" width="0.0300%" height="15" fill="rgb(249,184,29)" fg:x="8341" fg:w="6"/><text x="41.9592%" y="558.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="41.7092%" y="564" width="0.0300%" height="15" fill="rgb(231,181,1)" fg:x="8341" fg:w="6"/><text x="41.9592%" y="574.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="41.7092%" y="580" width="0.0300%" height="15" fill="rgb(224,94,2)" fg:x="8341" fg:w="6"/><text x="41.9592%" y="590.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="41.7092%" y="596" width="0.0300%" height="15" fill="rgb(229,170,15)" fg:x="8341" fg:w="6"/><text x="41.9592%" y="606.50"></text></g><g><title>axum::routing::url_params::insert_url_params (23 samples, 0.12%)</title><rect x="41.6292%" y="500" width="0.1150%" height="15" fill="rgb(240,127,35)" fg:x="8325" fg:w="23"/><text x="41.8792%" y="510.50"></text></g><g><title>http::extensions::Extensions::insert (7 samples, 0.04%)</title><rect x="41.7092%" y="516" width="0.0350%" height="15" fill="rgb(248,196,34)" fg:x="8341" fg:w="7"/><text x="41.9592%" y="526.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="41.7542%" y="628" width="0.0100%" height="15" fill="rgb(236,137,7)" fg:x="8350" fg:w="2"/><text x="42.0042%" y="638.50"></text></g><g><title>core::option::Option&lt;T&gt;::get_or_insert_with (3 samples, 0.02%)</title><rect x="41.7542%" y="516" width="0.0150%" height="15" fill="rgb(235,127,16)" fg:x="8350" fg:w="3"/><text x="42.0042%" y="526.50"></text></g><g><title>http::extensions::Extensions::insert::_{{closure}} (3 samples, 0.02%)</title><rect x="41.7542%" y="532" width="0.0150%" height="15" fill="rgb(250,192,54)" fg:x="8350" fg:w="3"/><text x="42.0042%" y="542.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="41.7542%" y="548" width="0.0150%" height="15" fill="rgb(218,98,20)" fg:x="8350" fg:w="3"/><text x="42.0042%" y="558.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.02%)</title><rect x="41.7542%" y="564" width="0.0150%" height="15" fill="rgb(230,176,47)" fg:x="8350" fg:w="3"/><text x="42.0042%" y="574.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="41.7542%" y="580" width="0.0150%" height="15" fill="rgb(244,2,33)" fg:x="8350" fg:w="3"/><text x="42.0042%" y="590.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="41.7542%" y="596" width="0.0150%" height="15" fill="rgb(231,100,17)" fg:x="8350" fg:w="3"/><text x="42.0042%" y="606.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="41.7542%" y="612" width="0.0150%" height="15" fill="rgb(245,23,12)" fg:x="8350" fg:w="3"/><text x="42.0042%" y="622.50"></text></g><g><title>__memset_avx2_unaligned (2 samples, 0.01%)</title><rect x="41.8392%" y="692" width="0.0100%" height="15" fill="rgb(249,55,22)" fg:x="8367" fg:w="2"/><text x="42.0892%" y="702.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (3 samples, 0.02%)</title><rect x="41.8392%" y="660" width="0.0150%" height="15" fill="rgb(207,134,9)" fg:x="8367" fg:w="3"/><text x="42.0892%" y="670.50"></text></g><g><title>core::intrinsics::write_bytes (3 samples, 0.02%)</title><rect x="41.8392%" y="676" width="0.0150%" height="15" fill="rgb(218,134,0)" fg:x="8367" fg:w="3"/><text x="42.0892%" y="686.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="41.8542%" y="756" width="0.0200%" height="15" fill="rgb(213,212,33)" fg:x="8370" fg:w="4"/><text x="42.1042%" y="766.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (12 samples, 0.06%)</title><rect x="41.8242%" y="612" width="0.0600%" height="15" fill="rgb(252,106,18)" fg:x="8364" fg:w="12"/><text x="42.0742%" y="622.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (10 samples, 0.05%)</title><rect x="41.8342%" y="628" width="0.0500%" height="15" fill="rgb(208,126,42)" fg:x="8366" fg:w="10"/><text x="42.0842%" y="638.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (10 samples, 0.05%)</title><rect x="41.8342%" y="644" width="0.0500%" height="15" fill="rgb(246,175,29)" fg:x="8366" fg:w="10"/><text x="42.0842%" y="654.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (6 samples, 0.03%)</title><rect x="41.8542%" y="660" width="0.0300%" height="15" fill="rgb(215,13,50)" fg:x="8370" fg:w="6"/><text x="42.1042%" y="670.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (6 samples, 0.03%)</title><rect x="41.8542%" y="676" width="0.0300%" height="15" fill="rgb(216,172,15)" fg:x="8370" fg:w="6"/><text x="42.1042%" y="686.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="41.8542%" y="692" width="0.0300%" height="15" fill="rgb(212,103,13)" fg:x="8370" fg:w="6"/><text x="42.1042%" y="702.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="41.8542%" y="708" width="0.0300%" height="15" fill="rgb(231,171,36)" fg:x="8370" fg:w="6"/><text x="42.1042%" y="718.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="41.8542%" y="724" width="0.0300%" height="15" fill="rgb(250,123,20)" fg:x="8370" fg:w="6"/><text x="42.1042%" y="734.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.03%)</title><rect x="41.8542%" y="740" width="0.0300%" height="15" fill="rgb(212,53,50)" fg:x="8370" fg:w="6"/><text x="42.1042%" y="750.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="41.8742%" y="756" width="0.0100%" height="15" fill="rgb(243,54,12)" fg:x="8374" fg:w="2"/><text x="42.1242%" y="766.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (22 samples, 0.11%)</title><rect x="41.7842%" y="564" width="0.1100%" height="15" fill="rgb(234,101,34)" fg:x="8356" fg:w="22"/><text x="42.0342%" y="574.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (21 samples, 0.11%)</title><rect x="41.7892%" y="580" width="0.1050%" height="15" fill="rgb(254,67,22)" fg:x="8357" fg:w="21"/><text x="42.0392%" y="590.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (20 samples, 0.10%)</title><rect x="41.7942%" y="596" width="0.1000%" height="15" fill="rgb(250,35,47)" fg:x="8358" fg:w="20"/><text x="42.0442%" y="606.50"></text></g><g><title>hashbrown::raw::bucket_mask_to_capacity (2 samples, 0.01%)</title><rect x="41.8842%" y="612" width="0.0100%" height="15" fill="rgb(226,126,38)" fg:x="8376" fg:w="2"/><text x="42.1342%" y="622.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find_or_find_insert_slot (25 samples, 0.13%)</title><rect x="41.7792%" y="548" width="0.1250%" height="15" fill="rgb(216,138,53)" fg:x="8355" fg:w="25"/><text x="42.0292%" y="558.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_or_find_insert_slot_inner (2 samples, 0.01%)</title><rect x="41.8942%" y="564" width="0.0100%" height="15" fill="rgb(246,199,43)" fg:x="8378" fg:w="2"/><text x="42.1442%" y="574.50"></text></g><g><title>http::extensions::Extensions::insert (32 samples, 0.16%)</title><rect x="41.7492%" y="500" width="0.1600%" height="15" fill="rgb(232,125,11)" fg:x="8349" fg:w="32"/><text x="41.9992%" y="510.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (28 samples, 0.14%)</title><rect x="41.7692%" y="516" width="0.1400%" height="15" fill="rgb(218,219,45)" fg:x="8353" fg:w="28"/><text x="42.0192%" y="526.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (28 samples, 0.14%)</title><rect x="41.7692%" y="532" width="0.1400%" height="15" fill="rgb(216,102,54)" fg:x="8353" fg:w="28"/><text x="42.0192%" y="542.50"></text></g><g><title>http::uri::Uri::path (3 samples, 0.02%)</title><rect x="41.9142%" y="500" width="0.0150%" height="15" fill="rgb(250,228,7)" fg:x="8382" fg:w="3"/><text x="42.1642%" y="510.50"></text></g><g><title>http::uri::Uri::has_path (2 samples, 0.01%)</title><rect x="41.9192%" y="516" width="0.0100%" height="15" fill="rgb(226,125,25)" fg:x="8383" fg:w="2"/><text x="42.1692%" y="526.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (2 samples, 0.01%)</title><rect x="41.9392%" y="580" width="0.0100%" height="15" fill="rgb(224,165,27)" fg:x="8387" fg:w="2"/><text x="42.1892%" y="590.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (2 samples, 0.01%)</title><rect x="41.9392%" y="596" width="0.0100%" height="15" fill="rgb(233,86,3)" fg:x="8387" fg:w="2"/><text x="42.1892%" y="606.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (2 samples, 0.01%)</title><rect x="41.9392%" y="612" width="0.0100%" height="15" fill="rgb(228,116,20)" fg:x="8387" fg:w="2"/><text x="42.1892%" y="622.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (2 samples, 0.01%)</title><rect x="41.9392%" y="628" width="0.0100%" height="15" fill="rgb(209,192,17)" fg:x="8387" fg:w="2"/><text x="42.1892%" y="638.50"></text></g><g><title>hashbrown::map::make_hash (6 samples, 0.03%)</title><rect x="41.9342%" y="548" width="0.0300%" height="15" fill="rgb(224,88,34)" fg:x="8386" fg:w="6"/><text x="42.1842%" y="558.50"></text></g><g><title>core::hash::BuildHasher::hash_one (6 samples, 0.03%)</title><rect x="41.9342%" y="564" width="0.0300%" height="15" fill="rgb(233,38,6)" fg:x="8386" fg:w="6"/><text x="42.1842%" y="574.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="41.9492%" y="580" width="0.0150%" height="15" fill="rgb(212,59,30)" fg:x="8389" fg:w="3"/><text x="42.1992%" y="590.50"></text></g><g><title>&lt;axum::routing::RouteId as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="41.9492%" y="596" width="0.0150%" height="15" fill="rgb(213,80,3)" fg:x="8389" fg:w="3"/><text x="42.1992%" y="606.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u32&gt;::hash (3 samples, 0.02%)</title><rect x="41.9492%" y="612" width="0.0150%" height="15" fill="rgb(251,178,7)" fg:x="8389" fg:w="3"/><text x="42.1992%" y="622.50"></text></g><g><title>core::hash::Hasher::write_u32 (3 samples, 0.02%)</title><rect x="41.9492%" y="628" width="0.0150%" height="15" fill="rgb(213,154,26)" fg:x="8389" fg:w="3"/><text x="42.1992%" y="638.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="41.9492%" y="644" width="0.0150%" height="15" fill="rgb(238,165,49)" fg:x="8389" fg:w="3"/><text x="42.1992%" y="654.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="41.9492%" y="660" width="0.0150%" height="15" fill="rgb(248,91,46)" fg:x="8389" fg:w="3"/><text x="42.1992%" y="670.50"></text></g><g><title>_ZN71_$LT$core..hash..sip..Hasher$LT$S$GT$$u20$as$u20$core..hash..Hasher$GT$5write17he423fcfc9902852cE.llvm.11632034981812564955 (2 samples, 0.01%)</title><rect x="41.9542%" y="676" width="0.0100%" height="15" fill="rgb(244,21,52)" fg:x="8390" fg:w="2"/><text x="42.2042%" y="686.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (131 samples, 0.66%)</title><rect x="41.3341%" y="388" width="0.6551%" height="15" fill="rgb(247,122,20)" fg:x="8266" fg:w="131"/><text x="41.5841%" y="398.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (131 samples, 0.66%)</title><rect x="41.3341%" y="404" width="0.6551%" height="15" fill="rgb(218,27,9)" fg:x="8266" fg:w="131"/><text x="41.5841%" y="414.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (131 samples, 0.66%)</title><rect x="41.3341%" y="420" width="0.6551%" height="15" fill="rgb(246,7,6)" fg:x="8266" fg:w="131"/><text x="41.5841%" y="430.50"></text></g><g><title>&lt;T as hyper::service::http::HttpService&lt;B1&gt;&gt;::call (131 samples, 0.66%)</title><rect x="41.3341%" y="436" width="0.6551%" height="15" fill="rgb(227,135,54)" fg:x="8266" fg:w="131"/><text x="41.5841%" y="446.50"></text></g><g><title>&lt;axum::routing::Router&lt;(),B&gt; as tower_service::Service&lt;http::request::Request&lt;B&gt;&gt;&gt;::call (131 samples, 0.66%)</title><rect x="41.3341%" y="452" width="0.6551%" height="15" fill="rgb(247,14,11)" fg:x="8266" fg:w="131"/><text x="41.5841%" y="462.50"></text></g><g><title>axum::routing::Router&lt;S,B&gt;::call_with_state (131 samples, 0.66%)</title><rect x="41.3341%" y="468" width="0.6551%" height="15" fill="rgb(206,149,34)" fg:x="8266" fg:w="131"/><text x="41.5841%" y="478.50"></text></g><g><title>axum::routing::path_router::PathRouter&lt;S,B,_&gt;::call_with_state (131 samples, 0.66%)</title><rect x="41.3341%" y="484" width="0.6551%" height="15" fill="rgb(227,228,4)" fg:x="8266" fg:w="131"/><text x="41.5841%" y="494.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (12 samples, 0.06%)</title><rect x="41.9292%" y="500" width="0.0600%" height="15" fill="rgb(238,218,28)" fg:x="8385" fg:w="12"/><text x="42.1792%" y="510.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (12 samples, 0.06%)</title><rect x="41.9292%" y="516" width="0.0600%" height="15" fill="rgb(252,86,40)" fg:x="8385" fg:w="12"/><text x="42.1792%" y="526.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (12 samples, 0.06%)</title><rect x="41.9292%" y="532" width="0.0600%" height="15" fill="rgb(251,225,11)" fg:x="8385" fg:w="12"/><text x="42.1792%" y="542.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (5 samples, 0.03%)</title><rect x="41.9642%" y="548" width="0.0250%" height="15" fill="rgb(206,46,49)" fg:x="8392" fg:w="5"/><text x="42.2142%" y="558.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (5 samples, 0.03%)</title><rect x="41.9642%" y="564" width="0.0250%" height="15" fill="rgb(245,128,24)" fg:x="8392" fg:w="5"/><text x="42.2142%" y="574.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (5 samples, 0.03%)</title><rect x="41.9642%" y="580" width="0.0250%" height="15" fill="rgb(219,177,34)" fg:x="8392" fg:w="5"/><text x="42.2142%" y="590.50"></text></g><g><title>&lt;T as axum_core::extract::FromRequest&lt;S,B,axum_core::extract::private::ViaParts&gt;&gt;::from_request (5 samples, 0.03%)</title><rect x="42.0792%" y="644" width="0.0250%" height="15" fill="rgb(218,60,48)" fg:x="8415" fg:w="5"/><text x="42.3292%" y="654.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (5 samples, 0.03%)</title><rect x="42.0792%" y="660" width="0.0250%" height="15" fill="rgb(221,11,5)" fg:x="8415" fg:w="5"/><text x="42.3292%" y="670.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (5 samples, 0.03%)</title><rect x="42.0792%" y="676" width="0.0250%" height="15" fill="rgb(220,148,13)" fg:x="8415" fg:w="5"/><text x="42.3292%" y="686.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.02%)</title><rect x="42.0842%" y="692" width="0.0200%" height="15" fill="rgb(210,16,3)" fg:x="8416" fg:w="4"/><text x="42.3342%" y="702.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="42.0842%" y="708" width="0.0200%" height="15" fill="rgb(236,80,2)" fg:x="8416" fg:w="4"/><text x="42.3342%" y="718.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="42.0842%" y="724" width="0.0200%" height="15" fill="rgb(239,129,19)" fg:x="8416" fg:w="4"/><text x="42.3342%" y="734.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="42.0842%" y="740" width="0.0200%" height="15" fill="rgb(220,106,35)" fg:x="8416" fg:w="4"/><text x="42.3342%" y="750.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.02%)</title><rect x="42.0842%" y="756" width="0.0200%" height="15" fill="rgb(252,139,45)" fg:x="8416" fg:w="4"/><text x="42.3342%" y="766.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="42.0942%" y="772" width="0.0100%" height="15" fill="rgb(229,8,36)" fg:x="8418" fg:w="2"/><text x="42.3442%" y="782.50"></text></g><g><title>&lt;T as axum_core::extract::FromRequest&lt;S,B,axum_core::extract::private::ViaParts&gt;&gt;::from_request::_{{closure}} (9 samples, 0.05%)</title><rect x="42.1042%" y="660" width="0.0450%" height="15" fill="rgb(230,126,33)" fg:x="8420" fg:w="9"/><text x="42.3542%" y="670.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (11 samples, 0.06%)</title><rect x="42.1042%" y="644" width="0.0550%" height="15" fill="rgb(239,140,21)" fg:x="8420" fg:w="11"/><text x="42.3542%" y="654.50"></text></g><g><title>core::pin::Pin&lt;&amp;mut core::pin::Pin&lt;P&gt;&gt;::as_deref_mut (2 samples, 0.01%)</title><rect x="42.1492%" y="660" width="0.0100%" height="15" fill="rgb(254,104,9)" fg:x="8429" fg:w="2"/><text x="42.3992%" y="670.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (2 samples, 0.01%)</title><rect x="42.1492%" y="676" width="0.0100%" height="15" fill="rgb(239,52,14)" fg:x="8429" fg:w="2"/><text x="42.3992%" y="686.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="42.1492%" y="692" width="0.0100%" height="15" fill="rgb(208,227,44)" fg:x="8429" fg:w="2"/><text x="42.3992%" y="702.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;http::header::value::HeaderValue&gt;&gt; (3 samples, 0.02%)</title><rect x="42.2192%" y="724" width="0.0150%" height="15" fill="rgb(246,18,19)" fg:x="8443" fg:w="3"/><text x="42.4692%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::value::HeaderValue&gt; (3 samples, 0.02%)</title><rect x="42.2192%" y="740" width="0.0150%" height="15" fill="rgb(235,228,25)" fg:x="8443" fg:w="3"/><text x="42.4692%" y="750.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.02%)</title><rect x="42.2192%" y="756" width="0.0150%" height="15" fill="rgb(240,156,20)" fg:x="8443" fg:w="3"/><text x="42.4692%" y="766.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="42.2192%" y="772" width="0.0150%" height="15" fill="rgb(224,8,20)" fg:x="8443" fg:w="3"/><text x="42.4692%" y="782.50"></text></g><g><title>&lt;[(K,V): N] as axum_core::response::into_response_parts::IntoResponseParts&gt;::into_response_parts (2 samples, 0.01%)</title><rect x="42.2342%" y="756" width="0.0100%" height="15" fill="rgb(214,12,52)" fg:x="8446" fg:w="2"/><text x="42.4842%" y="766.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_occupied (3 samples, 0.02%)</title><rect x="42.2492%" y="772" width="0.0150%" height="15" fill="rgb(211,220,47)" fg:x="8449" fg:w="3"/><text x="42.4992%" y="782.50"></text></g><g><title>core::mem::replace (3 samples, 0.02%)</title><rect x="42.2492%" y="788" width="0.0150%" height="15" fill="rgb(250,173,5)" fg:x="8449" fg:w="3"/><text x="42.4992%" y="798.50"></text></g><g><title>core::ptr::read (3 samples, 0.02%)</title><rect x="42.2492%" y="804" width="0.0150%" height="15" fill="rgb(250,125,52)" fg:x="8449" fg:w="3"/><text x="42.4992%" y="814.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (2 samples, 0.01%)</title><rect x="42.2642%" y="772" width="0.0100%" height="15" fill="rgb(209,133,18)" fg:x="8452" fg:w="2"/><text x="42.5142%" y="782.50"></text></g><g><title>&lt;[(K,V): N] as axum_core::response::into_response_parts::IntoResponseParts&gt;::into_response_parts (19 samples, 0.10%)</title><rect x="42.1992%" y="708" width="0.0950%" height="15" fill="rgb(216,173,22)" fg:x="8439" fg:w="19"/><text x="42.4492%" y="718.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (12 samples, 0.06%)</title><rect x="42.2342%" y="724" width="0.0600%" height="15" fill="rgb(205,3,22)" fg:x="8446" fg:w="12"/><text x="42.4842%" y="734.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::insert (12 samples, 0.06%)</title><rect x="42.2342%" y="740" width="0.0600%" height="15" fill="rgb(248,22,20)" fg:x="8446" fg:w="12"/><text x="42.4842%" y="750.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert2 (10 samples, 0.05%)</title><rect x="42.2442%" y="756" width="0.0500%" height="15" fill="rgb(233,6,29)" fg:x="8448" fg:w="10"/><text x="42.4942%" y="766.50"></text></g><g><title>http::header::map::hash_elem_using (4 samples, 0.02%)</title><rect x="42.2742%" y="772" width="0.0200%" height="15" fill="rgb(240,22,54)" fg:x="8454" fg:w="4"/><text x="42.5242%" y="782.50"></text></g><g><title>&lt;http::header::name::HeaderName as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="42.2792%" y="788" width="0.0150%" height="15" fill="rgb(231,133,32)" fg:x="8455" fg:w="3"/><text x="42.5292%" y="798.50"></text></g><g><title>&lt;http::header::name::Repr&lt;T&gt; as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="42.2792%" y="804" width="0.0150%" height="15" fill="rgb(248,193,4)" fg:x="8455" fg:w="3"/><text x="42.5292%" y="814.50"></text></g><g><title>&lt;http_body::full::Full&lt;bytes::bytes::Bytes&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response (6 samples, 0.03%)</title><rect x="42.3092%" y="724" width="0.0300%" height="15" fill="rgb(211,178,46)" fg:x="8461" fg:w="6"/><text x="42.5592%" y="734.50"></text></g><g><title>http::response::Response&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="42.3292%" y="740" width="0.0100%" height="15" fill="rgb(224,5,42)" fg:x="8465" fg:w="2"/><text x="42.5792%" y="750.50"></text></g><g><title>http::response::Parts::new (2 samples, 0.01%)</title><rect x="42.3292%" y="756" width="0.0100%" height="15" fill="rgb(239,176,25)" fg:x="8465" fg:w="2"/><text x="42.5792%" y="766.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_entry (4 samples, 0.02%)</title><rect x="42.3542%" y="772" width="0.0200%" height="15" fill="rgb(245,187,50)" fg:x="8470" fg:w="4"/><text x="42.6042%" y="782.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.02%)</title><rect x="42.3592%" y="788" width="0.0150%" height="15" fill="rgb(248,24,15)" fg:x="8471" fg:w="3"/><text x="42.6092%" y="798.50"></text></g><g><title>core::ptr::write (2 samples, 0.01%)</title><rect x="42.3642%" y="804" width="0.0100%" height="15" fill="rgb(205,166,13)" fg:x="8472" fg:w="2"/><text x="42.6142%" y="814.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.03%)</title><rect x="42.4042%" y="900" width="0.0250%" height="15" fill="rgb(208,114,23)" fg:x="8480" fg:w="5"/><text x="42.6542%" y="910.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="42.4142%" y="916" width="0.0150%" height="15" fill="rgb(239,127,18)" fg:x="8482" fg:w="3"/><text x="42.6642%" y="926.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.03%)</title><rect x="42.4042%" y="788" width="0.0300%" height="15" fill="rgb(219,154,28)" fg:x="8480" fg:w="6"/><text x="42.6542%" y="798.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.03%)</title><rect x="42.4042%" y="804" width="0.0300%" height="15" fill="rgb(225,157,23)" fg:x="8480" fg:w="6"/><text x="42.6542%" y="814.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.03%)</title><rect x="42.4042%" y="820" width="0.0300%" height="15" fill="rgb(219,8,6)" fg:x="8480" fg:w="6"/><text x="42.6542%" y="830.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.03%)</title><rect x="42.4042%" y="836" width="0.0300%" height="15" fill="rgb(212,47,6)" fg:x="8480" fg:w="6"/><text x="42.6542%" y="846.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="42.4042%" y="852" width="0.0300%" height="15" fill="rgb(224,190,4)" fg:x="8480" fg:w="6"/><text x="42.6542%" y="862.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="42.4042%" y="868" width="0.0300%" height="15" fill="rgb(239,183,29)" fg:x="8480" fg:w="6"/><text x="42.6542%" y="878.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="42.4042%" y="884" width="0.0300%" height="15" fill="rgb(213,57,7)" fg:x="8480" fg:w="6"/><text x="42.6542%" y="894.50"></text></g><g><title>_int_malloc (5 samples, 0.03%)</title><rect x="42.4442%" y="932" width="0.0250%" height="15" fill="rgb(216,148,1)" fg:x="8488" fg:w="5"/><text x="42.6942%" y="942.50"></text></g><g><title>alloc::vec::from_elem (8 samples, 0.04%)</title><rect x="42.4342%" y="788" width="0.0400%" height="15" fill="rgb(236,182,29)" fg:x="8486" fg:w="8"/><text x="42.6842%" y="798.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (8 samples, 0.04%)</title><rect x="42.4342%" y="804" width="0.0400%" height="15" fill="rgb(244,120,48)" fg:x="8486" fg:w="8"/><text x="42.6842%" y="814.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.04%)</title><rect x="42.4392%" y="820" width="0.0350%" height="15" fill="rgb(206,71,34)" fg:x="8487" fg:w="7"/><text x="42.6892%" y="830.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.04%)</title><rect x="42.4392%" y="836" width="0.0350%" height="15" fill="rgb(242,32,6)" fg:x="8487" fg:w="7"/><text x="42.6892%" y="846.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.04%)</title><rect x="42.4392%" y="852" width="0.0350%" height="15" fill="rgb(241,35,3)" fg:x="8487" fg:w="7"/><text x="42.6892%" y="862.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.04%)</title><rect x="42.4392%" y="868" width="0.0350%" height="15" fill="rgb(222,62,19)" fg:x="8487" fg:w="7"/><text x="42.6892%" y="878.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.04%)</title><rect x="42.4392%" y="884" width="0.0350%" height="15" fill="rgb(223,110,41)" fg:x="8487" fg:w="7"/><text x="42.6892%" y="894.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.04%)</title><rect x="42.4392%" y="900" width="0.0350%" height="15" fill="rgb(208,224,4)" fg:x="8487" fg:w="7"/><text x="42.6892%" y="910.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.04%)</title><rect x="42.4392%" y="916" width="0.0350%" height="15" fill="rgb(241,137,19)" fg:x="8487" fg:w="7"/><text x="42.6892%" y="926.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (24 samples, 0.12%)</title><rect x="42.3742%" y="772" width="0.1200%" height="15" fill="rgb(244,24,17)" fg:x="8474" fg:w="24"/><text x="42.6242%" y="782.50"></text></g><g><title>http::header::map::Danger::is_yellow (3 samples, 0.02%)</title><rect x="42.4792%" y="788" width="0.0150%" height="15" fill="rgb(245,178,49)" fg:x="8495" fg:w="3"/><text x="42.7292%" y="798.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (31 samples, 0.16%)</title><rect x="42.3442%" y="724" width="0.1550%" height="15" fill="rgb(219,160,38)" fg:x="8468" fg:w="31"/><text x="42.5942%" y="734.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::insert (31 samples, 0.16%)</title><rect x="42.3442%" y="740" width="0.1550%" height="15" fill="rgb(228,137,14)" fg:x="8468" fg:w="31"/><text x="42.5942%" y="750.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert2 (31 samples, 0.16%)</title><rect x="42.3442%" y="756" width="0.1550%" height="15" fill="rgb(237,134,11)" fg:x="8468" fg:w="31"/><text x="42.5942%" y="766.50"></text></g><g><title>&lt;(T1,R) as axum_core::response::into_response::IntoResponse&gt;::into_response (66 samples, 0.33%)</title><rect x="42.1942%" y="692" width="0.3300%" height="15" fill="rgb(211,126,44)" fg:x="8438" fg:w="66"/><text x="42.4442%" y="702.50"></text></g><g><title>&lt;bytes::bytes::Bytes as axum_core::response::into_response::IntoResponse&gt;::into_response (46 samples, 0.23%)</title><rect x="42.2942%" y="708" width="0.2300%" height="15" fill="rgb(226,171,33)" fg:x="8458" fg:w="46"/><text x="42.5442%" y="718.50"></text></g><g><title>http::header::value::HeaderValue::from_static (5 samples, 0.03%)</title><rect x="42.4992%" y="724" width="0.0250%" height="15" fill="rgb(253,99,13)" fg:x="8499" fg:w="5"/><text x="42.7492%" y="734.50"></text></g><g><title>http::header::value::is_visible_ascii (2 samples, 0.01%)</title><rect x="42.5143%" y="740" width="0.0100%" height="15" fill="rgb(244,48,7)" fg:x="8502" fg:w="2"/><text x="42.7643%" y="750.50"></text></g><g><title>&lt;mime::Mime as core::convert::AsRef&lt;str&gt;&gt;::as_ref (5 samples, 0.03%)</title><rect x="42.5243%" y="692" width="0.0250%" height="15" fill="rgb(244,217,54)" fg:x="8504" fg:w="5"/><text x="42.7743%" y="702.50"></text></g><g><title>mime::Source::as_ref (5 samples, 0.03%)</title><rect x="42.5243%" y="708" width="0.0250%" height="15" fill="rgb(224,15,18)" fg:x="8504" fg:w="5"/><text x="42.7743%" y="718.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="42.5843%" y="820" width="0.0100%" height="15" fill="rgb(244,99,12)" fg:x="8516" fg:w="2"/><text x="42.8343%" y="830.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (4 samples, 0.02%)</title><rect x="42.5843%" y="708" width="0.0200%" height="15" fill="rgb(233,226,8)" fg:x="8516" fg:w="4"/><text x="42.8343%" y="718.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::convert::From&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::from (4 samples, 0.02%)</title><rect x="42.5843%" y="724" width="0.0200%" height="15" fill="rgb(229,211,3)" fg:x="8516" fg:w="4"/><text x="42.8343%" y="734.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="42.5843%" y="740" width="0.0200%" height="15" fill="rgb(216,140,21)" fg:x="8516" fg:w="4"/><text x="42.8343%" y="750.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.02%)</title><rect x="42.5843%" y="756" width="0.0200%" height="15" fill="rgb(234,122,30)" fg:x="8516" fg:w="4"/><text x="42.8343%" y="766.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.02%)</title><rect x="42.5843%" y="772" width="0.0200%" height="15" fill="rgb(236,25,46)" fg:x="8516" fg:w="4"/><text x="42.8343%" y="782.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.02%)</title><rect x="42.5843%" y="788" width="0.0200%" height="15" fill="rgb(217,52,54)" fg:x="8516" fg:w="4"/><text x="42.8343%" y="798.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.02%)</title><rect x="42.5843%" y="804" width="0.0200%" height="15" fill="rgb(222,29,26)" fg:x="8516" fg:w="4"/><text x="42.8343%" y="814.50"></text></g><g><title>__rdl_alloc (2 samples, 0.01%)</title><rect x="42.5943%" y="820" width="0.0100%" height="15" fill="rgb(216,177,29)" fg:x="8518" fg:w="2"/><text x="42.8443%" y="830.50"></text></g><g><title>bytes::bytes_mut::BytesMut::freeze (14 samples, 0.07%)</title><rect x="42.5493%" y="692" width="0.0700%" height="15" fill="rgb(247,136,51)" fg:x="8509" fg:w="14"/><text x="42.7993%" y="702.50"></text></g><g><title>bytes::bytes_mut::rebuild_vec (3 samples, 0.02%)</title><rect x="42.6043%" y="708" width="0.0150%" height="15" fill="rgb(231,47,47)" fg:x="8520" fg:w="3"/><text x="42.8543%" y="718.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.01%)</title><rect x="42.6093%" y="724" width="0.0100%" height="15" fill="rgb(211,192,36)" fg:x="8521" fg:w="2"/><text x="42.8593%" y="734.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="42.6193%" y="820" width="0.0100%" height="15" fill="rgb(229,156,32)" fg:x="8523" fg:w="2"/><text x="42.8693%" y="830.50"></text></g><g><title>bytes::bytes_mut::BytesMut::with_capacity (3 samples, 0.02%)</title><rect x="42.6193%" y="692" width="0.0150%" height="15" fill="rgb(248,213,20)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="702.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.02%)</title><rect x="42.6193%" y="708" width="0.0150%" height="15" fill="rgb(217,64,7)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="718.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="42.6193%" y="724" width="0.0150%" height="15" fill="rgb(232,142,8)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="734.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.02%)</title><rect x="42.6193%" y="740" width="0.0150%" height="15" fill="rgb(224,92,44)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="750.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.02%)</title><rect x="42.6193%" y="756" width="0.0150%" height="15" fill="rgb(214,169,17)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="766.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="42.6193%" y="772" width="0.0150%" height="15" fill="rgb(210,59,37)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="782.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="42.6193%" y="788" width="0.0150%" height="15" fill="rgb(214,116,48)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="798.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="42.6193%" y="804" width="0.0150%" height="15" fill="rgb(244,191,6)" fg:x="8523" fg:w="3"/><text x="42.8693%" y="814.50"></text></g><g><title>&lt;(http::status::StatusCode,R) as axum_core::response::into_response::IntoResponse&gt;::into_response (2 samples, 0.01%)</title><rect x="42.6543%" y="852" width="0.0100%" height="15" fill="rgb(241,50,52)" fg:x="8530" fg:w="2"/><text x="42.9043%" y="862.50"></text></g><g><title>_int_free (257 samples, 1.29%)</title><rect x="43.1943%" y="884" width="1.2851%" height="15" fill="rgb(236,75,39)" fg:x="8638" fg:w="257"/><text x="43.4443%" y="894.50"></text></g><g><title>tcache_put (2 samples, 0.01%)</title><rect x="44.4694%" y="900" width="0.0100%" height="15" fill="rgb(236,99,0)" fg:x="8893" fg:w="2"/><text x="44.7194%" y="910.50"></text></g><g><title>__GI___libc_free (370 samples, 1.85%)</title><rect x="42.6693%" y="868" width="1.8502%" height="15" fill="rgb(207,202,15)" fg:x="8533" fg:w="370"/><text x="42.9193%" y="878.50">_..</text></g><g><title>arena_for_chunk (8 samples, 0.04%)</title><rect x="44.4794%" y="884" width="0.0400%" height="15" fill="rgb(233,207,14)" fg:x="8895" fg:w="8"/><text x="44.7294%" y="894.50"></text></g><g><title>arena_for_chunk (8 samples, 0.04%)</title><rect x="44.4794%" y="900" width="0.0400%" height="15" fill="rgb(226,27,51)" fg:x="8895" fg:w="8"/><text x="44.7294%" y="910.50"></text></g><g><title>heap_for_ptr (4 samples, 0.02%)</title><rect x="44.4994%" y="916" width="0.0200%" height="15" fill="rgb(206,104,42)" fg:x="8899" fg:w="4"/><text x="44.7494%" y="926.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.01%)</title><rect x="44.5195%" y="868" width="0.0100%" height="15" fill="rgb(212,225,4)" fg:x="8903" fg:w="2"/><text x="44.7695%" y="878.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.01%)</title><rect x="44.5195%" y="884" width="0.0100%" height="15" fill="rgb(233,96,42)" fg:x="8903" fg:w="2"/><text x="44.7695%" y="894.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (379 samples, 1.90%)</title><rect x="42.6543%" y="836" width="1.8952%" height="15" fill="rgb(229,21,32)" fg:x="8530" fg:w="379"/><text x="42.9043%" y="846.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (377 samples, 1.89%)</title><rect x="42.6643%" y="852" width="1.8852%" height="15" fill="rgb(226,216,24)" fg:x="8532" fg:w="377"/><text x="42.9143%" y="862.50">a..</text></g><g><title>__rust_dealloc (4 samples, 0.02%)</title><rect x="44.5295%" y="868" width="0.0200%" height="15" fill="rgb(221,163,17)" fg:x="8905" fg:w="4"/><text x="44.7795%" y="878.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (387 samples, 1.94%)</title><rect x="42.6343%" y="724" width="1.9352%" height="15" fill="rgb(216,216,42)" fg:x="8526" fg:w="387"/><text x="42.8843%" y="734.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;[rust_axum::User]&gt; (387 samples, 1.94%)</title><rect x="42.6343%" y="740" width="1.9352%" height="15" fill="rgb(240,118,7)" fg:x="8526" fg:w="387"/><text x="42.8843%" y="750.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;rust_axum::User&gt; (384 samples, 1.92%)</title><rect x="42.6493%" y="756" width="1.9202%" height="15" fill="rgb(221,67,37)" fg:x="8529" fg:w="384"/><text x="42.8993%" y="766.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (384 samples, 1.92%)</title><rect x="42.6493%" y="772" width="1.9202%" height="15" fill="rgb(241,32,44)" fg:x="8529" fg:w="384"/><text x="42.8993%" y="782.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (384 samples, 1.92%)</title><rect x="42.6493%" y="788" width="1.9202%" height="15" fill="rgb(235,204,43)" fg:x="8529" fg:w="384"/><text x="42.8993%" y="798.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (384 samples, 1.92%)</title><rect x="42.6493%" y="804" width="1.9202%" height="15" fill="rgb(213,116,10)" fg:x="8529" fg:w="384"/><text x="42.8993%" y="814.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (384 samples, 1.92%)</title><rect x="42.6493%" y="820" width="1.9202%" height="15" fill="rgb(239,15,48)" fg:x="8529" fg:w="384"/><text x="42.8993%" y="830.50">&lt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.02%)</title><rect x="44.5495%" y="836" width="0.0200%" height="15" fill="rgb(207,123,36)" fg:x="8909" fg:w="4"/><text x="44.7995%" y="846.50"></text></g><g><title>__GI___lll_lock_wake_private (4 samples, 0.02%)</title><rect x="44.5895%" y="804" width="0.0200%" height="15" fill="rgb(209,103,30)" fg:x="8917" fg:w="4"/><text x="44.8395%" y="814.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="44.5895%" y="820" width="0.0200%" height="15" fill="rgb(238,100,19)" fg:x="8917" fg:w="4"/><text x="44.8395%" y="830.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="44.5945%" y="836" width="0.0150%" height="15" fill="rgb(244,30,14)" fg:x="8918" fg:w="3"/><text x="44.8445%" y="846.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="44.5995%" y="852" width="0.0100%" height="15" fill="rgb(249,174,6)" fg:x="8919" fg:w="2"/><text x="44.8495%" y="862.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="44.5995%" y="868" width="0.0100%" height="15" fill="rgb(235,213,41)" fg:x="8919" fg:w="2"/><text x="44.8495%" y="878.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="44.5995%" y="884" width="0.0100%" height="15" fill="rgb(213,118,6)" fg:x="8919" fg:w="2"/><text x="44.8495%" y="894.50"></text></g><g><title>malloc_consolidate (2 samples, 0.01%)</title><rect x="44.6545%" y="820" width="0.0100%" height="15" fill="rgb(235,44,51)" fg:x="8930" fg:w="2"/><text x="44.9045%" y="830.50"></text></g><g><title>__GI___libc_free (20 samples, 0.10%)</title><rect x="44.5695%" y="788" width="0.1000%" height="15" fill="rgb(217,9,53)" fg:x="8913" fg:w="20"/><text x="44.8195%" y="798.50"></text></g><g><title>_int_free (12 samples, 0.06%)</title><rect x="44.6095%" y="804" width="0.0600%" height="15" fill="rgb(237,172,34)" fg:x="8921" fg:w="12"/><text x="44.8595%" y="814.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::json::Json&lt;alloc::vec::Vec&lt;rust_axum::User&gt;&gt;&gt; (408 samples, 2.04%)</title><rect x="42.6343%" y="692" width="2.0402%" height="15" fill="rgb(206,206,11)" fg:x="8526" fg:w="408"/><text x="42.8843%" y="702.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;rust_axum::User&gt;&gt; (408 samples, 2.04%)</title><rect x="42.6343%" y="708" width="2.0402%" height="15" fill="rgb(214,149,29)" fg:x="8526" fg:w="408"/><text x="42.8843%" y="718.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;rust_axum::User&gt;&gt; (21 samples, 0.11%)</title><rect x="44.5695%" y="724" width="0.1050%" height="15" fill="rgb(208,123,3)" fg:x="8913" fg:w="21"/><text x="44.8195%" y="734.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.11%)</title><rect x="44.5695%" y="740" width="0.1050%" height="15" fill="rgb(229,126,4)" fg:x="8913" fg:w="21"/><text x="44.8195%" y="750.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (21 samples, 0.11%)</title><rect x="44.5695%" y="756" width="0.1050%" height="15" fill="rgb(222,92,36)" fg:x="8913" fg:w="21"/><text x="44.8195%" y="766.50"></text></g><g><title>alloc::alloc::dealloc (21 samples, 0.11%)</title><rect x="44.5695%" y="772" width="0.1050%" height="15" fill="rgb(216,39,41)" fg:x="8913" fg:w="21"/><text x="44.8195%" y="782.50"></text></g><g><title>http::header::value::HeaderValue::from_static (5 samples, 0.03%)</title><rect x="44.6745%" y="692" width="0.0250%" height="15" fill="rgb(253,127,28)" fg:x="8934" fg:w="5"/><text x="44.9245%" y="702.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (3 samples, 0.02%)</title><rect x="44.7195%" y="804" width="0.0150%" height="15" fill="rgb(249,152,51)" fg:x="8943" fg:w="3"/><text x="44.9695%" y="814.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (3 samples, 0.02%)</title><rect x="44.7195%" y="820" width="0.0150%" height="15" fill="rgb(209,123,42)" fg:x="8943" fg:w="3"/><text x="44.9695%" y="830.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (3 samples, 0.02%)</title><rect x="44.7195%" y="836" width="0.0150%" height="15" fill="rgb(241,118,22)" fg:x="8943" fg:w="3"/><text x="44.9695%" y="846.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="44.7245%" y="852" width="0.0100%" height="15" fill="rgb(208,25,7)" fg:x="8944" fg:w="2"/><text x="44.9745%" y="862.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_seq (5 samples, 0.03%)</title><rect x="44.7145%" y="740" width="0.0250%" height="15" fill="rgb(243,144,39)" fg:x="8942" fg:w="5"/><text x="44.9645%" y="750.50"></text></g><g><title>serde_json::ser::Formatter::begin_array (5 samples, 0.03%)</title><rect x="44.7145%" y="756" width="0.0250%" height="15" fill="rgb(250,50,5)" fg:x="8942" fg:w="5"/><text x="44.9645%" y="766.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.03%)</title><rect x="44.7145%" y="772" width="0.0250%" height="15" fill="rgb(207,67,11)" fg:x="8942" fg:w="5"/><text x="44.9645%" y="782.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.02%)</title><rect x="44.7195%" y="788" width="0.0200%" height="15" fill="rgb(245,204,40)" fg:x="8943" fg:w="4"/><text x="44.9695%" y="798.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="44.7595%" y="772" width="0.0200%" height="15" fill="rgb(238,228,24)" fg:x="8951" fg:w="4"/><text x="45.0095%" y="782.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.02%)</title><rect x="44.8295%" y="884" width="0.0150%" height="15" fill="rgb(217,116,22)" fg:x="8965" fg:w="3"/><text x="45.0795%" y="894.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (2 samples, 0.01%)</title><rect x="44.9345%" y="980" width="0.0100%" height="15" fill="rgb(234,98,12)" fg:x="8986" fg:w="2"/><text x="45.1845%" y="990.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (2 samples, 0.01%)</title><rect x="44.9445%" y="980" width="0.0100%" height="15" fill="rgb(242,170,50)" fg:x="8988" fg:w="2"/><text x="45.1945%" y="990.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.05%)</title><rect x="44.9545%" y="996" width="0.0500%" height="15" fill="rgb(235,7,5)" fg:x="8990" fg:w="10"/><text x="45.2045%" y="1006.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.12%)</title><rect x="44.9545%" y="980" width="0.1150%" height="15" fill="rgb(241,114,28)" fg:x="8990" fg:w="23"/><text x="45.2045%" y="990.50"></text></g><g><title>__memmove_avx_unaligned (13 samples, 0.07%)</title><rect x="45.0045%" y="996" width="0.0650%" height="15" fill="rgb(246,112,42)" fg:x="9000" fg:w="13"/><text x="45.2545%" y="1006.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (34 samples, 0.17%)</title><rect x="44.9095%" y="948" width="0.1700%" height="15" fill="rgb(248,228,14)" fg:x="8981" fg:w="34"/><text x="45.1595%" y="958.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (29 samples, 0.15%)</title><rect x="44.9345%" y="964" width="0.1450%" height="15" fill="rgb(208,133,18)" fg:x="8986" fg:w="29"/><text x="45.1845%" y="974.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.01%)</title><rect x="45.0695%" y="980" width="0.0100%" height="15" fill="rgb(207,35,49)" fg:x="9013" fg:w="2"/><text x="45.3195%" y="990.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (36 samples, 0.18%)</title><rect x="44.9095%" y="932" width="0.1800%" height="15" fill="rgb(205,68,36)" fg:x="8981" fg:w="36"/><text x="45.1595%" y="942.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_struct (64 samples, 0.32%)</title><rect x="44.8295%" y="852" width="0.3200%" height="15" fill="rgb(245,62,40)" fg:x="8965" fg:w="64"/><text x="45.0795%" y="862.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_map (64 samples, 0.32%)</title><rect x="44.8295%" y="868" width="0.3200%" height="15" fill="rgb(228,27,24)" fg:x="8965" fg:w="64"/><text x="45.0795%" y="878.50"></text></g><g><title>serde_json::ser::Formatter::begin_object (61 samples, 0.31%)</title><rect x="44.8445%" y="884" width="0.3050%" height="15" fill="rgb(253,19,12)" fg:x="8968" fg:w="61"/><text x="45.0945%" y="894.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (61 samples, 0.31%)</title><rect x="44.8445%" y="900" width="0.3050%" height="15" fill="rgb(232,28,20)" fg:x="8968" fg:w="61"/><text x="45.0945%" y="910.50"></text></g><g><title>std::io::Write::write_all (60 samples, 0.30%)</title><rect x="44.8495%" y="916" width="0.3000%" height="15" fill="rgb(218,35,51)" fg:x="8969" fg:w="60"/><text x="45.0995%" y="926.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (12 samples, 0.06%)</title><rect x="45.0895%" y="932" width="0.0600%" height="15" fill="rgb(212,90,40)" fg:x="9017" fg:w="12"/><text x="45.3395%" y="942.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="45.1695%" y="884" width="0.0100%" height="15" fill="rgb(220,172,12)" fg:x="9033" fg:w="2"/><text x="45.4195%" y="894.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (3 samples, 0.02%)</title><rect x="45.2595%" y="980" width="0.0150%" height="15" fill="rgb(226,159,20)" fg:x="9051" fg:w="3"/><text x="45.5095%" y="990.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.04%)</title><rect x="45.2895%" y="996" width="0.0400%" height="15" fill="rgb(234,205,16)" fg:x="9057" fg:w="8"/><text x="45.5395%" y="1006.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.11%)</title><rect x="45.2745%" y="980" width="0.1050%" height="15" fill="rgb(207,9,39)" fg:x="9054" fg:w="21"/><text x="45.5245%" y="990.50"></text></g><g><title>__memmove_avx_unaligned (10 samples, 0.05%)</title><rect x="45.3295%" y="996" width="0.0500%" height="15" fill="rgb(249,143,15)" fg:x="9065" fg:w="10"/><text x="45.5795%" y="1006.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (33 samples, 0.17%)</title><rect x="45.2445%" y="948" width="0.1650%" height="15" fill="rgb(253,133,29)" fg:x="9048" fg:w="33"/><text x="45.4945%" y="958.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (30 samples, 0.15%)</title><rect x="45.2595%" y="964" width="0.1500%" height="15" fill="rgb(221,187,0)" fg:x="9051" fg:w="30"/><text x="45.5095%" y="974.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.03%)</title><rect x="45.3795%" y="980" width="0.0300%" height="15" fill="rgb(205,204,26)" fg:x="9075" fg:w="6"/><text x="45.6295%" y="990.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (7 samples, 0.04%)</title><rect x="45.4095%" y="948" width="0.0350%" height="15" fill="rgb(224,68,54)" fg:x="9081" fg:w="7"/><text x="45.6595%" y="958.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (44 samples, 0.22%)</title><rect x="45.2445%" y="932" width="0.2200%" height="15" fill="rgb(209,67,4)" fg:x="9048" fg:w="44"/><text x="45.4945%" y="942.50"></text></g><g><title>core::cmp::min (4 samples, 0.02%)</title><rect x="45.4445%" y="948" width="0.0200%" height="15" fill="rgb(228,229,18)" fg:x="9088" fg:w="4"/><text x="45.6945%" y="958.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.02%)</title><rect x="45.4445%" y="964" width="0.0200%" height="15" fill="rgb(231,89,13)" fg:x="9088" fg:w="4"/><text x="45.6945%" y="974.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.02%)</title><rect x="45.4445%" y="980" width="0.0200%" height="15" fill="rgb(210,182,18)" fg:x="9088" fg:w="4"/><text x="45.6945%" y="990.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::end (68 samples, 0.34%)</title><rect x="45.1545%" y="852" width="0.3400%" height="15" fill="rgb(240,105,2)" fg:x="9030" fg:w="68"/><text x="45.4045%" y="862.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (66 samples, 0.33%)</title><rect x="45.1645%" y="868" width="0.3300%" height="15" fill="rgb(207,170,50)" fg:x="9032" fg:w="66"/><text x="45.4145%" y="878.50"></text></g><g><title>serde_json::ser::Formatter::end_object (63 samples, 0.32%)</title><rect x="45.1795%" y="884" width="0.3150%" height="15" fill="rgb(232,133,24)" fg:x="9035" fg:w="63"/><text x="45.4295%" y="894.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (63 samples, 0.32%)</title><rect x="45.1795%" y="900" width="0.3150%" height="15" fill="rgb(235,166,27)" fg:x="9035" fg:w="63"/><text x="45.4295%" y="910.50"></text></g><g><title>std::io::Write::write_all (58 samples, 0.29%)</title><rect x="45.2045%" y="916" width="0.2900%" height="15" fill="rgb(209,19,13)" fg:x="9040" fg:w="58"/><text x="45.4545%" y="926.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (6 samples, 0.03%)</title><rect x="45.4645%" y="932" width="0.0300%" height="15" fill="rgb(226,79,39)" fg:x="9092" fg:w="6"/><text x="45.7145%" y="942.50"></text></g><g><title>&lt;serde_json::ser::State as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="45.7946%" y="900" width="0.0200%" height="15" fill="rgb(222,163,10)" fg:x="9158" fg:w="4"/><text x="46.0446%" y="910.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (8 samples, 0.04%)</title><rect x="45.8146%" y="900" width="0.0400%" height="15" fill="rgb(214,44,19)" fg:x="9162" fg:w="8"/><text x="46.0646%" y="910.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.02%)</title><rect x="45.9196%" y="948" width="0.0150%" height="15" fill="rgb(210,217,13)" fg:x="9183" fg:w="3"/><text x="46.1696%" y="958.50"></text></g><g><title>_ZN10serde_json3ser18format_escaped_str17ha1293577635e556eE.llvm.10229501221164700075 (8 samples, 0.04%)</title><rect x="46.3096%" y="964" width="0.0400%" height="15" fill="rgb(237,61,54)" fg:x="9261" fg:w="8"/><text x="46.5596%" y="974.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (10 samples, 0.05%)</title><rect x="46.5497%" y="1060" width="0.0500%" height="15" fill="rgb(226,184,24)" fg:x="9309" fg:w="10"/><text x="46.7997%" y="1070.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (10 samples, 0.05%)</title><rect x="46.5997%" y="1060" width="0.0500%" height="15" fill="rgb(223,226,4)" fg:x="9319" fg:w="10"/><text x="46.8497%" y="1070.50"></text></g><g><title>__memcpy_avx_unaligned_erms (28 samples, 0.14%)</title><rect x="46.6547%" y="1076" width="0.1400%" height="15" fill="rgb(210,26,41)" fg:x="9330" fg:w="28"/><text x="46.9047%" y="1086.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.28%)</title><rect x="46.6497%" y="1060" width="0.2800%" height="15" fill="rgb(220,221,6)" fg:x="9329" fg:w="56"/><text x="46.8997%" y="1070.50"></text></g><g><title>__memmove_avx_unaligned (27 samples, 0.14%)</title><rect x="46.7947%" y="1076" width="0.1350%" height="15" fill="rgb(225,89,49)" fg:x="9358" fg:w="27"/><text x="47.0447%" y="1086.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (100 samples, 0.50%)</title><rect x="46.5097%" y="1028" width="0.5001%" height="15" fill="rgb(218,70,45)" fg:x="9301" fg:w="100"/><text x="46.7597%" y="1038.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (92 samples, 0.46%)</title><rect x="46.5497%" y="1044" width="0.4600%" height="15" fill="rgb(238,166,21)" fg:x="9309" fg:w="92"/><text x="46.7997%" y="1054.50"></text></g><g><title>std::io::Write::write_all (16 samples, 0.08%)</title><rect x="46.9297%" y="1060" width="0.0800%" height="15" fill="rgb(224,141,44)" fg:x="9385" fg:w="16"/><text x="47.1797%" y="1070.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (9 samples, 0.05%)</title><rect x="47.0097%" y="1028" width="0.0450%" height="15" fill="rgb(230,12,49)" fg:x="9401" fg:w="9"/><text x="47.2597%" y="1038.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (115 samples, 0.58%)</title><rect x="46.5047%" y="1012" width="0.5751%" height="15" fill="rgb(212,174,12)" fg:x="9300" fg:w="115"/><text x="46.7547%" y="1022.50"></text></g><g><title>core::cmp::min (5 samples, 0.03%)</title><rect x="47.0547%" y="1028" width="0.0250%" height="15" fill="rgb(246,67,9)" fg:x="9410" fg:w="5"/><text x="47.3047%" y="1038.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.03%)</title><rect x="47.0547%" y="1044" width="0.0250%" height="15" fill="rgb(239,35,23)" fg:x="9410" fg:w="5"/><text x="47.3047%" y="1054.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.03%)</title><rect x="47.0547%" y="1060" width="0.0250%" height="15" fill="rgb(211,167,0)" fg:x="9410" fg:w="5"/><text x="47.3047%" y="1070.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (170 samples, 0.85%)</title><rect x="46.3496%" y="964" width="0.8501%" height="15" fill="rgb(225,119,45)" fg:x="9269" fg:w="170"/><text x="46.5996%" y="974.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (170 samples, 0.85%)</title><rect x="46.3496%" y="980" width="0.8501%" height="15" fill="rgb(210,162,6)" fg:x="9269" fg:w="170"/><text x="46.5996%" y="990.50"></text></g><g><title>std::io::Write::write_all (167 samples, 0.84%)</title><rect x="46.3646%" y="996" width="0.8351%" height="15" fill="rgb(208,118,35)" fg:x="9272" fg:w="167"/><text x="46.6146%" y="1006.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (24 samples, 0.12%)</title><rect x="47.0797%" y="1012" width="0.1200%" height="15" fill="rgb(239,4,53)" fg:x="9415" fg:w="24"/><text x="47.3297%" y="1022.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (17 samples, 0.09%)</title><rect x="47.5148%" y="1060" width="0.0850%" height="15" fill="rgb(213,130,21)" fg:x="9502" fg:w="17"/><text x="47.7648%" y="1070.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (8 samples, 0.04%)</title><rect x="47.5998%" y="1060" width="0.0400%" height="15" fill="rgb(235,148,0)" fg:x="9519" fg:w="8"/><text x="47.8498%" y="1070.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.10%)</title><rect x="47.6548%" y="1076" width="0.1000%" height="15" fill="rgb(244,224,18)" fg:x="9530" fg:w="20"/><text x="47.9048%" y="1086.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.25%)</title><rect x="47.6448%" y="1060" width="0.2450%" height="15" fill="rgb(211,214,4)" fg:x="9528" fg:w="49"/><text x="47.8948%" y="1070.50"></text></g><g><title>__memmove_avx_unaligned (27 samples, 0.14%)</title><rect x="47.7548%" y="1076" width="0.1350%" height="15" fill="rgb(206,119,25)" fg:x="9550" fg:w="27"/><text x="48.0048%" y="1086.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (93 samples, 0.47%)</title><rect x="47.4947%" y="1028" width="0.4650%" height="15" fill="rgb(243,93,47)" fg:x="9498" fg:w="93"/><text x="47.7447%" y="1038.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (89 samples, 0.45%)</title><rect x="47.5148%" y="1044" width="0.4450%" height="15" fill="rgb(224,194,6)" fg:x="9502" fg:w="89"/><text x="47.7648%" y="1054.50"></text></g><g><title>std::io::Write::write_all (14 samples, 0.07%)</title><rect x="47.8898%" y="1060" width="0.0700%" height="15" fill="rgb(243,229,6)" fg:x="9577" fg:w="14"/><text x="48.1398%" y="1070.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (5 samples, 0.03%)</title><rect x="47.9598%" y="1028" width="0.0250%" height="15" fill="rgb(207,23,50)" fg:x="9591" fg:w="5"/><text x="48.2098%" y="1038.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (100 samples, 0.50%)</title><rect x="47.4897%" y="1012" width="0.5001%" height="15" fill="rgb(253,192,32)" fg:x="9497" fg:w="100"/><text x="47.7397%" y="1022.50"></text></g><g><title>serde_json::ser::Formatter::end_string (175 samples, 0.88%)</title><rect x="47.1997%" y="964" width="0.8751%" height="15" fill="rgb(213,21,6)" fg:x="9439" fg:w="175"/><text x="47.4497%" y="974.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (175 samples, 0.88%)</title><rect x="47.1997%" y="980" width="0.8751%" height="15" fill="rgb(243,151,13)" fg:x="9439" fg:w="175"/><text x="47.4497%" y="990.50"></text></g><g><title>std::io::Write::write_all (175 samples, 0.88%)</title><rect x="47.1997%" y="996" width="0.8751%" height="15" fill="rgb(233,165,41)" fg:x="9439" fg:w="175"/><text x="47.4497%" y="1006.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (17 samples, 0.09%)</title><rect x="47.9898%" y="1012" width="0.0850%" height="15" fill="rgb(246,176,45)" fg:x="9597" fg:w="17"/><text x="48.2398%" y="1022.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.03%)</title><rect x="48.8049%" y="996" width="0.0250%" height="15" fill="rgb(217,170,52)" fg:x="9760" fg:w="5"/><text x="49.0549%" y="1006.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.03%)</title><rect x="48.8049%" y="980" width="0.0300%" height="15" fill="rgb(214,203,54)" fg:x="9760" fg:w="6"/><text x="49.0549%" y="990.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (5 samples, 0.03%)</title><rect x="49.0549%" y="1076" width="0.0250%" height="15" fill="rgb(248,215,49)" fg:x="9810" fg:w="5"/><text x="49.3049%" y="1086.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (5 samples, 0.03%)</title><rect x="49.0799%" y="1076" width="0.0250%" height="15" fill="rgb(208,46,10)" fg:x="9815" fg:w="5"/><text x="49.3299%" y="1086.50"></text></g><g><title>bytes::bytes_mut::BytesMut::capacity (2 samples, 0.01%)</title><rect x="49.0949%" y="1092" width="0.0100%" height="15" fill="rgb(254,5,31)" fg:x="9818" fg:w="2"/><text x="49.3449%" y="1102.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.10%)</title><rect x="49.1299%" y="1092" width="0.1000%" height="15" fill="rgb(222,104,33)" fg:x="9825" fg:w="20"/><text x="49.3799%" y="1102.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (50 samples, 0.25%)</title><rect x="49.1099%" y="1076" width="0.2500%" height="15" fill="rgb(248,49,16)" fg:x="9821" fg:w="50"/><text x="49.3599%" y="1086.50"></text></g><g><title>__memmove_avx_unaligned (26 samples, 0.13%)</title><rect x="49.2299%" y="1092" width="0.1300%" height="15" fill="rgb(232,198,41)" fg:x="9845" fg:w="26"/><text x="49.4799%" y="1102.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (71 samples, 0.36%)</title><rect x="49.0399%" y="1044" width="0.3550%" height="15" fill="rgb(214,125,3)" fg:x="9807" fg:w="71"/><text x="49.2899%" y="1054.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (68 samples, 0.34%)</title><rect x="49.0549%" y="1060" width="0.3400%" height="15" fill="rgb(229,220,28)" fg:x="9810" fg:w="68"/><text x="49.3049%" y="1070.50"></text></g><g><title>std::io::Write::write_all (7 samples, 0.04%)</title><rect x="49.3599%" y="1076" width="0.0350%" height="15" fill="rgb(222,64,37)" fg:x="9871" fg:w="7"/><text x="49.6099%" y="1086.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (78 samples, 0.39%)</title><rect x="49.0299%" y="1028" width="0.3900%" height="15" fill="rgb(249,184,13)" fg:x="9805" fg:w="78"/><text x="49.2799%" y="1038.50"></text></g><g><title>core::cmp::min (4 samples, 0.02%)</title><rect x="49.3999%" y="1044" width="0.0200%" height="15" fill="rgb(252,176,6)" fg:x="9879" fg:w="4"/><text x="49.6499%" y="1054.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.02%)</title><rect x="49.3999%" y="1060" width="0.0200%" height="15" fill="rgb(228,153,7)" fg:x="9879" fg:w="4"/><text x="49.6499%" y="1070.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.02%)</title><rect x="49.3999%" y="1076" width="0.0200%" height="15" fill="rgb(242,193,5)" fg:x="9879" fg:w="4"/><text x="49.6499%" y="1086.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (741 samples, 3.71%)</title><rect x="45.8546%" y="900" width="3.7054%" height="15" fill="rgb(232,140,9)" fg:x="9170" fg:w="741"/><text x="46.1046%" y="910.50">serd..</text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (741 samples, 3.71%)</title><rect x="45.8546%" y="916" width="3.7054%" height="15" fill="rgb(213,222,16)" fg:x="9170" fg:w="741"/><text x="46.1046%" y="926.50">&lt;ser..</text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (741 samples, 3.71%)</title><rect x="45.8546%" y="932" width="3.7054%" height="15" fill="rgb(222,75,50)" fg:x="9170" fg:w="741"/><text x="46.1046%" y="942.50">&lt;&amp;mu..</text></g><g><title>serde_json::ser::format_escaped_str (725 samples, 3.63%)</title><rect x="45.9346%" y="948" width="3.6254%" height="15" fill="rgb(205,180,2)" fg:x="9186" fg:w="725"/><text x="46.1846%" y="958.50">serd..</text></g><g><title>serde_json::ser::format_escaped_str_contents (297 samples, 1.49%)</title><rect x="48.0748%" y="964" width="1.4851%" height="15" fill="rgb(216,34,7)" fg:x="9614" fg:w="297"/><text x="48.3248%" y="974.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (144 samples, 0.72%)</title><rect x="48.8399%" y="980" width="0.7201%" height="15" fill="rgb(253,16,32)" fg:x="9767" fg:w="144"/><text x="49.0899%" y="990.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (144 samples, 0.72%)</title><rect x="48.8399%" y="996" width="0.7201%" height="15" fill="rgb(208,97,28)" fg:x="9767" fg:w="144"/><text x="49.0899%" y="1006.50"></text></g><g><title>std::io::Write::write_all (141 samples, 0.71%)</title><rect x="48.8549%" y="1012" width="0.7051%" height="15" fill="rgb(225,92,11)" fg:x="9770" fg:w="141"/><text x="49.1049%" y="1022.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (28 samples, 0.14%)</title><rect x="49.4199%" y="1028" width="0.1400%" height="15" fill="rgb(243,38,12)" fg:x="9883" fg:w="28"/><text x="49.6699%" y="1038.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (8 samples, 0.04%)</title><rect x="49.6950%" y="996" width="0.0400%" height="15" fill="rgb(208,139,16)" fg:x="9938" fg:w="8"/><text x="49.9450%" y="1006.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.04%)</title><rect x="49.7600%" y="1092" width="0.0350%" height="15" fill="rgb(227,24,9)" fg:x="9951" fg:w="7"/><text x="50.0100%" y="1102.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.03%)</title><rect x="49.7650%" y="1108" width="0.0300%" height="15" fill="rgb(206,62,11)" fg:x="9952" fg:w="6"/><text x="50.0150%" y="1118.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.03%)</title><rect x="49.7650%" y="1124" width="0.0300%" height="15" fill="rgb(228,134,27)" fg:x="9952" fg:w="6"/><text x="50.0150%" y="1134.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.03%)</title><rect x="49.7650%" y="1140" width="0.0300%" height="15" fill="rgb(205,55,33)" fg:x="9952" fg:w="6"/><text x="50.0150%" y="1150.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.03%)</title><rect x="49.7650%" y="1156" width="0.0300%" height="15" fill="rgb(243,75,43)" fg:x="9952" fg:w="6"/><text x="50.0150%" y="1166.50"></text></g><g><title>_int_realloc (4 samples, 0.02%)</title><rect x="49.7750%" y="1172" width="0.0200%" height="15" fill="rgb(223,27,42)" fg:x="9954" fg:w="4"/><text x="50.0250%" y="1182.50"></text></g><g><title>_int_malloc (3 samples, 0.02%)</title><rect x="49.7800%" y="1188" width="0.0150%" height="15" fill="rgb(232,189,33)" fg:x="9955" fg:w="3"/><text x="50.0300%" y="1198.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (13 samples, 0.07%)</title><rect x="49.7350%" y="996" width="0.0650%" height="15" fill="rgb(210,9,39)" fg:x="9946" fg:w="13"/><text x="49.9850%" y="1006.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (10 samples, 0.05%)</title><rect x="49.7500%" y="1012" width="0.0500%" height="15" fill="rgb(242,85,26)" fg:x="9949" fg:w="10"/><text x="50.0000%" y="1022.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.05%)</title><rect x="49.7500%" y="1028" width="0.0500%" height="15" fill="rgb(248,44,4)" fg:x="9949" fg:w="10"/><text x="50.0000%" y="1038.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.05%)</title><rect x="49.7500%" y="1044" width="0.0500%" height="15" fill="rgb(250,96,46)" fg:x="9949" fg:w="10"/><text x="50.0000%" y="1054.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.05%)</title><rect x="49.7500%" y="1060" width="0.0500%" height="15" fill="rgb(229,116,26)" fg:x="9949" fg:w="10"/><text x="50.0000%" y="1070.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.05%)</title><rect x="49.7500%" y="1076" width="0.0500%" height="15" fill="rgb(246,94,34)" fg:x="9949" fg:w="10"/><text x="50.0000%" y="1086.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.05%)</title><rect x="49.8150%" y="1012" width="0.0450%" height="15" fill="rgb(251,73,21)" fg:x="9962" fg:w="9"/><text x="50.0650%" y="1022.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.13%)</title><rect x="49.8000%" y="996" width="0.1250%" height="15" fill="rgb(254,121,25)" fg:x="9959" fg:w="25"/><text x="50.0500%" y="1006.50"></text></g><g><title>__memmove_avx_unaligned (13 samples, 0.07%)</title><rect x="49.8600%" y="1012" width="0.0650%" height="15" fill="rgb(215,161,49)" fg:x="9971" fg:w="13"/><text x="50.1100%" y="1022.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (63 samples, 0.32%)</title><rect x="49.6750%" y="964" width="0.3150%" height="15" fill="rgb(221,43,13)" fg:x="9934" fg:w="63"/><text x="49.9250%" y="974.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (59 samples, 0.30%)</title><rect x="49.6950%" y="980" width="0.2950%" height="15" fill="rgb(249,5,37)" fg:x="9938" fg:w="59"/><text x="49.9450%" y="990.50"></text></g><g><title>std::io::Write::write_all (13 samples, 0.07%)</title><rect x="49.9250%" y="996" width="0.0650%" height="15" fill="rgb(226,25,44)" fg:x="9984" fg:w="13"/><text x="50.1750%" y="1006.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (6 samples, 0.03%)</title><rect x="49.9900%" y="964" width="0.0300%" height="15" fill="rgb(238,189,16)" fg:x="9997" fg:w="6"/><text x="50.2400%" y="974.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (75 samples, 0.38%)</title><rect x="49.6700%" y="948" width="0.3750%" height="15" fill="rgb(251,186,8)" fg:x="9933" fg:w="75"/><text x="49.9200%" y="958.50"></text></g><g><title>core::cmp::min (5 samples, 0.03%)</title><rect x="50.0200%" y="964" width="0.0250%" height="15" fill="rgb(254,34,31)" fg:x="10003" fg:w="5"/><text x="50.2700%" y="974.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.03%)</title><rect x="50.0200%" y="980" width="0.0250%" height="15" fill="rgb(225,215,27)" fg:x="10003" fg:w="5"/><text x="50.2700%" y="990.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.03%)</title><rect x="50.0200%" y="996" width="0.0250%" height="15" fill="rgb(221,192,48)" fg:x="10003" fg:w="5"/><text x="50.2700%" y="1006.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (895 samples, 4.48%)</title><rect x="45.6596%" y="884" width="4.4754%" height="15" fill="rgb(219,137,20)" fg:x="9131" fg:w="895"/><text x="45.9096%" y="894.50">&lt;serd..</text></g><g><title>serde_json::ser::Formatter::begin_object_key (115 samples, 0.58%)</title><rect x="49.5600%" y="900" width="0.5751%" height="15" fill="rgb(219,84,11)" fg:x="9911" fg:w="115"/><text x="49.8100%" y="910.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (114 samples, 0.57%)</title><rect x="49.5650%" y="916" width="0.5701%" height="15" fill="rgb(224,10,23)" fg:x="9912" fg:w="114"/><text x="49.8150%" y="926.50"></text></g><g><title>std::io::Write::write_all (110 samples, 0.55%)</title><rect x="49.5850%" y="932" width="0.5501%" height="15" fill="rgb(248,22,39)" fg:x="9916" fg:w="110"/><text x="49.8350%" y="942.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (18 samples, 0.09%)</title><rect x="50.0450%" y="948" width="0.0900%" height="15" fill="rgb(212,154,20)" fg:x="10008" fg:w="18"/><text x="50.2950%" y="958.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.02%)</title><rect x="50.1600%" y="900" width="0.0200%" height="15" fill="rgb(236,199,50)" fg:x="10031" fg:w="4"/><text x="50.4100%" y="910.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (13 samples, 0.07%)</title><rect x="50.2150%" y="932" width="0.0650%" height="15" fill="rgb(211,9,17)" fg:x="10042" fg:w="13"/><text x="50.4650%" y="942.50"></text></g><g><title>_ZN10serde_json3ser18format_escaped_str17ha1293577635e556eE.llvm.10229501221164700075 (13 samples, 0.07%)</title><rect x="50.6451%" y="948" width="0.0650%" height="15" fill="rgb(243,216,36)" fg:x="10128" fg:w="13"/><text x="50.8951%" y="958.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (9 samples, 0.05%)</title><rect x="50.9201%" y="1044" width="0.0450%" height="15" fill="rgb(250,2,10)" fg:x="10183" fg:w="9"/><text x="51.1701%" y="1054.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (12 samples, 0.06%)</title><rect x="50.9651%" y="1044" width="0.0600%" height="15" fill="rgb(226,50,48)" fg:x="10192" fg:w="12"/><text x="51.2151%" y="1054.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.05%)</title><rect x="51.0351%" y="1060" width="0.0450%" height="15" fill="rgb(243,81,16)" fg:x="10206" fg:w="9"/><text x="51.2851%" y="1070.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.14%)</title><rect x="51.0251%" y="1044" width="0.1400%" height="15" fill="rgb(250,14,2)" fg:x="10204" fg:w="28"/><text x="51.2751%" y="1054.50"></text></g><g><title>__memmove_avx_unaligned (17 samples, 0.09%)</title><rect x="51.0801%" y="1060" width="0.0850%" height="15" fill="rgb(233,135,29)" fg:x="10215" fg:w="17"/><text x="51.3301%" y="1070.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (65 samples, 0.33%)</title><rect x="50.9001%" y="1012" width="0.3250%" height="15" fill="rgb(224,64,43)" fg:x="10179" fg:w="65"/><text x="51.1501%" y="1022.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (61 samples, 0.31%)</title><rect x="50.9201%" y="1028" width="0.3050%" height="15" fill="rgb(238,84,13)" fg:x="10183" fg:w="61"/><text x="51.1701%" y="1038.50"></text></g><g><title>std::io::Write::write_all (12 samples, 0.06%)</title><rect x="51.1651%" y="1044" width="0.0600%" height="15" fill="rgb(253,48,26)" fg:x="10232" fg:w="12"/><text x="51.4151%" y="1054.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (8 samples, 0.04%)</title><rect x="51.2251%" y="1012" width="0.0400%" height="15" fill="rgb(205,223,31)" fg:x="10244" fg:w="8"/><text x="51.4751%" y="1022.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (74 samples, 0.37%)</title><rect x="50.9001%" y="996" width="0.3700%" height="15" fill="rgb(221,41,32)" fg:x="10179" fg:w="74"/><text x="51.1501%" y="1006.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (134 samples, 0.67%)</title><rect x="50.7101%" y="948" width="0.6701%" height="15" fill="rgb(213,158,31)" fg:x="10141" fg:w="134"/><text x="50.9601%" y="958.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (134 samples, 0.67%)</title><rect x="50.7101%" y="964" width="0.6701%" height="15" fill="rgb(245,126,43)" fg:x="10141" fg:w="134"/><text x="50.9601%" y="974.50"></text></g><g><title>std::io::Write::write_all (132 samples, 0.66%)</title><rect x="50.7201%" y="980" width="0.6601%" height="15" fill="rgb(227,7,22)" fg:x="10143" fg:w="132"/><text x="50.9701%" y="990.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (22 samples, 0.11%)</title><rect x="51.2701%" y="996" width="0.1100%" height="15" fill="rgb(252,90,44)" fg:x="10253" fg:w="22"/><text x="51.5201%" y="1006.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (27 samples, 0.14%)</title><rect x="51.6502%" y="1044" width="0.1350%" height="15" fill="rgb(253,91,0)" fg:x="10329" fg:w="27"/><text x="51.9002%" y="1054.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (12 samples, 0.06%)</title><rect x="51.7852%" y="1044" width="0.0600%" height="15" fill="rgb(252,175,49)" fg:x="10356" fg:w="12"/><text x="52.0352%" y="1054.50"></text></g><g><title>__memcpy_avx_unaligned_erms (18 samples, 0.09%)</title><rect x="51.8752%" y="1060" width="0.0900%" height="15" fill="rgb(246,150,1)" fg:x="10374" fg:w="18"/><text x="52.1252%" y="1070.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (40 samples, 0.20%)</title><rect x="51.8502%" y="1044" width="0.2000%" height="15" fill="rgb(241,192,25)" fg:x="10369" fg:w="40"/><text x="52.1002%" y="1054.50"></text></g><g><title>__memmove_avx_unaligned (17 samples, 0.09%)</title><rect x="51.9652%" y="1060" width="0.0850%" height="15" fill="rgb(239,187,11)" fg:x="10392" fg:w="17"/><text x="52.2152%" y="1070.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (88 samples, 0.44%)</title><rect x="51.6302%" y="1012" width="0.4400%" height="15" fill="rgb(218,202,51)" fg:x="10325" fg:w="88"/><text x="51.8802%" y="1022.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (84 samples, 0.42%)</title><rect x="51.6502%" y="1028" width="0.4200%" height="15" fill="rgb(225,176,8)" fg:x="10329" fg:w="84"/><text x="51.9002%" y="1038.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.02%)</title><rect x="52.0502%" y="1044" width="0.0200%" height="15" fill="rgb(219,122,41)" fg:x="10409" fg:w="4"/><text x="52.3002%" y="1054.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (7 samples, 0.04%)</title><rect x="52.0702%" y="1012" width="0.0350%" height="15" fill="rgb(248,140,20)" fg:x="10413" fg:w="7"/><text x="52.3202%" y="1022.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (99 samples, 0.50%)</title><rect x="51.6152%" y="996" width="0.4950%" height="15" fill="rgb(245,41,37)" fg:x="10322" fg:w="99"/><text x="51.8652%" y="1006.50"></text></g><g><title>serde_json::ser::Formatter::end_string (175 samples, 0.88%)</title><rect x="51.3801%" y="948" width="0.8751%" height="15" fill="rgb(235,82,39)" fg:x="10275" fg:w="175"/><text x="51.6301%" y="958.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (175 samples, 0.88%)</title><rect x="51.3801%" y="964" width="0.8751%" height="15" fill="rgb(230,108,42)" fg:x="10275" fg:w="175"/><text x="51.6301%" y="974.50"></text></g><g><title>std::io::Write::write_all (175 samples, 0.88%)</title><rect x="51.3801%" y="980" width="0.8751%" height="15" fill="rgb(215,150,50)" fg:x="10275" fg:w="175"/><text x="51.6301%" y="990.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (29 samples, 0.15%)</title><rect x="52.1102%" y="996" width="0.1450%" height="15" fill="rgb(233,212,5)" fg:x="10421" fg:w="29"/><text x="52.3602%" y="1006.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.12%)</title><rect x="54.1804%" y="964" width="0.1150%" height="15" fill="rgb(245,80,22)" fg:x="10835" fg:w="23"/><text x="54.4304%" y="974.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 0.12%)</title><rect x="54.1804%" y="980" width="0.1150%" height="15" fill="rgb(238,129,16)" fg:x="10835" fg:w="23"/><text x="54.4304%" y="990.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (10 samples, 0.05%)</title><rect x="54.5005%" y="1060" width="0.0500%" height="15" fill="rgb(240,19,0)" fg:x="10899" fg:w="10"/><text x="54.7505%" y="1070.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="54.6305%" y="1156" width="0.0100%" height="15" fill="rgb(232,42,35)" fg:x="10925" fg:w="2"/><text x="54.8805%" y="1166.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.01%)</title><rect x="54.6405%" y="1156" width="0.0100%" height="15" fill="rgb(223,130,24)" fg:x="10927" fg:w="2"/><text x="54.8905%" y="1166.50"></text></g><g><title>__GI___lll_lock_wake_private (2 samples, 0.01%)</title><rect x="54.7455%" y="1236" width="0.0100%" height="15" fill="rgb(237,16,22)" fg:x="10948" fg:w="2"/><text x="54.9955%" y="1246.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="54.7455%" y="1252" width="0.0100%" height="15" fill="rgb(248,192,20)" fg:x="10948" fg:w="2"/><text x="54.9955%" y="1262.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="54.7455%" y="1268" width="0.0100%" height="15" fill="rgb(233,167,2)" fg:x="10948" fg:w="2"/><text x="54.9955%" y="1278.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="54.7455%" y="1284" width="0.0100%" height="15" fill="rgb(252,71,44)" fg:x="10948" fg:w="2"/><text x="54.9955%" y="1294.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="54.7455%" y="1300" width="0.0100%" height="15" fill="rgb(238,37,47)" fg:x="10948" fg:w="2"/><text x="54.9955%" y="1310.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="54.7455%" y="1316" width="0.0100%" height="15" fill="rgb(214,202,54)" fg:x="10948" fg:w="2"/><text x="54.9955%" y="1326.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="54.7455%" y="1332" width="0.0100%" height="15" fill="rgb(254,165,40)" fg:x="10948" fg:w="2"/><text x="54.9955%" y="1342.50"></text></g><g><title>__memcpy_avx_unaligned_erms (32 samples, 0.16%)</title><rect x="54.7755%" y="1252" width="0.1600%" height="15" fill="rgb(246,173,38)" fg:x="10954" fg:w="32"/><text x="55.0255%" y="1262.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="54.9355%" y="1252" width="0.0100%" height="15" fill="rgb(215,3,27)" fg:x="10986" fg:w="2"/><text x="55.1855%" y="1262.50"></text></g><g><title>_int_free (6 samples, 0.03%)</title><rect x="54.9455%" y="1252" width="0.0300%" height="15" fill="rgb(239,169,51)" fg:x="10988" fg:w="6"/><text x="55.1955%" y="1262.50"></text></g><g><title>_int_realloc (73 samples, 0.37%)</title><rect x="54.7555%" y="1236" width="0.3650%" height="15" fill="rgb(212,5,25)" fg:x="10950" fg:w="73"/><text x="55.0055%" y="1246.50"></text></g><g><title>_int_malloc (29 samples, 0.15%)</title><rect x="54.9755%" y="1252" width="0.1450%" height="15" fill="rgb(243,45,17)" fg:x="10994" fg:w="29"/><text x="55.2255%" y="1262.50"></text></g><g><title>unlink_chunk (7 samples, 0.04%)</title><rect x="55.0855%" y="1268" width="0.0350%" height="15" fill="rgb(242,97,9)" fg:x="11016" fg:w="7"/><text x="55.3355%" y="1278.50"></text></g><g><title>__GI___libc_realloc (92 samples, 0.46%)</title><rect x="54.6655%" y="1220" width="0.4600%" height="15" fill="rgb(228,71,31)" fg:x="10932" fg:w="92"/><text x="54.9155%" y="1230.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (95 samples, 0.48%)</title><rect x="54.6655%" y="1172" width="0.4750%" height="15" fill="rgb(252,184,16)" fg:x="10932" fg:w="95"/><text x="54.9155%" y="1182.50"></text></g><g><title>alloc::alloc::Global::grow_impl (95 samples, 0.48%)</title><rect x="54.6655%" y="1188" width="0.4750%" height="15" fill="rgb(236,169,46)" fg:x="10932" fg:w="95"/><text x="54.9155%" y="1198.50"></text></g><g><title>alloc::alloc::realloc (95 samples, 0.48%)</title><rect x="54.6655%" y="1204" width="0.4750%" height="15" fill="rgb(207,17,47)" fg:x="10932" fg:w="95"/><text x="54.9155%" y="1214.50"></text></g><g><title>__rust_realloc (2 samples, 0.01%)</title><rect x="55.1305%" y="1220" width="0.0100%" height="15" fill="rgb(206,201,28)" fg:x="11025" fg:w="2"/><text x="55.3805%" y="1230.50"></text></g><g><title>alloc::raw_vec::finish_grow (99 samples, 0.50%)</title><rect x="54.6555%" y="1156" width="0.4950%" height="15" fill="rgb(224,184,23)" fg:x="10930" fg:w="99"/><text x="54.9055%" y="1166.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="55.1405%" y="1172" width="0.0100%" height="15" fill="rgb(208,139,48)" fg:x="11027" fg:w="2"/><text x="55.3905%" y="1182.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (109 samples, 0.55%)</title><rect x="54.6255%" y="1140" width="0.5451%" height="15" fill="rgb(208,130,10)" fg:x="10924" fg:w="109"/><text x="54.8755%" y="1150.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.02%)</title><rect x="55.1555%" y="1156" width="0.0150%" height="15" fill="rgb(211,213,45)" fg:x="11030" fg:w="3"/><text x="55.4055%" y="1166.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.02%)</title><rect x="55.1555%" y="1172" width="0.0150%" height="15" fill="rgb(235,100,30)" fg:x="11030" fg:w="3"/><text x="55.4055%" y="1182.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (112 samples, 0.56%)</title><rect x="54.6155%" y="1092" width="0.5601%" height="15" fill="rgb(206,144,31)" fg:x="10922" fg:w="112"/><text x="54.8655%" y="1102.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (112 samples, 0.56%)</title><rect x="54.6155%" y="1108" width="0.5601%" height="15" fill="rgb(224,200,26)" fg:x="10922" fg:w="112"/><text x="54.8655%" y="1118.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (110 samples, 0.55%)</title><rect x="54.6255%" y="1124" width="0.5501%" height="15" fill="rgb(247,104,53)" fg:x="10924" fg:w="110"/><text x="54.8755%" y="1134.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (129 samples, 0.65%)</title><rect x="54.5505%" y="1060" width="0.6451%" height="15" fill="rgb(220,14,17)" fg:x="10909" fg:w="129"/><text x="54.8005%" y="1070.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (125 samples, 0.63%)</title><rect x="54.5705%" y="1076" width="0.6251%" height="15" fill="rgb(230,140,40)" fg:x="10913" fg:w="125"/><text x="54.8205%" y="1086.50"></text></g><g><title>bytes::bytes_mut::rebuild_vec (3 samples, 0.02%)</title><rect x="55.1805%" y="1092" width="0.0150%" height="15" fill="rgb(229,2,41)" fg:x="11035" fg:w="3"/><text x="55.4305%" y="1102.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (3 samples, 0.02%)</title><rect x="55.1805%" y="1108" width="0.0150%" height="15" fill="rgb(232,89,16)" fg:x="11035" fg:w="3"/><text x="55.4305%" y="1118.50"></text></g><g><title>__memcpy_avx_unaligned_erms (25 samples, 0.13%)</title><rect x="55.2105%" y="1076" width="0.1250%" height="15" fill="rgb(247,59,52)" fg:x="11041" fg:w="25"/><text x="55.4605%" y="1086.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (90 samples, 0.45%)</title><rect x="55.1955%" y="1060" width="0.4500%" height="15" fill="rgb(226,110,21)" fg:x="11038" fg:w="90"/><text x="55.4455%" y="1070.50"></text></g><g><title>__memmove_avx_unaligned (62 samples, 0.31%)</title><rect x="55.3355%" y="1076" width="0.3100%" height="15" fill="rgb(224,176,43)" fg:x="11066" fg:w="62"/><text x="55.5855%" y="1086.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (239 samples, 1.20%)</title><rect x="54.4904%" y="1028" width="1.1951%" height="15" fill="rgb(221,73,6)" fg:x="10897" fg:w="239"/><text x="54.7404%" y="1038.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (237 samples, 1.19%)</title><rect x="54.5005%" y="1044" width="1.1851%" height="15" fill="rgb(232,78,19)" fg:x="10899" fg:w="237"/><text x="54.7505%" y="1054.50"></text></g><g><title>std::io::Write::write_all (8 samples, 0.04%)</title><rect x="55.6456%" y="1060" width="0.0400%" height="15" fill="rgb(233,112,48)" fg:x="11128" fg:w="8"/><text x="55.8956%" y="1070.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (2 samples, 0.01%)</title><rect x="55.6856%" y="1028" width="0.0100%" height="15" fill="rgb(243,131,47)" fg:x="11136" fg:w="2"/><text x="55.9356%" y="1038.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (246 samples, 1.23%)</title><rect x="54.4804%" y="1012" width="1.2301%" height="15" fill="rgb(226,51,1)" fg:x="10895" fg:w="246"/><text x="54.7304%" y="1022.50"></text></g><g><title>core::cmp::min (3 samples, 0.02%)</title><rect x="55.6956%" y="1028" width="0.0150%" height="15" fill="rgb(247,58,7)" fg:x="11138" fg:w="3"/><text x="55.9456%" y="1038.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.02%)</title><rect x="55.6956%" y="1044" width="0.0150%" height="15" fill="rgb(209,7,32)" fg:x="11138" fg:w="3"/><text x="55.9456%" y="1054.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.02%)</title><rect x="55.6956%" y="1060" width="0.0150%" height="15" fill="rgb(209,39,41)" fg:x="11138" fg:w="3"/><text x="55.9456%" y="1070.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (1,134 samples, 5.67%)</title><rect x="50.1800%" y="900" width="5.6706%" height="15" fill="rgb(226,182,46)" fg:x="10035" fg:w="1134"/><text x="50.4300%" y="910.50">serde::..</text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1,134 samples, 5.67%)</title><rect x="50.1800%" y="916" width="5.6706%" height="15" fill="rgb(230,219,10)" fg:x="10035" fg:w="1134"/><text x="50.4300%" y="926.50">&lt;&amp;mut s..</text></g><g><title>serde_json::ser::format_escaped_str (1,114 samples, 5.57%)</title><rect x="50.2800%" y="932" width="5.5706%" height="15" fill="rgb(227,175,30)" fg:x="10055" fg:w="1114"/><text x="50.5300%" y="942.50">serde_j..</text></g><g><title>serde_json::ser::format_escaped_str_contents (719 samples, 3.60%)</title><rect x="52.2552%" y="948" width="3.5954%" height="15" fill="rgb(217,2,50)" fg:x="10450" fg:w="719"/><text x="52.5052%" y="958.50">serd..</text></g><g><title>serde_json::ser::Formatter::write_string_fragment (311 samples, 1.56%)</title><rect x="54.2954%" y="964" width="1.5552%" height="15" fill="rgb(229,160,0)" fg:x="10858" fg:w="311"/><text x="54.5454%" y="974.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (311 samples, 1.56%)</title><rect x="54.2954%" y="980" width="1.5552%" height="15" fill="rgb(207,78,37)" fg:x="10858" fg:w="311"/><text x="54.5454%" y="990.50"></text></g><g><title>std::io::Write::write_all (310 samples, 1.55%)</title><rect x="54.3004%" y="996" width="1.5502%" height="15" fill="rgb(225,57,0)" fg:x="10859" fg:w="310"/><text x="54.5504%" y="1006.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (28 samples, 0.14%)</title><rect x="55.7106%" y="1012" width="0.1400%" height="15" fill="rgb(232,154,2)" fg:x="11141" fg:w="28"/><text x="55.9606%" y="1022.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::advance_mut (5 samples, 0.03%)</title><rect x="56.1506%" y="996" width="0.0250%" height="15" fill="rgb(241,212,25)" fg:x="11229" fg:w="5"/><text x="56.4006%" y="1006.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (9 samples, 0.05%)</title><rect x="56.1756%" y="996" width="0.0450%" height="15" fill="rgb(226,69,20)" fg:x="11234" fg:w="9"/><text x="56.4256%" y="1006.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.07%)</title><rect x="56.2406%" y="1012" width="0.0700%" height="15" fill="rgb(247,184,54)" fg:x="11247" fg:w="14"/><text x="56.4906%" y="1022.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (38 samples, 0.19%)</title><rect x="56.2256%" y="996" width="0.1900%" height="15" fill="rgb(210,145,0)" fg:x="11244" fg:w="38"/><text x="56.4756%" y="1006.50"></text></g><g><title>__memmove_avx_unaligned (21 samples, 0.11%)</title><rect x="56.3106%" y="1012" width="0.1050%" height="15" fill="rgb(253,82,12)" fg:x="11261" fg:w="21"/><text x="56.5606%" y="1022.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (75 samples, 0.38%)</title><rect x="56.1056%" y="964" width="0.3750%" height="15" fill="rgb(245,42,11)" fg:x="11220" fg:w="75"/><text x="56.3556%" y="974.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (66 samples, 0.33%)</title><rect x="56.1506%" y="980" width="0.3300%" height="15" fill="rgb(219,147,32)" fg:x="11229" fg:w="66"/><text x="56.4006%" y="990.50"></text></g><g><title>std::io::Write::write_all (13 samples, 0.07%)</title><rect x="56.4156%" y="996" width="0.0650%" height="15" fill="rgb(246,12,7)" fg:x="11282" fg:w="13"/><text x="56.6656%" y="1006.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (3 samples, 0.02%)</title><rect x="56.4806%" y="964" width="0.0150%" height="15" fill="rgb(243,50,9)" fg:x="11295" fg:w="3"/><text x="56.7306%" y="974.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (87 samples, 0.44%)</title><rect x="56.0856%" y="948" width="0.4350%" height="15" fill="rgb(219,149,6)" fg:x="11216" fg:w="87"/><text x="56.3356%" y="958.50"></text></g><g><title>core::cmp::min (5 samples, 0.03%)</title><rect x="56.4956%" y="964" width="0.0250%" height="15" fill="rgb(241,51,42)" fg:x="11298" fg:w="5"/><text x="56.7456%" y="974.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.03%)</title><rect x="56.4956%" y="980" width="0.0250%" height="15" fill="rgb(226,128,27)" fg:x="11298" fg:w="5"/><text x="56.7456%" y="990.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.03%)</title><rect x="56.4956%" y="996" width="0.0250%" height="15" fill="rgb(244,144,4)" fg:x="11298" fg:w="5"/><text x="56.7456%" y="1006.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (1,292 samples, 6.46%)</title><rect x="50.1350%" y="884" width="6.4606%" height="15" fill="rgb(221,4,13)" fg:x="10026" fg:w="1292"/><text x="50.3850%" y="894.50">&lt;serde_j..</text></g><g><title>serde_json::ser::Formatter::begin_object_value (149 samples, 0.75%)</title><rect x="55.8506%" y="900" width="0.7451%" height="15" fill="rgb(208,170,28)" fg:x="11169" fg:w="149"/><text x="56.1006%" y="910.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (149 samples, 0.75%)</title><rect x="55.8506%" y="916" width="0.7451%" height="15" fill="rgb(226,131,13)" fg:x="11169" fg:w="149"/><text x="56.1006%" y="926.50"></text></g><g><title>std::io::Write::write_all (145 samples, 0.73%)</title><rect x="55.8706%" y="932" width="0.7251%" height="15" fill="rgb(215,72,41)" fg:x="11173" fg:w="145"/><text x="56.1206%" y="942.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (15 samples, 0.08%)</title><rect x="56.5207%" y="948" width="0.0750%" height="15" fill="rgb(243,108,20)" fg:x="11303" fg:w="15"/><text x="56.7707%" y="958.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2,364 samples, 11.82%)</title><rect x="44.7795%" y="820" width="11.8212%" height="15" fill="rgb(230,189,17)" fg:x="8955" fg:w="2364"/><text x="45.0295%" y="830.50">serde::ser::impls:..</text></g><g><title>rust_axum::_::&lt;impl serde::ser::Serialize for rust_axum::User&gt;::serialize (2,364 samples, 11.82%)</title><rect x="44.7795%" y="836" width="11.8212%" height="15" fill="rgb(220,50,17)" fg:x="8955" fg:w="2364"/><text x="45.0295%" y="846.50">rust_axum::_::&lt;imp..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (2,221 samples, 11.11%)</title><rect x="45.4945%" y="852" width="11.1061%" height="15" fill="rgb(248,152,48)" fg:x="9098" fg:w="2221"/><text x="45.7445%" y="862.50">&lt;serde_json::ser..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (2,216 samples, 11.08%)</title><rect x="45.5196%" y="868" width="11.0811%" height="15" fill="rgb(244,91,11)" fg:x="9103" fg:w="2216"/><text x="45.7696%" y="878.50">serde::ser::Seri..</text></g><g><title>__GI___lll_lock_wake_private (2 samples, 0.01%)</title><rect x="56.7207%" y="1092" width="0.0100%" height="15" fill="rgb(220,157,5)" fg:x="11343" fg:w="2"/><text x="56.9707%" y="1102.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="56.7207%" y="1108" width="0.0100%" height="15" fill="rgb(253,137,8)" fg:x="11343" fg:w="2"/><text x="56.9707%" y="1118.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="56.7207%" y="1124" width="0.0100%" height="15" fill="rgb(217,137,51)" fg:x="11343" fg:w="2"/><text x="56.9707%" y="1134.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="56.7207%" y="1140" width="0.0100%" height="15" fill="rgb(218,209,53)" fg:x="11343" fg:w="2"/><text x="56.9707%" y="1150.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="56.7207%" y="1156" width="0.0100%" height="15" fill="rgb(249,137,25)" fg:x="11343" fg:w="2"/><text x="56.9707%" y="1166.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="56.7207%" y="1172" width="0.0100%" height="15" fill="rgb(239,155,26)" fg:x="11343" fg:w="2"/><text x="56.9707%" y="1182.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="56.7307%" y="1108" width="0.0150%" height="15" fill="rgb(227,85,46)" fg:x="11345" fg:w="3"/><text x="56.9807%" y="1118.50"></text></g><g><title>_int_free (2 samples, 0.01%)</title><rect x="56.7457%" y="1108" width="0.0100%" height="15" fill="rgb(251,107,43)" fg:x="11348" fg:w="2"/><text x="56.9957%" y="1118.50"></text></g><g><title>malloc_consolidate (12 samples, 0.06%)</title><rect x="56.7857%" y="1124" width="0.0600%" height="15" fill="rgb(234,170,33)" fg:x="11356" fg:w="12"/><text x="57.0357%" y="1134.50"></text></g><g><title>unlink_chunk (3 samples, 0.02%)</title><rect x="56.8307%" y="1140" width="0.0150%" height="15" fill="rgb(206,29,35)" fg:x="11365" fg:w="3"/><text x="57.0807%" y="1150.50"></text></g><g><title>__GI___libc_realloc (29 samples, 0.15%)</title><rect x="56.7057%" y="1076" width="0.1450%" height="15" fill="rgb(227,138,25)" fg:x="11340" fg:w="29"/><text x="56.9557%" y="1086.50"></text></g><g><title>_int_realloc (24 samples, 0.12%)</title><rect x="56.7307%" y="1092" width="0.1200%" height="15" fill="rgb(249,131,35)" fg:x="11345" fg:w="24"/><text x="56.9807%" y="1102.50"></text></g><g><title>_int_malloc (19 samples, 0.10%)</title><rect x="56.7557%" y="1108" width="0.0950%" height="15" fill="rgb(239,6,40)" fg:x="11350" fg:w="19"/><text x="57.0057%" y="1118.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (30 samples, 0.15%)</title><rect x="56.7057%" y="1028" width="0.1500%" height="15" fill="rgb(246,136,47)" fg:x="11340" fg:w="30"/><text x="56.9557%" y="1038.50"></text></g><g><title>alloc::alloc::Global::grow_impl (30 samples, 0.15%)</title><rect x="56.7057%" y="1044" width="0.1500%" height="15" fill="rgb(253,58,26)" fg:x="11340" fg:w="30"/><text x="56.9557%" y="1054.50"></text></g><g><title>alloc::alloc::realloc (30 samples, 0.15%)</title><rect x="56.7057%" y="1060" width="0.1500%" height="15" fill="rgb(237,141,10)" fg:x="11340" fg:w="30"/><text x="56.9557%" y="1070.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (35 samples, 0.18%)</title><rect x="56.6857%" y="916" width="0.1750%" height="15" fill="rgb(234,156,12)" fg:x="11336" fg:w="35"/><text x="56.9357%" y="926.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (33 samples, 0.17%)</title><rect x="56.6957%" y="932" width="0.1650%" height="15" fill="rgb(243,224,36)" fg:x="11338" fg:w="33"/><text x="56.9457%" y="942.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (32 samples, 0.16%)</title><rect x="56.7007%" y="948" width="0.1600%" height="15" fill="rgb(205,229,51)" fg:x="11339" fg:w="32"/><text x="56.9507%" y="958.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (32 samples, 0.16%)</title><rect x="56.7007%" y="964" width="0.1600%" height="15" fill="rgb(223,189,4)" fg:x="11339" fg:w="32"/><text x="56.9507%" y="974.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.16%)</title><rect x="56.7007%" y="980" width="0.1600%" height="15" fill="rgb(249,167,54)" fg:x="11339" fg:w="32"/><text x="56.9507%" y="990.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (32 samples, 0.16%)</title><rect x="56.7007%" y="996" width="0.1600%" height="15" fill="rgb(218,34,28)" fg:x="11339" fg:w="32"/><text x="56.9507%" y="1006.50"></text></g><g><title>alloc::raw_vec::finish_grow (31 samples, 0.16%)</title><rect x="56.7057%" y="1012" width="0.1550%" height="15" fill="rgb(232,109,42)" fg:x="11340" fg:w="31"/><text x="56.9557%" y="1022.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.02%)</title><rect x="56.8607%" y="932" width="0.0200%" height="15" fill="rgb(248,214,46)" fg:x="11371" fg:w="4"/><text x="57.1107%" y="942.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.06%)</title><rect x="56.8607%" y="916" width="0.0600%" height="15" fill="rgb(244,216,40)" fg:x="11371" fg:w="12"/><text x="57.1107%" y="926.50"></text></g><g><title>__memmove_avx_unaligned (8 samples, 0.04%)</title><rect x="56.8807%" y="932" width="0.0400%" height="15" fill="rgb(231,226,31)" fg:x="11375" fg:w="8"/><text x="57.1307%" y="942.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::put (53 samples, 0.27%)</title><rect x="56.6807%" y="884" width="0.2650%" height="15" fill="rgb(238,38,43)" fg:x="11335" fg:w="53"/><text x="56.9307%" y="894.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (52 samples, 0.26%)</title><rect x="56.6857%" y="900" width="0.2600%" height="15" fill="rgb(208,88,43)" fg:x="11336" fg:w="52"/><text x="56.9357%" y="910.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.03%)</title><rect x="56.9207%" y="916" width="0.0250%" height="15" fill="rgb(205,136,37)" fg:x="11383" fg:w="5"/><text x="57.1707%" y="926.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::remaining_mut (6 samples, 0.03%)</title><rect x="56.9457%" y="884" width="0.0300%" height="15" fill="rgb(237,34,14)" fg:x="11388" fg:w="6"/><text x="57.1957%" y="894.50"></text></g><g><title>&lt;bytes::buf::writer::Writer&lt;B&gt; as std::io::Write&gt;::write (65 samples, 0.33%)</title><rect x="56.6607%" y="868" width="0.3250%" height="15" fill="rgb(236,193,44)" fg:x="11331" fg:w="65"/><text x="56.9107%" y="878.50"></text></g><g><title>core::cmp::min (2 samples, 0.01%)</title><rect x="56.9757%" y="884" width="0.0100%" height="15" fill="rgb(231,48,10)" fg:x="11394" fg:w="2"/><text x="57.2257%" y="894.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.01%)</title><rect x="56.9757%" y="900" width="0.0100%" height="15" fill="rgb(213,141,34)" fg:x="11394" fg:w="2"/><text x="57.2257%" y="910.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.01%)</title><rect x="56.9757%" y="916" width="0.0100%" height="15" fill="rgb(249,130,34)" fg:x="11394" fg:w="2"/><text x="57.2257%" y="926.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (2,452 samples, 12.26%)</title><rect x="44.7395%" y="740" width="12.2612%" height="15" fill="rgb(219,42,41)" fg:x="8947" fg:w="2452"/><text x="44.9895%" y="750.50">core::iter::traits..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2,452 samples, 12.26%)</title><rect x="44.7395%" y="756" width="12.2612%" height="15" fill="rgb(224,100,54)" fg:x="8947" fg:w="2452"/><text x="44.9895%" y="766.50">core::iter::traits..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (2,444 samples, 12.22%)</title><rect x="44.7795%" y="772" width="12.2212%" height="15" fill="rgb(229,200,27)" fg:x="8955" fg:w="2444"/><text x="45.0295%" y="782.50">core::iter::traits..</text></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (2,444 samples, 12.22%)</title><rect x="44.7795%" y="788" width="12.2212%" height="15" fill="rgb(217,118,10)" fg:x="8955" fg:w="2444"/><text x="45.0295%" y="798.50">serde::ser::Serial..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (2,444 samples, 12.22%)</title><rect x="44.7795%" y="804" width="12.2212%" height="15" fill="rgb(206,22,3)" fg:x="8955" fg:w="2444"/><text x="45.0295%" y="814.50">&lt;serde_json::ser::..</text></g><g><title>serde_json::ser::Formatter::begin_array_value (80 samples, 0.40%)</title><rect x="56.6007%" y="820" width="0.4000%" height="15" fill="rgb(232,163,46)" fg:x="11319" fg:w="80"/><text x="56.8507%" y="830.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (80 samples, 0.40%)</title><rect x="56.6007%" y="836" width="0.4000%" height="15" fill="rgb(206,95,13)" fg:x="11319" fg:w="80"/><text x="56.8507%" y="846.50"></text></g><g><title>std::io::Write::write_all (80 samples, 0.40%)</title><rect x="56.6007%" y="852" width="0.4000%" height="15" fill="rgb(253,154,18)" fg:x="11319" fg:w="80"/><text x="56.8507%" y="862.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (3 samples, 0.02%)</title><rect x="56.9857%" y="868" width="0.0150%" height="15" fill="rgb(219,32,23)" fg:x="11396" fg:w="3"/><text x="57.2357%" y="878.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response (2,972 samples, 14.86%)</title><rect x="42.1592%" y="644" width="14.8615%" height="15" fill="rgb(230,191,45)" fg:x="8431" fg:w="2972"/><text x="42.4092%" y="654.50">&lt;core::result::Result&lt;T..</text></g><g><title>&lt;(http::status::StatusCode,R) as axum_core::response::into_response::IntoResponse&gt;::into_response (2,972 samples, 14.86%)</title><rect x="42.1592%" y="660" width="14.8615%" height="15" fill="rgb(229,64,36)" fg:x="8431" fg:w="2972"/><text x="42.4092%" y="670.50">&lt;(http::status::StatusC..</text></g><g><title>&lt;axum::json::Json&lt;T&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response (2,968 samples, 14.84%)</title><rect x="42.1792%" y="676" width="14.8415%" height="15" fill="rgb(205,129,25)" fg:x="8435" fg:w="2968"/><text x="42.4292%" y="686.50">&lt;axum::json::Json&lt;T&gt; as..</text></g><g><title>serde_json::ser::to_writer (2,464 samples, 12.32%)</title><rect x="44.6995%" y="692" width="12.3212%" height="15" fill="rgb(254,112,7)" fg:x="8939" fg:w="2464"/><text x="44.9495%" y="702.50">serde_json::ser::t..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (2,464 samples, 12.32%)</title><rect x="44.6995%" y="708" width="12.3212%" height="15" fill="rgb(226,53,48)" fg:x="8939" fg:w="2464"/><text x="44.9495%" y="718.50">serde::ser::impls:..</text></g><g><title>serde::ser::Serializer::collect_seq (2,464 samples, 12.32%)</title><rect x="44.6995%" y="724" width="12.3212%" height="15" fill="rgb(214,153,38)" fg:x="8939" fg:w="2464"/><text x="44.9495%" y="734.50">serde::ser::Serial..</text></g><g><title>std::io::Write::write_all (4 samples, 0.02%)</title><rect x="57.0007%" y="740" width="0.0200%" height="15" fill="rgb(243,101,7)" fg:x="11399" fg:w="4"/><text x="57.2507%" y="750.50"></text></g><g><title>__memcpy_avx_unaligned_erms (11 samples, 0.06%)</title><rect x="57.0207%" y="644" width="0.0550%" height="15" fill="rgb(240,140,22)" fg:x="11403" fg:w="11"/><text x="57.2707%" y="654.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="57.0807%" y="676" width="0.0150%" height="15" fill="rgb(235,114,2)" fg:x="11415" fg:w="3"/><text x="57.3307%" y="686.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="57.0807%" y="692" width="0.0150%" height="15" fill="rgb(242,59,12)" fg:x="11415" fg:w="3"/><text x="57.3307%" y="702.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="57.0807%" y="708" width="0.0150%" height="15" fill="rgb(252,134,9)" fg:x="11415" fg:w="3"/><text x="57.3307%" y="718.50"></text></g><g><title>__GI___libc_free (3 samples, 0.02%)</title><rect x="57.0807%" y="724" width="0.0150%" height="15" fill="rgb(236,4,44)" fg:x="11415" fg:w="3"/><text x="57.3307%" y="734.50"></text></g><g><title>_int_free (3 samples, 0.02%)</title><rect x="57.0807%" y="740" width="0.0150%" height="15" fill="rgb(254,172,41)" fg:x="11415" fg:w="3"/><text x="57.3307%" y="750.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;rust_axum::DatabaseConnection,(http::status::StatusCode,alloc::string::String)&gt;+core::marker::Send&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="57.0807%" y="644" width="0.0250%" height="15" fill="rgb(244,63,20)" fg:x="11415" fg:w="5"/><text x="57.3307%" y="654.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;rust_axum::DatabaseConnection,(http::status::StatusCode,alloc::string::String)&gt;+core::marker::Send&gt;&gt; (5 samples, 0.03%)</title><rect x="57.0807%" y="660" width="0.0250%" height="15" fill="rgb(250,73,31)" fg:x="11415" fg:w="5"/><text x="57.3307%" y="670.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rust_axum::DatabaseConnection as axum_core::extract::FromRequest&lt;sqlx_core::pool::Pool&lt;sqlx_postgres::database::Postgres&gt;,hyper::body::body::Body,axum_core::extract::private::ViaParts&gt;&gt;::from_request::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="57.0957%" y="676" width="0.0100%" height="15" fill="rgb(241,38,36)" fg:x="11418" fg:w="2"/><text x="57.3457%" y="686.50"></text></g><g><title>core::ptr::drop_in_place&lt;rust_axum::read_users::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="57.1057%" y="644" width="0.0100%" height="15" fill="rgb(245,211,2)" fg:x="11420" fg:w="2"/><text x="57.3557%" y="654.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::Pool&lt;sqlx_postgres::database::Postgres&gt;&gt; (3 samples, 0.02%)</title><rect x="57.1157%" y="644" width="0.0150%" height="15" fill="rgb(206,120,28)" fg:x="11422" fg:w="3"/><text x="57.3657%" y="654.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;sqlx_core::pool::inner::PoolInner&lt;sqlx_postgres::database::Postgres&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="57.1157%" y="660" width="0.0150%" height="15" fill="rgb(211,59,34)" fg:x="11422" fg:w="3"/><text x="57.3657%" y="670.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="57.1157%" y="676" width="0.0150%" height="15" fill="rgb(233,168,5)" fg:x="11422" fg:w="3"/><text x="57.3657%" y="686.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="57.1457%" y="660" width="0.0150%" height="15" fill="rgb(234,33,13)" fg:x="11428" fg:w="3"/><text x="57.3957%" y="670.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch_all&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="57.1657%" y="660" width="0.0100%" height="15" fill="rgb(231,150,26)" fg:x="11432" fg:w="2"/><text x="57.4157%" y="670.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (85 samples, 0.43%)</title><rect x="57.6308%" y="740" width="0.4250%" height="15" fill="rgb(217,191,4)" fg:x="11525" fg:w="85"/><text x="57.8808%" y="750.50"></text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch::_{{closure}}::_{{closure}} (85 samples, 0.43%)</title><rect x="57.6308%" y="756" width="0.4250%" height="15" fill="rgb(246,198,38)" fg:x="11525" fg:w="85"/><text x="57.8808%" y="766.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (10 samples, 0.05%)</title><rect x="58.3608%" y="836" width="0.0500%" height="15" fill="rgb(245,64,37)" fg:x="11671" fg:w="10"/><text x="58.6108%" y="846.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (7 samples, 0.04%)</title><rect x="58.4108%" y="836" width="0.0350%" height="15" fill="rgb(250,30,36)" fg:x="11681" fg:w="7"/><text x="58.6608%" y="846.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (7 samples, 0.04%)</title><rect x="58.4108%" y="852" width="0.0350%" height="15" fill="rgb(217,86,53)" fg:x="11681" fg:w="7"/><text x="58.6608%" y="862.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (18 samples, 0.09%)</title><rect x="58.6309%" y="852" width="0.0900%" height="15" fill="rgb(228,157,16)" fg:x="11725" fg:w="18"/><text x="58.8809%" y="862.50"></text></g><g><title>_int_free (3 samples, 0.02%)</title><rect x="58.7209%" y="868" width="0.0150%" height="15" fill="rgb(217,59,31)" fg:x="11743" fg:w="3"/><text x="58.9709%" y="878.50"></text></g><g><title>__GI___libc_free (4 samples, 0.02%)</title><rect x="58.7209%" y="852" width="0.0200%" height="15" fill="rgb(237,138,41)" fg:x="11743" fg:w="4"/><text x="58.9709%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="58.7459%" y="852" width="0.0100%" height="15" fill="rgb(227,91,49)" fg:x="11748" fg:w="2"/><text x="58.9959%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="58.7459%" y="868" width="0.0100%" height="15" fill="rgb(247,21,44)" fg:x="11748" fg:w="2"/><text x="58.9959%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="58.7459%" y="884" width="0.0100%" height="15" fill="rgb(219,210,51)" fg:x="11748" fg:w="2"/><text x="58.9959%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch_many&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}}::{{closure}}&gt; (4 samples, 0.02%)</title><rect x="58.7559%" y="852" width="0.0200%" height="15" fill="rgb(209,140,6)" fg:x="11750" fg:w="4"/><text x="59.0059%" y="862.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (96 samples, 0.48%)</title><rect x="59.5160%" y="868" width="0.4800%" height="15" fill="rgb(221,188,24)" fg:x="11902" fg:w="96"/><text x="59.7660%" y="878.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (19 samples, 0.10%)</title><rect x="60.1560%" y="948" width="0.0950%" height="15" fill="rgb(232,154,20)" fg:x="12030" fg:w="19"/><text x="60.4060%" y="958.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (5 samples, 0.03%)</title><rect x="60.2510%" y="948" width="0.0250%" height="15" fill="rgb(244,137,50)" fg:x="12049" fg:w="5"/><text x="60.5010%" y="958.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="60.3810%" y="964" width="0.0100%" height="15" fill="rgb(225,185,43)" fg:x="12075" fg:w="2"/><text x="60.6310%" y="974.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="60.3810%" y="980" width="0.0100%" height="15" fill="rgb(213,205,38)" fg:x="12075" fg:w="2"/><text x="60.6310%" y="990.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="60.3810%" y="996" width="0.0100%" height="15" fill="rgb(236,73,12)" fg:x="12075" fg:w="2"/><text x="60.6310%" y="1006.50"></text></g><g><title>_ZN15futures_channel4mpsc27BoundedSenderInner$LT$T$GT$13poll_unparked17ha1f26b6d80220e67E.llvm.14649322283256066022 (15 samples, 0.08%)</title><rect x="60.3910%" y="964" width="0.0750%" height="15" fill="rgb(235,219,13)" fg:x="12077" fg:w="15"/><text x="60.6410%" y="974.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (14 samples, 0.07%)</title><rect x="60.4660%" y="964" width="0.0700%" height="15" fill="rgb(218,59,36)" fg:x="12092" fg:w="14"/><text x="60.7160%" y="974.50"></text></g><g><title>core::sync::atomic::atomic_load (14 samples, 0.07%)</title><rect x="60.4660%" y="980" width="0.0700%" height="15" fill="rgb(205,110,39)" fg:x="12092" fg:w="14"/><text x="60.7160%" y="990.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (100 samples, 0.50%)</title><rect x="60.5361%" y="964" width="0.5001%" height="15" fill="rgb(218,206,42)" fg:x="12106" fg:w="100"/><text x="60.7861%" y="974.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::poll_ready (182 samples, 0.91%)</title><rect x="60.1560%" y="900" width="0.9101%" height="15" fill="rgb(248,125,24)" fg:x="12030" fg:w="182"/><text x="60.4060%" y="910.50"></text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::poll_ready (182 samples, 0.91%)</title><rect x="60.1560%" y="916" width="0.9101%" height="15" fill="rgb(242,28,27)" fg:x="12030" fg:w="182"/><text x="60.4060%" y="926.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::poll_ready (182 samples, 0.91%)</title><rect x="60.1560%" y="932" width="0.9101%" height="15" fill="rgb(216,228,15)" fg:x="12030" fg:w="182"/><text x="60.4060%" y="942.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_ready (158 samples, 0.79%)</title><rect x="60.2760%" y="948" width="0.7901%" height="15" fill="rgb(235,116,46)" fg:x="12054" fg:w="158"/><text x="60.5260%" y="958.50"></text></g><g><title>futures_channel::mpsc::decode_state (6 samples, 0.03%)</title><rect x="61.0361%" y="964" width="0.0300%" height="15" fill="rgb(224,18,32)" fg:x="12206" fg:w="6"/><text x="61.2861%" y="974.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.01%)</title><rect x="61.3811%" y="948" width="0.0100%" height="15" fill="rgb(252,5,12)" fg:x="12275" fg:w="2"/><text x="61.6311%" y="958.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (2 samples, 0.01%)</title><rect x="61.5362%" y="996" width="0.0100%" height="15" fill="rgb(251,36,5)" fg:x="12306" fg:w="2"/><text x="61.7862%" y="1006.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.02%)</title><rect x="61.6712%" y="1012" width="0.0150%" height="15" fill="rgb(217,53,14)" fg:x="12333" fg:w="3"/><text x="61.9212%" y="1022.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (3 samples, 0.02%)</title><rect x="61.6712%" y="1028" width="0.0150%" height="15" fill="rgb(215,86,45)" fg:x="12333" fg:w="3"/><text x="61.9212%" y="1038.50"></text></g><g><title>futures_channel::mpsc::decode_state (2 samples, 0.01%)</title><rect x="61.6862%" y="1012" width="0.0100%" height="15" fill="rgb(242,169,11)" fg:x="12336" fg:w="2"/><text x="61.9362%" y="1022.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::inc_num_messages (42 samples, 0.21%)</title><rect x="61.5512%" y="996" width="0.2100%" height="15" fill="rgb(211,213,45)" fg:x="12309" fg:w="42"/><text x="61.8012%" y="1006.50"></text></g><g><title>futures_channel::mpsc::encode_state (13 samples, 0.07%)</title><rect x="61.6962%" y="1012" width="0.0650%" height="15" fill="rgb(205,88,11)" fg:x="12338" fg:w="13"/><text x="61.9462%" y="1022.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::clone::Clone&gt;::clone (54 samples, 0.27%)</title><rect x="61.7812%" y="1012" width="0.2700%" height="15" fill="rgb(252,69,26)" fg:x="12355" fg:w="54"/><text x="62.0312%" y="1022.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="62.0512%" y="1012" width="0.0150%" height="15" fill="rgb(246,123,37)" fg:x="12409" fg:w="3"/><text x="62.3012%" y="1022.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (3 samples, 0.02%)</title><rect x="62.0512%" y="1028" width="0.0150%" height="15" fill="rgb(212,205,5)" fg:x="12409" fg:w="3"/><text x="62.3012%" y="1038.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="62.0512%" y="1044" width="0.0150%" height="15" fill="rgb(253,148,0)" fg:x="12409" fg:w="3"/><text x="62.3012%" y="1054.50"></text></g><g><title>std::sync::poison::Flag::done (2 samples, 0.01%)</title><rect x="62.0662%" y="1044" width="0.0100%" height="15" fill="rgb(239,22,4)" fg:x="12412" fg:w="2"/><text x="62.3162%" y="1054.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (40 samples, 0.20%)</title><rect x="62.0662%" y="1012" width="0.2000%" height="15" fill="rgb(226,26,53)" fg:x="12412" fg:w="40"/><text x="62.3162%" y="1022.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.20%)</title><rect x="62.0662%" y="1028" width="0.2000%" height="15" fill="rgb(225,229,45)" fg:x="12412" fg:w="40"/><text x="62.3162%" y="1038.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (38 samples, 0.19%)</title><rect x="62.0762%" y="1044" width="0.1900%" height="15" fill="rgb(220,60,37)" fg:x="12414" fg:w="38"/><text x="62.3262%" y="1054.50"></text></g><g><title>futures_channel::mpsc::decode_state (4 samples, 0.02%)</title><rect x="62.2662%" y="1012" width="0.0200%" height="15" fill="rgb(217,180,35)" fg:x="12452" fg:w="4"/><text x="62.5162%" y="1022.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (33 samples, 0.17%)</title><rect x="62.2862%" y="1028" width="0.1650%" height="15" fill="rgb(229,7,53)" fg:x="12456" fg:w="33"/><text x="62.5362%" y="1038.50"></text></g><g><title>core::sync::atomic::atomic_store (33 samples, 0.17%)</title><rect x="62.2862%" y="1044" width="0.1650%" height="15" fill="rgb(254,137,3)" fg:x="12456" fg:w="33"/><text x="62.5362%" y="1054.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::swap (2 samples, 0.01%)</title><rect x="62.4512%" y="1028" width="0.0100%" height="15" fill="rgb(215,140,41)" fg:x="12489" fg:w="2"/><text x="62.7012%" y="1038.50"></text></g><g><title>core::sync::atomic::atomic_swap (2 samples, 0.01%)</title><rect x="62.4512%" y="1044" width="0.0100%" height="15" fill="rgb(250,80,15)" fg:x="12489" fg:w="2"/><text x="62.7012%" y="1054.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.02%)</title><rect x="62.7663%" y="1124" width="0.0200%" height="15" fill="rgb(252,191,6)" fg:x="12552" fg:w="4"/><text x="63.0163%" y="1134.50"></text></g><g><title>__rdl_alloc (6 samples, 0.03%)</title><rect x="62.7863%" y="1124" width="0.0300%" height="15" fill="rgb(246,217,18)" fg:x="12556" fg:w="6"/><text x="63.0363%" y="1134.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (109 samples, 0.55%)</title><rect x="62.2862%" y="1012" width="0.5451%" height="15" fill="rgb(223,93,7)" fg:x="12456" fg:w="109"/><text x="62.5362%" y="1022.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (74 samples, 0.37%)</title><rect x="62.4612%" y="1028" width="0.3700%" height="15" fill="rgb(225,55,52)" fg:x="12491" fg:w="74"/><text x="62.7112%" y="1038.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (74 samples, 0.37%)</title><rect x="62.4612%" y="1044" width="0.3700%" height="15" fill="rgb(240,31,24)" fg:x="12491" fg:w="74"/><text x="62.7112%" y="1054.50"></text></g><g><title>alloc::alloc::exchange_malloc (19 samples, 0.10%)</title><rect x="62.7363%" y="1060" width="0.0950%" height="15" fill="rgb(205,56,52)" fg:x="12546" fg:w="19"/><text x="62.9863%" y="1070.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.08%)</title><rect x="62.7513%" y="1076" width="0.0800%" height="15" fill="rgb(246,146,12)" fg:x="12549" fg:w="16"/><text x="63.0013%" y="1086.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.08%)</title><rect x="62.7513%" y="1092" width="0.0800%" height="15" fill="rgb(239,84,36)" fg:x="12549" fg:w="16"/><text x="63.0013%" y="1102.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.08%)</title><rect x="62.7513%" y="1108" width="0.0800%" height="15" fill="rgb(207,41,40)" fg:x="12549" fg:w="16"/><text x="63.0013%" y="1118.50"></text></g><g><title>__rust_alloc (3 samples, 0.02%)</title><rect x="62.8163%" y="1124" width="0.0150%" height="15" fill="rgb(241,179,25)" fg:x="12562" fg:w="3"/><text x="63.0663%" y="1134.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4 samples, 0.02%)</title><rect x="62.8313%" y="1028" width="0.0200%" height="15" fill="rgb(210,0,34)" fg:x="12565" fg:w="4"/><text x="63.0813%" y="1038.50"></text></g><g><title>std::sync::poison::Flag::guard (4 samples, 0.02%)</title><rect x="62.8313%" y="1044" width="0.0200%" height="15" fill="rgb(225,217,29)" fg:x="12565" fg:w="4"/><text x="63.0813%" y="1054.50"></text></g><g><title>std::thread::panicking (3 samples, 0.02%)</title><rect x="62.8363%" y="1060" width="0.0150%" height="15" fill="rgb(216,191,38)" fg:x="12566" fg:w="3"/><text x="63.0863%" y="1070.50"></text></g><g><title>std::panicking::panicking (3 samples, 0.02%)</title><rect x="62.8363%" y="1076" width="0.0150%" height="15" fill="rgb(232,140,52)" fg:x="12566" fg:w="3"/><text x="63.0863%" y="1086.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (3 samples, 0.02%)</title><rect x="62.8363%" y="1092" width="0.0150%" height="15" fill="rgb(223,158,51)" fg:x="12566" fg:w="3"/><text x="63.0863%" y="1102.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="62.8413%" y="1108" width="0.0100%" height="15" fill="rgb(235,29,51)" fg:x="12567" fg:w="2"/><text x="63.0913%" y="1118.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="62.8413%" y="1124" width="0.0100%" height="15" fill="rgb(215,181,18)" fg:x="12567" fg:w="2"/><text x="63.0913%" y="1134.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::park (264 samples, 1.32%)</title><rect x="61.7612%" y="996" width="1.3201%" height="15" fill="rgb(227,125,34)" fg:x="12351" fg:w="264"/><text x="62.0112%" y="1006.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (50 samples, 0.25%)</title><rect x="62.8313%" y="1012" width="0.2500%" height="15" fill="rgb(230,197,49)" fg:x="12565" fg:w="50"/><text x="63.0813%" y="1022.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (46 samples, 0.23%)</title><rect x="62.8513%" y="1028" width="0.2300%" height="15" fill="rgb(239,141,16)" fg:x="12569" fg:w="46"/><text x="63.1013%" y="1038.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (46 samples, 0.23%)</title><rect x="62.8513%" y="1044" width="0.2300%" height="15" fill="rgb(225,105,43)" fg:x="12569" fg:w="46"/><text x="63.1013%" y="1054.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (46 samples, 0.23%)</title><rect x="62.8513%" y="1060" width="0.2300%" height="15" fill="rgb(214,131,14)" fg:x="12569" fg:w="46"/><text x="63.1013%" y="1070.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::store (22 samples, 0.11%)</title><rect x="63.1063%" y="1028" width="0.1100%" height="15" fill="rgb(229,177,11)" fg:x="12620" fg:w="22"/><text x="63.3563%" y="1038.50"></text></g><g><title>core::sync::atomic::atomic_store (22 samples, 0.11%)</title><rect x="63.1063%" y="1044" width="0.1100%" height="15" fill="rgb(231,180,14)" fg:x="12620" fg:w="22"/><text x="63.3563%" y="1054.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.02%)</title><rect x="63.3313%" y="1124" width="0.0150%" height="15" fill="rgb(232,88,2)" fg:x="12665" fg:w="3"/><text x="63.5813%" y="1134.50"></text></g><g><title>__rdl_alloc (3 samples, 0.02%)</title><rect x="63.3463%" y="1124" width="0.0150%" height="15" fill="rgb(205,220,8)" fg:x="12668" fg:w="3"/><text x="63.5963%" y="1134.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.02%)</title><rect x="63.3463%" y="1140" width="0.0150%" height="15" fill="rgb(225,23,53)" fg:x="12668" fg:w="3"/><text x="63.5963%" y="1150.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::push (55 samples, 0.28%)</title><rect x="63.1063%" y="1012" width="0.2750%" height="15" fill="rgb(213,62,29)" fg:x="12620" fg:w="55"/><text x="63.3563%" y="1022.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (33 samples, 0.17%)</title><rect x="63.2163%" y="1028" width="0.1650%" height="15" fill="rgb(227,75,7)" fg:x="12642" fg:w="33"/><text x="63.4663%" y="1038.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (33 samples, 0.17%)</title><rect x="63.2163%" y="1044" width="0.1650%" height="15" fill="rgb(207,105,14)" fg:x="12642" fg:w="33"/><text x="63.4663%" y="1054.50"></text></g><g><title>alloc::alloc::exchange_malloc (12 samples, 0.06%)</title><rect x="63.3213%" y="1060" width="0.0600%" height="15" fill="rgb(245,62,29)" fg:x="12663" fg:w="12"/><text x="63.5713%" y="1070.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.05%)</title><rect x="63.3313%" y="1076" width="0.0500%" height="15" fill="rgb(236,202,4)" fg:x="12665" fg:w="10"/><text x="63.5813%" y="1086.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.05%)</title><rect x="63.3313%" y="1092" width="0.0500%" height="15" fill="rgb(250,67,1)" fg:x="12665" fg:w="10"/><text x="63.5813%" y="1102.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.05%)</title><rect x="63.3313%" y="1108" width="0.0500%" height="15" fill="rgb(253,115,44)" fg:x="12665" fg:w="10"/><text x="63.5813%" y="1118.50"></text></g><g><title>__rust_alloc (4 samples, 0.02%)</title><rect x="63.3613%" y="1124" width="0.0200%" height="15" fill="rgb(251,139,18)" fg:x="12671" fg:w="4"/><text x="63.6113%" y="1134.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (3 samples, 0.02%)</title><rect x="63.6014%" y="1044" width="0.0150%" height="15" fill="rgb(218,22,32)" fg:x="12719" fg:w="3"/><text x="63.8514%" y="1054.50"></text></g><g><title>core::mem::replace (3 samples, 0.02%)</title><rect x="63.6014%" y="1060" width="0.0150%" height="15" fill="rgb(243,53,5)" fg:x="12719" fg:w="3"/><text x="63.8514%" y="1070.50"></text></g><g><title>core::ptr::read (3 samples, 0.02%)</title><rect x="63.6014%" y="1076" width="0.0150%" height="15" fill="rgb(227,56,16)" fg:x="12719" fg:w="3"/><text x="63.8514%" y="1086.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::do_send_b (493 samples, 2.47%)</title><rect x="61.4511%" y="980" width="2.4652%" height="15" fill="rgb(245,53,0)" fg:x="12289" fg:w="493"/><text x="61.7011%" y="990.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::queue_push_and_signal (167 samples, 0.84%)</title><rect x="63.0813%" y="996" width="0.8351%" height="15" fill="rgb(216,170,35)" fg:x="12615" fg:w="167"/><text x="63.3313%" y="1006.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::wake (107 samples, 0.54%)</title><rect x="63.3813%" y="1012" width="0.5351%" height="15" fill="rgb(211,200,8)" fg:x="12675" fg:w="107"/><text x="63.6313%" y="1022.50"></text></g><g><title>futures_core::task::__internal::atomic_waker::AtomicWaker::take (63 samples, 0.32%)</title><rect x="63.6014%" y="1028" width="0.3150%" height="15" fill="rgb(228,204,44)" fg:x="12719" fg:w="63"/><text x="63.8514%" y="1038.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (60 samples, 0.30%)</title><rect x="63.6164%" y="1044" width="0.3000%" height="15" fill="rgb(214,121,17)" fg:x="12722" fg:w="60"/><text x="63.8664%" y="1054.50"></text></g><g><title>core::sync::atomic::atomic_or (60 samples, 0.30%)</title><rect x="63.6164%" y="1060" width="0.3000%" height="15" fill="rgb(233,64,38)" fg:x="12722" fg:w="60"/><text x="63.8664%" y="1070.50"></text></g><g><title>&lt;&amp;mut S as futures_sink::Sink&lt;Item&gt;&gt;::start_send (575 samples, 2.88%)</title><rect x="61.0661%" y="900" width="2.8753%" height="15" fill="rgb(253,54,19)" fg:x="12212" fg:w="575"/><text x="61.3161%" y="910.50">&lt;&amp;..</text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::start_send (512 samples, 2.56%)</title><rect x="61.3811%" y="916" width="2.5603%" height="15" fill="rgb(253,94,18)" fg:x="12275" fg:w="512"/><text x="61.6311%" y="926.50">fu..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::start_send (512 samples, 2.56%)</title><rect x="61.3811%" y="932" width="2.5603%" height="15" fill="rgb(227,57,52)" fg:x="12275" fg:w="512"/><text x="61.6311%" y="942.50">fu..</text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::try_send (510 samples, 2.55%)</title><rect x="61.3911%" y="948" width="2.5503%" height="15" fill="rgb(230,228,50)" fg:x="12277" fg:w="510"/><text x="61.6411%" y="958.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::try_send (502 samples, 2.51%)</title><rect x="61.4311%" y="964" width="2.5103%" height="15" fill="rgb(217,205,27)" fg:x="12285" fg:w="502"/><text x="61.6811%" y="974.50">fu..</text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (5 samples, 0.03%)</title><rect x="63.9164%" y="980" width="0.0250%" height="15" fill="rgb(252,71,50)" fg:x="12782" fg:w="5"/><text x="64.1664%" y="990.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (12 samples, 0.06%)</title><rect x="63.9414%" y="900" width="0.0600%" height="15" fill="rgb(209,86,4)" fg:x="12787" fg:w="12"/><text x="64.1914%" y="910.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (25 samples, 0.13%)</title><rect x="64.0014%" y="900" width="0.1250%" height="15" fill="rgb(229,94,0)" fg:x="12799" fg:w="25"/><text x="64.2514%" y="910.50"></text></g><g><title>&lt;futures_util::sink::feed::Feed&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (804 samples, 4.02%)</title><rect x="60.1460%" y="884" width="4.0204%" height="15" fill="rgb(252,223,21)" fg:x="12028" fg:w="804"/><text x="60.3960%" y="894.50">&lt;fut..</text></g><g><title>core::option::Option&lt;T&gt;::take (8 samples, 0.04%)</title><rect x="64.1264%" y="900" width="0.0400%" height="15" fill="rgb(230,210,4)" fg:x="12824" fg:w="8"/><text x="64.3764%" y="910.50"></text></g><g><title>core::mem::replace (8 samples, 0.04%)</title><rect x="64.1264%" y="916" width="0.0400%" height="15" fill="rgb(240,149,38)" fg:x="12824" fg:w="8"/><text x="64.3764%" y="926.50"></text></g><g><title>core::ptr::write (8 samples, 0.04%)</title><rect x="64.1264%" y="932" width="0.0400%" height="15" fill="rgb(254,105,20)" fg:x="12824" fg:w="8"/><text x="64.3764%" y="942.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (7 samples, 0.04%)</title><rect x="64.1664%" y="884" width="0.0350%" height="15" fill="rgb(253,87,46)" fg:x="12832" fg:w="7"/><text x="64.4164%" y="894.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="64.2014%" y="916" width="0.0100%" height="15" fill="rgb(253,116,33)" fg:x="12839" fg:w="2"/><text x="64.4514%" y="926.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (4 samples, 0.02%)</title><rect x="64.2114%" y="916" width="0.0200%" height="15" fill="rgb(229,198,5)" fg:x="12841" fg:w="4"/><text x="64.4614%" y="926.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (55 samples, 0.28%)</title><rect x="64.8615%" y="948" width="0.2750%" height="15" fill="rgb(242,38,37)" fg:x="12971" fg:w="55"/><text x="65.1115%" y="958.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked::_{{closure}} (53 samples, 0.27%)</title><rect x="64.8715%" y="964" width="0.2650%" height="15" fill="rgb(242,69,53)" fg:x="12973" fg:w="53"/><text x="65.1215%" y="974.50"></text></g><g><title>&lt;core::task::wake::Waker as core::clone::Clone&gt;::clone (53 samples, 0.27%)</title><rect x="64.8715%" y="980" width="0.2650%" height="15" fill="rgb(249,80,16)" fg:x="12973" fg:w="53"/><text x="65.1215%" y="990.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (53 samples, 0.27%)</title><rect x="64.8715%" y="996" width="0.2650%" height="15" fill="rgb(206,128,11)" fg:x="12973" fg:w="53"/><text x="65.1215%" y="1006.50"></text></g><g><title>tokio::runtime::task::state::State::ref_inc (47 samples, 0.24%)</title><rect x="64.9015%" y="1012" width="0.2350%" height="15" fill="rgb(212,35,20)" fg:x="12979" fg:w="47"/><text x="65.1515%" y="1022.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (35 samples, 0.18%)</title><rect x="65.1365%" y="948" width="0.1750%" height="15" fill="rgb(236,79,13)" fg:x="13026" fg:w="35"/><text x="65.3865%" y="958.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 0.18%)</title><rect x="65.1365%" y="964" width="0.1750%" height="15" fill="rgb(233,123,3)" fg:x="13026" fg:w="35"/><text x="65.3865%" y="974.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (34 samples, 0.17%)</title><rect x="65.1415%" y="980" width="0.1700%" height="15" fill="rgb(214,93,52)" fg:x="13027" fg:w="34"/><text x="65.3915%" y="990.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (34 samples, 0.17%)</title><rect x="65.1415%" y="996" width="0.1700%" height="15" fill="rgb(251,37,40)" fg:x="13027" fg:w="34"/><text x="65.3915%" y="1006.50"></text></g><g><title>core::sync::atomic::atomic_swap (34 samples, 0.17%)</title><rect x="65.1415%" y="1012" width="0.1700%" height="15" fill="rgb(227,80,54)" fg:x="13027" fg:w="34"/><text x="65.3915%" y="1022.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="65.3115%" y="964" width="0.0350%" height="15" fill="rgb(254,48,11)" fg:x="13061" fg:w="7"/><text x="65.5615%" y="974.50"></text></g><g><title>std::sync::poison::Flag::guard (6 samples, 0.03%)</title><rect x="65.3165%" y="980" width="0.0300%" height="15" fill="rgb(235,193,26)" fg:x="13062" fg:w="6"/><text x="65.5665%" y="990.50"></text></g><g><title>std::thread::panicking (5 samples, 0.03%)</title><rect x="65.3215%" y="996" width="0.0250%" height="15" fill="rgb(229,99,21)" fg:x="13063" fg:w="5"/><text x="65.5715%" y="1006.50"></text></g><g><title>std::panicking::panicking (5 samples, 0.03%)</title><rect x="65.3215%" y="1012" width="0.0250%" height="15" fill="rgb(211,140,41)" fg:x="13063" fg:w="5"/><text x="65.5715%" y="1022.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (5 samples, 0.03%)</title><rect x="65.3215%" y="1028" width="0.0250%" height="15" fill="rgb(240,227,30)" fg:x="13063" fg:w="5"/><text x="65.5715%" y="1038.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (264 samples, 1.32%)</title><rect x="64.2764%" y="932" width="1.3201%" height="15" fill="rgb(215,224,45)" fg:x="12854" fg:w="264"/><text x="64.5264%" y="942.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (57 samples, 0.29%)</title><rect x="65.3115%" y="948" width="0.2850%" height="15" fill="rgb(206,123,31)" fg:x="13061" fg:w="57"/><text x="65.5615%" y="958.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (50 samples, 0.25%)</title><rect x="65.3465%" y="964" width="0.2500%" height="15" fill="rgb(210,138,16)" fg:x="13068" fg:w="50"/><text x="65.5965%" y="974.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (9 samples, 0.05%)</title><rect x="65.5516%" y="980" width="0.0450%" height="15" fill="rgb(228,57,28)" fg:x="13109" fg:w="9"/><text x="65.8016%" y="990.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (9 samples, 0.05%)</title><rect x="65.5516%" y="996" width="0.0450%" height="15" fill="rgb(242,170,10)" fg:x="13109" fg:w="9"/><text x="65.8016%" y="1006.50"></text></g><g><title>&lt;futures_util::sink::send::Send&lt;Si,Item&gt; as core::future::future::Future&gt;::poll (1,135 samples, 5.68%)</title><rect x="59.9960%" y="868" width="5.6756%" height="15" fill="rgb(228,214,39)" fg:x="11998" fg:w="1135"/><text x="60.2460%" y="878.50">&lt;future..</text></g><g><title>futures_channel::mpsc::sink_impl::&lt;impl futures_sink::Sink&lt;T&gt; for futures_channel::mpsc::Sender&lt;T&gt;&gt;::poll_flush (294 samples, 1.47%)</title><rect x="64.2014%" y="884" width="1.4701%" height="15" fill="rgb(218,179,33)" fg:x="12839" fg:w="294"/><text x="64.4514%" y="894.50"></text></g><g><title>futures_channel::mpsc::Sender&lt;T&gt;::poll_ready (294 samples, 1.47%)</title><rect x="64.2014%" y="900" width="1.4701%" height="15" fill="rgb(235,193,39)" fg:x="12839" fg:w="294"/><text x="64.4514%" y="910.50"></text></g><g><title>futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_ready (288 samples, 1.44%)</title><rect x="64.2314%" y="916" width="1.4401%" height="15" fill="rgb(219,221,36)" fg:x="12845" fg:w="288"/><text x="64.4814%" y="926.50"></text></g><g><title>futures_channel::mpsc::decode_state (15 samples, 0.08%)</title><rect x="65.5966%" y="932" width="0.0750%" height="15" fill="rgb(248,218,19)" fg:x="13118" fg:w="15"/><text x="65.8466%" y="942.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::option::Option&lt;core::result::Result&lt;T,E&gt;&gt;&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.10%)</title><rect x="65.7016%" y="884" width="0.0950%" height="15" fill="rgb(205,50,9)" fg:x="13139" fg:w="19"/><text x="65.9516%" y="894.50"></text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (65 samples, 0.33%)</title><rect x="65.7966%" y="884" width="0.3250%" height="15" fill="rgb(238,81,28)" fg:x="13158" fg:w="65"/><text x="66.0466%" y="894.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (14 samples, 0.07%)</title><rect x="66.2116%" y="980" width="0.0700%" height="15" fill="rgb(235,110,19)" fg:x="13241" fg:w="14"/><text x="66.4616%" y="990.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (29 samples, 0.15%)</title><rect x="66.2116%" y="948" width="0.1450%" height="15" fill="rgb(214,7,14)" fg:x="13241" fg:w="29"/><text x="66.4616%" y="958.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (29 samples, 0.15%)</title><rect x="66.2116%" y="964" width="0.1450%" height="15" fill="rgb(211,77,3)" fg:x="13241" fg:w="29"/><text x="66.4616%" y="974.50"></text></g><g><title>core::pin::Pin&lt;&amp;mut core::pin::Pin&lt;P&gt;&gt;::as_deref_mut (15 samples, 0.08%)</title><rect x="66.2816%" y="980" width="0.0750%" height="15" fill="rgb(229,5,9)" fg:x="13255" fg:w="15"/><text x="66.5316%" y="990.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (15 samples, 0.08%)</title><rect x="66.2816%" y="996" width="0.0750%" height="15" fill="rgb(225,90,11)" fg:x="13255" fg:w="15"/><text x="66.5316%" y="1006.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (15 samples, 0.08%)</title><rect x="66.2816%" y="1012" width="0.0750%" height="15" fill="rgb(242,56,8)" fg:x="13255" fg:w="15"/><text x="66.5316%" y="1022.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (6 samples, 0.03%)</title><rect x="66.5067%" y="980" width="0.0300%" height="15" fill="rgb(249,212,39)" fg:x="13300" fg:w="6"/><text x="66.7567%" y="990.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (3 samples, 0.02%)</title><rect x="66.5217%" y="996" width="0.0150%" height="15" fill="rgb(236,90,9)" fg:x="13303" fg:w="3"/><text x="66.7717%" y="1006.50"></text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (84 samples, 0.42%)</title><rect x="66.1216%" y="932" width="0.4200%" height="15" fill="rgb(206,88,35)" fg:x="13223" fg:w="84"/><text x="66.3716%" y="942.50"></text></g><g><title>&lt;&amp;mut S as futures_core::stream::Stream&gt;::poll_next (37 samples, 0.19%)</title><rect x="66.3566%" y="948" width="0.1850%" height="15" fill="rgb(205,126,30)" fg:x="13270" fg:w="37"/><text x="66.6066%" y="958.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (29 samples, 0.15%)</title><rect x="66.3966%" y="964" width="0.1450%" height="15" fill="rgb(230,176,12)" fg:x="13278" fg:w="29"/><text x="66.6466%" y="974.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_next::TryNext&lt;St&gt; as core::future::future::Future&gt;::poll (176 samples, 0.88%)</title><rect x="65.6716%" y="868" width="0.8801%" height="15" fill="rgb(243,19,9)" fg:x="13133" fg:w="176"/><text x="65.9216%" y="878.50"></text></g><g><title>futures_util::stream::try_stream::TryStreamExt::try_poll_next_unpin (86 samples, 0.43%)</title><rect x="66.1216%" y="884" width="0.4300%" height="15" fill="rgb(245,171,17)" fg:x="13223" fg:w="86"/><text x="66.3716%" y="894.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (86 samples, 0.43%)</title><rect x="66.1216%" y="900" width="0.4300%" height="15" fill="rgb(227,52,21)" fg:x="13223" fg:w="86"/><text x="66.3716%" y="910.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (86 samples, 0.43%)</title><rect x="66.1216%" y="916" width="0.4300%" height="15" fill="rgb(238,69,14)" fg:x="13223" fg:w="86"/><text x="66.3716%" y="926.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (2 samples, 0.01%)</title><rect x="66.5417%" y="932" width="0.0100%" height="15" fill="rgb(241,156,39)" fg:x="13307" fg:w="2"/><text x="66.7917%" y="942.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (2 samples, 0.01%)</title><rect x="66.5417%" y="948" width="0.0100%" height="15" fill="rgb(212,227,28)" fg:x="13307" fg:w="2"/><text x="66.7917%" y="958.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.01%)</title><rect x="66.5517%" y="868" width="0.0100%" height="15" fill="rgb(209,118,27)" fg:x="13309" fg:w="2"/><text x="66.8017%" y="878.50"></text></g><g><title>core::mem::drop (2 samples, 0.01%)</title><rect x="66.5517%" y="884" width="0.0100%" height="15" fill="rgb(226,102,5)" fg:x="13309" fg:w="2"/><text x="66.8017%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;hyper::common::watch::Shared&gt;&gt; (2 samples, 0.01%)</title><rect x="66.5517%" y="900" width="0.0100%" height="15" fill="rgb(223,34,3)" fg:x="13309" fg:w="2"/><text x="66.8017%" y="910.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="66.5517%" y="916" width="0.0100%" height="15" fill="rgb(221,81,38)" fg:x="13309" fg:w="2"/><text x="66.8017%" y="926.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="66.5617%" y="900" width="0.0100%" height="15" fill="rgb(236,219,28)" fg:x="13311" fg:w="2"/><text x="66.8117%" y="910.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.01%)</title><rect x="66.5617%" y="916" width="0.0100%" height="15" fill="rgb(213,200,14)" fg:x="13311" fg:w="2"/><text x="66.8117%" y="926.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.01%)</title><rect x="66.5617%" y="932" width="0.0100%" height="15" fill="rgb(240,33,19)" fg:x="13311" fg:w="2"/><text x="66.8117%" y="942.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="66.5617%" y="948" width="0.0100%" height="15" fill="rgb(233,113,27)" fg:x="13311" fg:w="2"/><text x="66.8117%" y="958.50"></text></g><g><title>__GI___lll_lock_wake_private (2 samples, 0.01%)</title><rect x="66.5917%" y="916" width="0.0100%" height="15" fill="rgb(220,221,18)" fg:x="13317" fg:w="2"/><text x="66.8417%" y="926.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.5917%" y="932" width="0.0100%" height="15" fill="rgb(238,92,8)" fg:x="13317" fg:w="2"/><text x="66.8417%" y="942.50"></text></g><g><title>__GI___libc_free (15 samples, 0.08%)</title><rect x="66.5717%" y="900" width="0.0750%" height="15" fill="rgb(222,164,16)" fg:x="13313" fg:w="15"/><text x="66.8217%" y="910.50"></text></g><g><title>_int_free (9 samples, 0.05%)</title><rect x="66.6017%" y="916" width="0.0450%" height="15" fill="rgb(241,119,3)" fg:x="13319" fg:w="9"/><text x="66.8517%" y="926.50"></text></g><g><title>__GI___lll_lock_wait_private (2 samples, 0.01%)</title><rect x="66.6367%" y="932" width="0.0100%" height="15" fill="rgb(241,44,8)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="942.50"></text></g><g><title>futex_wait (2 samples, 0.01%)</title><rect x="66.6367%" y="948" width="0.0100%" height="15" fill="rgb(230,36,40)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="958.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.6367%" y="964" width="0.0100%" height="15" fill="rgb(243,16,36)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="974.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.6367%" y="980" width="0.0100%" height="15" fill="rgb(231,4,26)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="990.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.6367%" y="996" width="0.0100%" height="15" fill="rgb(240,9,31)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="1006.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.6367%" y="1012" width="0.0100%" height="15" fill="rgb(207,173,15)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="1022.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.6367%" y="1028" width="0.0100%" height="15" fill="rgb(224,192,53)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="1038.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.6367%" y="1044" width="0.0100%" height="15" fill="rgb(223,67,28)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="1054.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="66.6367%" y="1060" width="0.0100%" height="15" fill="rgb(211,20,47)" fg:x="13326" fg:w="2"/><text x="66.8867%" y="1070.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (21 samples, 0.11%)</title><rect x="66.5617%" y="868" width="0.1050%" height="15" fill="rgb(240,228,2)" fg:x="13311" fg:w="21"/><text x="66.8117%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (21 samples, 0.11%)</title><rect x="66.5617%" y="884" width="0.1050%" height="15" fill="rgb(248,151,12)" fg:x="13311" fg:w="21"/><text x="66.8117%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="66.6467%" y="900" width="0.0200%" height="15" fill="rgb(244,8,39)" fg:x="13328" fg:w="4"/><text x="66.8967%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="66.6567%" y="916" width="0.0100%" height="15" fill="rgb(222,26,8)" fg:x="13330" fg:w="2"/><text x="66.9067%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (2 samples, 0.01%)</title><rect x="66.6567%" y="932" width="0.0100%" height="15" fill="rgb(213,106,44)" fg:x="13330" fg:w="2"/><text x="66.9067%" y="942.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;&gt;::new&lt;sqlx_postgres::connection::executor::&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many&lt;sqlx_core::query::Query&lt;sqlx_postgres::database::Postgres,sqlx_postgres::arguments::PgArguments&gt;&gt;::{{closure}},sqlx_postgres::connection::executor::&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many&lt;sqlx_core::query::Query&lt;sqlx_postgres::database::Postgres,sqlx_postgres::arguments::PgArguments&gt;&gt;::{{closure}}::{{closure}}&gt;::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="66.6567%" y="948" width="0.0100%" height="15" fill="rgb(214,129,20)" fg:x="13330" fg:w="2"/><text x="66.9067%" y="958.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,sqlx_postgres::row::PgRow&gt;&gt;::new&lt;sqlx_postgres::connection::executor::&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many&lt;sqlx_core::query::Query&lt;sqlx_postgres::database::Postgres,sqlx_postgres::arguments::PgArguments&gt;&gt;::{{closure}},sqlx_postgres::connection::executor::&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many&lt;sqlx_core::query::Query&lt;sqlx_postgres::database::Postgres,sqlx_postgres::arguments::PgArguments&gt;&gt;::{{closure}}::{{closure}}&gt;::{{closure}}&gt;&gt; (2 samples, 0.01%)</title><rect x="66.6567%" y="964" width="0.0100%" height="15" fill="rgb(212,32,13)" fg:x="13330" fg:w="2"/><text x="66.9067%" y="974.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="66.6667%" y="884" width="0.0100%" height="15" fill="rgb(208,168,33)" fg:x="13332" fg:w="2"/><text x="66.9167%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedSenderInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="66.6667%" y="900" width="0.0100%" height="15" fill="rgb(231,207,8)" fg:x="13332" fg:w="2"/><text x="66.9167%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="66.6667%" y="916" width="0.0100%" height="15" fill="rgb(235,219,23)" fg:x="13332" fg:w="2"/><text x="66.9167%" y="926.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="66.6667%" y="932" width="0.0100%" height="15" fill="rgb(226,216,26)" fg:x="13332" fg:w="2"/><text x="66.9167%" y="942.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Sender&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="66.6667%" y="868" width="0.0150%" height="15" fill="rgb(239,137,16)" fg:x="13332" fg:w="3"/><text x="66.9167%" y="878.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (72 samples, 0.36%)</title><rect x="67.0567%" y="884" width="0.3600%" height="15" fill="rgb(207,12,36)" fg:x="13410" fg:w="72"/><text x="67.3067%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;sqlx_postgres::statement::PgStatementMetadata&gt;&gt; (31 samples, 0.16%)</title><rect x="67.4517%" y="900" width="0.1550%" height="15" fill="rgb(210,214,24)" fg:x="13489" fg:w="31"/><text x="67.7017%" y="910.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 0.16%)</title><rect x="67.4517%" y="916" width="0.1550%" height="15" fill="rgb(206,56,30)" fg:x="13489" fg:w="31"/><text x="67.7017%" y="926.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (5 samples, 0.03%)</title><rect x="67.5818%" y="932" width="0.0250%" height="15" fill="rgb(228,143,26)" fg:x="13515" fg:w="5"/><text x="67.8318%" y="942.50"></text></g><g><title>core::sync::atomic::atomic_sub (5 samples, 0.03%)</title><rect x="67.5818%" y="948" width="0.0250%" height="15" fill="rgb(216,218,46)" fg:x="13515" fg:w="5"/><text x="67.8318%" y="958.50"></text></g><g><title>_int_free (37 samples, 0.19%)</title><rect x="67.7418%" y="1012" width="0.1850%" height="15" fill="rgb(206,6,19)" fg:x="13547" fg:w="37"/><text x="67.9918%" y="1022.50"></text></g><g><title>tcache_put (3 samples, 0.02%)</title><rect x="67.9118%" y="1028" width="0.0150%" height="15" fill="rgb(239,177,51)" fg:x="13581" fg:w="3"/><text x="68.1618%" y="1038.50"></text></g><g><title>__GI___libc_free (67 samples, 0.34%)</title><rect x="67.6118%" y="996" width="0.3350%" height="15" fill="rgb(216,55,25)" fg:x="13521" fg:w="67"/><text x="67.8618%" y="1006.50"></text></g><g><title>arena_for_chunk (4 samples, 0.02%)</title><rect x="67.9268%" y="1012" width="0.0200%" height="15" fill="rgb(231,163,29)" fg:x="13584" fg:w="4"/><text x="68.1768%" y="1022.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.02%)</title><rect x="67.9468%" y="996" width="0.0150%" height="15" fill="rgb(232,149,50)" fg:x="13588" fg:w="3"/><text x="68.1968%" y="1006.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.02%)</title><rect x="67.9468%" y="1012" width="0.0150%" height="15" fill="rgb(223,142,48)" fg:x="13588" fg:w="3"/><text x="68.1968%" y="1022.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;core::ops::range::Range&lt;u32&gt;&gt;&gt;&gt; (80 samples, 0.40%)</title><rect x="67.6068%" y="916" width="0.4000%" height="15" fill="rgb(245,83,23)" fg:x="13520" fg:w="80"/><text x="67.8568%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;core::option::Option&lt;core::ops::range::Range&lt;u32&gt;&gt;&gt;&gt; (80 samples, 0.40%)</title><rect x="67.6068%" y="932" width="0.4000%" height="15" fill="rgb(224,63,2)" fg:x="13520" fg:w="80"/><text x="67.8568%" y="942.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (80 samples, 0.40%)</title><rect x="67.6068%" y="948" width="0.4000%" height="15" fill="rgb(218,65,53)" fg:x="13520" fg:w="80"/><text x="67.8568%" y="958.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (80 samples, 0.40%)</title><rect x="67.6068%" y="964" width="0.4000%" height="15" fill="rgb(221,84,29)" fg:x="13520" fg:w="80"/><text x="67.8568%" y="974.50"></text></g><g><title>alloc::alloc::dealloc (80 samples, 0.40%)</title><rect x="67.6068%" y="980" width="0.4000%" height="15" fill="rgb(234,0,32)" fg:x="13520" fg:w="80"/><text x="67.8568%" y="990.50"></text></g><g><title>__rust_dealloc (9 samples, 0.05%)</title><rect x="67.9618%" y="996" width="0.0450%" height="15" fill="rgb(206,20,16)" fg:x="13591" fg:w="9"/><text x="68.2118%" y="1006.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_postgres::row::PgRow&gt; (154 samples, 0.77%)</title><rect x="67.4167%" y="884" width="0.7701%" height="15" fill="rgb(244,172,18)" fg:x="13482" fg:w="154"/><text x="67.6667%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_postgres::message::data_row::DataRow&gt; (116 samples, 0.58%)</title><rect x="67.6068%" y="900" width="0.5801%" height="15" fill="rgb(254,133,1)" fg:x="13520" fg:w="116"/><text x="67.8568%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (36 samples, 0.18%)</title><rect x="68.0068%" y="916" width="0.1800%" height="15" fill="rgb(222,206,41)" fg:x="13600" fg:w="36"/><text x="68.2568%" y="926.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (36 samples, 0.18%)</title><rect x="68.0068%" y="932" width="0.1800%" height="15" fill="rgb(212,3,42)" fg:x="13600" fg:w="36"/><text x="68.2568%" y="942.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop (34 samples, 0.17%)</title><rect x="68.0168%" y="948" width="0.1700%" height="15" fill="rgb(241,11,4)" fg:x="13602" fg:w="34"/><text x="68.2668%" y="958.50"></text></g><g><title>&lt;core::sync::atomic::AtomicPtr&lt;T&gt; as bytes::loom::sync::atomic::AtomicMut&lt;T&gt;&gt;::with_mut (28 samples, 0.14%)</title><rect x="68.0468%" y="964" width="0.1400%" height="15" fill="rgb(205,19,26)" fg:x="13608" fg:w="28"/><text x="68.2968%" y="974.50"></text></g><g><title>bytes::bytes_mut::shared_v_drop::_{{closure}} (21 samples, 0.11%)</title><rect x="68.0818%" y="980" width="0.1050%" height="15" fill="rgb(210,179,32)" fg:x="13615" fg:w="21"/><text x="68.3318%" y="990.50"></text></g><g><title>bytes::bytes_mut::release_shared (21 samples, 0.11%)</title><rect x="68.0818%" y="996" width="0.1050%" height="15" fill="rgb(227,116,49)" fg:x="13615" fg:w="21"/><text x="68.3318%" y="1006.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (244 samples, 1.22%)</title><rect x="68.3818%" y="900" width="1.2201%" height="15" fill="rgb(211,146,6)" fg:x="13675" fg:w="244"/><text x="68.6318%" y="910.50"></text></g><g><title>&lt;&amp;I as sqlx_core::column::ColumnIndex&lt;T&gt;&gt;::index (29 samples, 0.15%)</title><rect x="69.7470%" y="916" width="0.1450%" height="15" fill="rgb(219,44,39)" fg:x="13948" fg:w="29"/><text x="69.9970%" y="926.50"></text></g><g><title>sqlx_postgres::&lt;impl sqlx_core::column::ColumnIndex&lt;sqlx_postgres::row::PgRow&gt; for usize&gt;::index (29 samples, 0.15%)</title><rect x="69.7470%" y="932" width="0.1450%" height="15" fill="rgb(234,128,11)" fg:x="13948" fg:w="29"/><text x="69.9970%" y="942.50"></text></g><g><title>sqlx_core::row::Row::len (8 samples, 0.04%)</title><rect x="69.8520%" y="948" width="0.0400%" height="15" fill="rgb(220,183,53)" fg:x="13969" fg:w="8"/><text x="70.1020%" y="958.50"></text></g><g><title>&lt;sqlx_postgres::row::PgRow as sqlx_core::row::Row&gt;::columns (8 samples, 0.04%)</title><rect x="69.8520%" y="964" width="0.0400%" height="15" fill="rgb(213,219,32)" fg:x="13969" fg:w="8"/><text x="70.1020%" y="974.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.04%)</title><rect x="69.8520%" y="980" width="0.0400%" height="15" fill="rgb(232,156,16)" fg:x="13969" fg:w="8"/><text x="70.1020%" y="990.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (8 samples, 0.04%)</title><rect x="69.8520%" y="996" width="0.0400%" height="15" fill="rgb(246,135,34)" fg:x="13969" fg:w="8"/><text x="70.1020%" y="1006.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (8 samples, 0.04%)</title><rect x="69.8520%" y="1012" width="0.0400%" height="15" fill="rgb(241,99,0)" fg:x="13969" fg:w="8"/><text x="70.1020%" y="1022.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.10%)</title><rect x="69.8970%" y="916" width="0.0950%" height="15" fill="rgb(222,103,45)" fg:x="13978" fg:w="19"/><text x="70.1470%" y="926.50"></text></g><g><title>&lt;sqlx_postgres::row::PgRow as sqlx_core::row::Row&gt;::try_get_raw (4 samples, 0.02%)</title><rect x="69.9920%" y="916" width="0.0200%" height="15" fill="rgb(212,57,4)" fg:x="13997" fg:w="4"/><text x="70.2420%" y="926.50"></text></g><g><title>&lt;sqlx_postgres::type_info::PgTypeInfo as core::clone::Clone&gt;::clone (14 samples, 0.07%)</title><rect x="70.0120%" y="916" width="0.0700%" height="15" fill="rgb(215,68,47)" fg:x="14001" fg:w="14"/><text x="70.2620%" y="926.50"></text></g><g><title>&lt;sqlx_postgres::type_info::PgType as core::clone::Clone&gt;::clone (14 samples, 0.07%)</title><rect x="70.0120%" y="932" width="0.0700%" height="15" fill="rgb(230,84,2)" fg:x="14001" fg:w="14"/><text x="70.2620%" y="942.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.02%)</title><rect x="70.1020%" y="932" width="0.0200%" height="15" fill="rgb(220,102,14)" fg:x="14019" fg:w="4"/><text x="70.3520%" y="942.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.02%)</title><rect x="70.1020%" y="948" width="0.0200%" height="15" fill="rgb(240,10,32)" fg:x="14019" fg:w="4"/><text x="70.3520%" y="958.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.02%)</title><rect x="70.1020%" y="964" width="0.0200%" height="15" fill="rgb(215,47,27)" fg:x="14019" fg:w="4"/><text x="70.3520%" y="974.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="70.1220%" y="932" width="0.0100%" height="15" fill="rgb(233,188,43)" fg:x="14023" fg:w="2"/><text x="70.3720%" y="942.50"></text></g><g><title>&lt;sqlx_postgres::row::PgRow as sqlx_core::row::Row&gt;::try_get_raw (144 samples, 0.72%)</title><rect x="69.6020%" y="900" width="0.7201%" height="15" fill="rgb(253,190,1)" fg:x="13919" fg:w="144"/><text x="69.8520%" y="910.50"></text></g><g><title>sqlx_postgres::message::data_row::DataRow::get (48 samples, 0.24%)</title><rect x="70.0820%" y="916" width="0.2400%" height="15" fill="rgb(206,114,52)" fg:x="14015" fg:w="48"/><text x="70.3320%" y="926.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (38 samples, 0.19%)</title><rect x="70.1320%" y="932" width="0.1900%" height="15" fill="rgb(233,120,37)" fg:x="14025" fg:w="38"/><text x="70.3820%" y="942.50"></text></g><g><title>sqlx_postgres::message::data_row::DataRow::get::_{{closure}} (9 samples, 0.05%)</title><rect x="70.2770%" y="948" width="0.0450%" height="15" fill="rgb(214,52,39)" fg:x="14054" fg:w="9"/><text x="70.5270%" y="958.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.05%)</title><rect x="70.2770%" y="964" width="0.0450%" height="15" fill="rgb(223,80,29)" fg:x="14054" fg:w="9"/><text x="70.5270%" y="974.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.05%)</title><rect x="70.2770%" y="980" width="0.0450%" height="15" fill="rgb(230,101,40)" fg:x="14054" fg:w="9"/><text x="70.5270%" y="990.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (3 samples, 0.02%)</title><rect x="70.3070%" y="996" width="0.0150%" height="15" fill="rgb(219,211,8)" fg:x="14060" fg:w="3"/><text x="70.5570%" y="1006.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (154 samples, 0.77%)</title><rect x="70.3220%" y="900" width="0.7701%" height="15" fill="rgb(252,126,28)" fg:x="14063" fg:w="154"/><text x="70.5720%" y="910.50"></text></g><g><title>__GI___lll_lock_wait_private (8 samples, 0.04%)</title><rect x="73.0023%" y="1124" width="0.0400%" height="15" fill="rgb(215,56,38)" fg:x="14599" fg:w="8"/><text x="73.2523%" y="1134.50"></text></g><g><title>futex_wait (7 samples, 0.04%)</title><rect x="73.0073%" y="1140" width="0.0350%" height="15" fill="rgb(249,55,44)" fg:x="14600" fg:w="7"/><text x="73.2573%" y="1150.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="73.0073%" y="1156" width="0.0350%" height="15" fill="rgb(220,221,32)" fg:x="14600" fg:w="7"/><text x="73.2573%" y="1166.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="73.0123%" y="1172" width="0.0300%" height="15" fill="rgb(212,216,41)" fg:x="14601" fg:w="6"/><text x="73.2623%" y="1182.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="73.0123%" y="1188" width="0.0300%" height="15" fill="rgb(228,213,43)" fg:x="14601" fg:w="6"/><text x="73.2623%" y="1198.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="73.0123%" y="1204" width="0.0300%" height="15" fill="rgb(211,31,26)" fg:x="14601" fg:w="6"/><text x="73.2623%" y="1214.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="73.0173%" y="1220" width="0.0250%" height="15" fill="rgb(229,202,19)" fg:x="14602" fg:w="5"/><text x="73.2673%" y="1230.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="73.0223%" y="1236" width="0.0200%" height="15" fill="rgb(229,105,46)" fg:x="14603" fg:w="4"/><text x="73.2723%" y="1246.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="73.0223%" y="1252" width="0.0200%" height="15" fill="rgb(235,108,1)" fg:x="14603" fg:w="4"/><text x="73.2723%" y="1262.50"></text></g><g><title>__GI___lll_lock_wake_private (4 samples, 0.02%)</title><rect x="73.0423%" y="1124" width="0.0200%" height="15" fill="rgb(245,111,35)" fg:x="14607" fg:w="4"/><text x="73.2923%" y="1134.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="73.0423%" y="1140" width="0.0200%" height="15" fill="rgb(219,185,31)" fg:x="14607" fg:w="4"/><text x="73.2923%" y="1150.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="73.0423%" y="1156" width="0.0200%" height="15" fill="rgb(214,4,43)" fg:x="14607" fg:w="4"/><text x="73.2923%" y="1166.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="73.0423%" y="1172" width="0.0200%" height="15" fill="rgb(235,227,40)" fg:x="14607" fg:w="4"/><text x="73.2923%" y="1182.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="73.0473%" y="1188" width="0.0150%" height="15" fill="rgb(230,88,30)" fg:x="14608" fg:w="3"/><text x="73.2973%" y="1198.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="73.0473%" y="1204" width="0.0150%" height="15" fill="rgb(216,217,1)" fg:x="14608" fg:w="3"/><text x="73.2973%" y="1214.50"></text></g><g><title>alloc_perturb (5 samples, 0.03%)</title><rect x="75.1925%" y="1140" width="0.0250%" height="15" fill="rgb(248,139,50)" fg:x="15037" fg:w="5"/><text x="75.4425%" y="1150.50"></text></g><g><title>checked_request2size (2 samples, 0.01%)</title><rect x="75.2175%" y="1140" width="0.0100%" height="15" fill="rgb(233,1,21)" fg:x="15042" fg:w="2"/><text x="75.4675%" y="1150.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="75.2275%" y="1140" width="0.0150%" height="15" fill="rgb(215,183,12)" fg:x="15044" fg:w="3"/><text x="75.4775%" y="1150.50"></text></g><g><title>tcache_put (6 samples, 0.03%)</title><rect x="75.2425%" y="1140" width="0.0300%" height="15" fill="rgb(229,104,42)" fg:x="15047" fg:w="6"/><text x="75.4925%" y="1150.50"></text></g><g><title>_int_malloc (447 samples, 2.24%)</title><rect x="73.0623%" y="1124" width="2.2352%" height="15" fill="rgb(243,34,48)" fg:x="14611" fg:w="447"/><text x="73.3123%" y="1134.50">_..</text></g><g><title>unlink_chunk (5 samples, 0.03%)</title><rect x="75.2725%" y="1140" width="0.0250%" height="15" fill="rgb(239,11,44)" fg:x="15053" fg:w="5"/><text x="75.5225%" y="1150.50"></text></g><g><title>arena_for_chunk (6 samples, 0.03%)</title><rect x="75.2975%" y="1124" width="0.0300%" height="15" fill="rgb(231,98,35)" fg:x="15058" fg:w="6"/><text x="75.5475%" y="1134.50"></text></g><g><title>arena_for_chunk (6 samples, 0.03%)</title><rect x="75.2975%" y="1140" width="0.0300%" height="15" fill="rgb(233,28,25)" fg:x="15058" fg:w="6"/><text x="75.5475%" y="1150.50"></text></g><g><title>heap_for_ptr (6 samples, 0.03%)</title><rect x="75.2975%" y="1156" width="0.0300%" height="15" fill="rgb(234,123,11)" fg:x="15058" fg:w="6"/><text x="75.5475%" y="1166.50"></text></g><g><title>__GI___libc_malloc (787 samples, 3.94%)</title><rect x="71.6022%" y="1108" width="3.9354%" height="15" fill="rgb(220,69,3)" fg:x="14319" fg:w="787"/><text x="71.8522%" y="1118.50">__GI..</text></g><g><title>tcache_get (42 samples, 0.21%)</title><rect x="75.3275%" y="1124" width="0.2100%" height="15" fill="rgb(214,64,36)" fg:x="15064" fg:w="42"/><text x="75.5775%" y="1134.50"></text></g><g><title>__rdl_alloc (50 samples, 0.25%)</title><rect x="75.5376%" y="1108" width="0.2500%" height="15" fill="rgb(211,138,32)" fg:x="15106" fg:w="50"/><text x="75.7876%" y="1118.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (39 samples, 0.20%)</title><rect x="75.5926%" y="1124" width="0.1950%" height="15" fill="rgb(213,118,47)" fg:x="15117" fg:w="39"/><text x="75.8426%" y="1134.50"></text></g><g><title>__rust_alloc (19 samples, 0.10%)</title><rect x="75.7876%" y="1108" width="0.0950%" height="15" fill="rgb(243,124,49)" fg:x="15156" fg:w="19"/><text x="76.0376%" y="1118.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (887 samples, 4.44%)</title><rect x="71.4521%" y="1012" width="4.4354%" height="15" fill="rgb(221,30,28)" fg:x="14289" fg:w="887"/><text x="71.7021%" y="1022.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (887 samples, 4.44%)</title><rect x="71.4521%" y="1028" width="4.4354%" height="15" fill="rgb(246,37,13)" fg:x="14289" fg:w="887"/><text x="71.7021%" y="1038.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (887 samples, 4.44%)</title><rect x="71.4521%" y="1044" width="4.4354%" height="15" fill="rgb(249,66,14)" fg:x="14289" fg:w="887"/><text x="71.7021%" y="1054.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (876 samples, 4.38%)</title><rect x="71.5072%" y="1060" width="4.3804%" height="15" fill="rgb(213,166,5)" fg:x="14300" fg:w="876"/><text x="71.7572%" y="1070.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (876 samples, 4.38%)</title><rect x="71.5072%" y="1076" width="4.3804%" height="15" fill="rgb(221,66,24)" fg:x="14300" fg:w="876"/><text x="71.7572%" y="1086.50">alloc..</text></g><g><title>alloc::alloc::alloc (876 samples, 4.38%)</title><rect x="71.5072%" y="1092" width="4.3804%" height="15" fill="rgb(210,132,17)" fg:x="14300" fg:w="876"/><text x="71.7572%" y="1102.50">alloc..</text></g><g><title>__memcpy_avx_unaligned_erms (45 samples, 0.23%)</title><rect x="75.8976%" y="1044" width="0.2250%" height="15" fill="rgb(243,202,5)" fg:x="15178" fg:w="45"/><text x="76.1476%" y="1054.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1,035 samples, 5.18%)</title><rect x="71.4521%" y="916" width="5.1755%" height="15" fill="rgb(233,70,48)" fg:x="14289" fg:w="1035"/><text x="71.7021%" y="926.50">alloc:..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1,035 samples, 5.18%)</title><rect x="71.4521%" y="932" width="5.1755%" height="15" fill="rgb(238,41,26)" fg:x="14289" fg:w="1035"/><text x="71.7021%" y="942.50">alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,035 samples, 5.18%)</title><rect x="71.4521%" y="948" width="5.1755%" height="15" fill="rgb(241,19,31)" fg:x="14289" fg:w="1035"/><text x="71.7021%" y="958.50">alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,035 samples, 5.18%)</title><rect x="71.4521%" y="964" width="5.1755%" height="15" fill="rgb(214,76,10)" fg:x="14289" fg:w="1035"/><text x="71.7021%" y="974.50">alloc:..</text></g><g><title>alloc::slice::hack::to_vec (1,035 samples, 5.18%)</title><rect x="71.4521%" y="980" width="5.1755%" height="15" fill="rgb(254,202,22)" fg:x="14289" fg:w="1035"/><text x="71.7021%" y="990.50">alloc:..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,035 samples, 5.18%)</title><rect x="71.4521%" y="996" width="5.1755%" height="15" fill="rgb(214,72,24)" fg:x="14289" fg:w="1035"/><text x="71.7021%" y="1006.50">&lt;T as ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (148 samples, 0.74%)</title><rect x="75.8876%" y="1012" width="0.7401%" height="15" fill="rgb(221,92,46)" fg:x="15176" fg:w="148"/><text x="76.1376%" y="1022.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (148 samples, 0.74%)</title><rect x="75.8876%" y="1028" width="0.7401%" height="15" fill="rgb(246,13,50)" fg:x="15176" fg:w="148"/><text x="76.1376%" y="1038.50"></text></g><g><title>__memmove_avx_unaligned (101 samples, 0.51%)</title><rect x="76.1226%" y="1044" width="0.5051%" height="15" fill="rgb(240,165,38)" fg:x="15223" fg:w="101"/><text x="76.3726%" y="1054.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (32 samples, 0.16%)</title><rect x="76.6377%" y="932" width="0.1600%" height="15" fill="rgb(241,24,51)" fg:x="15326" fg:w="32"/><text x="76.8877%" y="942.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (9 samples, 0.05%)</title><rect x="78.3178%" y="964" width="0.0450%" height="15" fill="rgb(227,51,44)" fg:x="15662" fg:w="9"/><text x="78.5678%" y="974.50"></text></g><g><title>core::str::converts::from_utf8 (315 samples, 1.58%)</title><rect x="76.7977%" y="932" width="1.5752%" height="15" fill="rgb(231,121,3)" fg:x="15358" fg:w="315"/><text x="77.0477%" y="942.50"></text></g><g><title>core::str::validations::run_utf8_validation (256 samples, 1.28%)</title><rect x="77.0927%" y="948" width="1.2801%" height="15" fill="rgb(245,3,41)" fg:x="15417" fg:w="256"/><text x="77.3427%" y="958.50"></text></g><g><title>core::str::validations::contains_nonascii (2 samples, 0.01%)</title><rect x="78.3628%" y="964" width="0.0100%" height="15" fill="rgb(214,13,26)" fg:x="15671" fg:w="2"/><text x="78.6128%" y="974.50"></text></g><g><title>rust_axum::read_users::_{{closure}}::_{{closure}} (2,483 samples, 12.42%)</title><rect x="66.6817%" y="868" width="12.4162%" height="15" fill="rgb(252,75,11)" fg:x="13335" fg:w="2483"/><text x="66.9317%" y="878.50">rust_axum::read_use..</text></g><g><title>sqlx_core::row::Row::try_get_unchecked (2,182 samples, 10.91%)</title><rect x="68.1868%" y="884" width="10.9111%" height="15" fill="rgb(218,226,17)" fg:x="13636" fg:w="2182"/><text x="68.4368%" y="894.50">sqlx_core::row::..</text></g><g><title>sqlx_postgres::types::str::&lt;impl sqlx_core::decode::Decode&lt;sqlx_postgres::database::Postgres&gt; for alloc::string::String&gt;::decode (1,601 samples, 8.01%)</title><rect x="71.0921%" y="900" width="8.0058%" height="15" fill="rgb(248,89,38)" fg:x="14217" fg:w="1601"/><text x="71.3421%" y="910.50">sqlx_postgr..</text></g><g><title>sqlx_postgres::value::PgValueRef::as_str (494 samples, 2.47%)</title><rect x="76.6277%" y="916" width="2.4702%" height="15" fill="rgb(237,73,46)" fg:x="15324" fg:w="494"/><text x="76.8777%" y="926.50">sq..</text></g><g><title>sqlx_postgres::value::PgValueRef::as_bytes (145 samples, 0.73%)</title><rect x="78.3728%" y="932" width="0.7251%" height="15" fill="rgb(242,78,33)" fg:x="15673" fg:w="145"/><text x="78.6228%" y="942.50"></text></g><g><title>&lt;futures_util::future::future::fuse::Fuse&lt;Fut&gt; as core::future::future::Future&gt;::poll (4,193 samples, 20.97%)</title><rect x="58.1508%" y="820" width="20.9671%" height="15" fill="rgb(235,60,3)" fg:x="11629" fg:w="4193"/><text x="58.4008%" y="830.50">&lt;futures_util::future::future::fu..</text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new::_{{closure}} (4,133 samples, 20.67%)</title><rect x="58.4508%" y="836" width="20.6671%" height="15" fill="rgb(216,172,19)" fg:x="11689" fg:w="4133"/><text x="58.7008%" y="846.50">sqlx_core::ext::async_stream::Try..</text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_many::_{{closure}}::_{{closure}} (4,068 samples, 20.34%)</title><rect x="58.7759%" y="852" width="20.3420%" height="15" fill="rgb(227,6,42)" fg:x="11754" fg:w="4068"/><text x="59.0259%" y="862.50">sqlx_core::query::Map&lt;DB,F,A&gt;::f..</text></g><g><title>sqlx_postgres::connection::executor::&lt;impl sqlx_core::executor::Executor for &amp;mut sqlx_postgres::connection::PgConnection&gt;::fetch_many (4 samples, 0.02%)</title><rect x="79.0979%" y="868" width="0.0200%" height="15" fill="rgb(223,207,42)" fg:x="15818" fg:w="4"/><text x="79.3479%" y="878.50"></text></g><g><title>&lt;&amp;mut F as core::future::future::Future&gt;::poll (4,200 samples, 21.00%)</title><rect x="58.1508%" y="788" width="21.0021%" height="15" fill="rgb(246,138,30)" fg:x="11629" fg:w="4200"/><text x="58.4008%" y="798.50">&lt;&amp;mut F as core::future::future::..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (4,200 samples, 21.00%)</title><rect x="58.1508%" y="804" width="21.0021%" height="15" fill="rgb(251,199,47)" fg:x="11629" fg:w="4200"/><text x="58.4008%" y="814.50">&lt;core::pin::Pin&lt;P&gt; as core::futur..</text></g><g><title>core::pin::Pin&lt;&amp;mut core::pin::Pin&lt;P&gt;&gt;::as_deref_mut (7 samples, 0.04%)</title><rect x="79.1179%" y="820" width="0.0350%" height="15" fill="rgb(228,218,44)" fg:x="15822" fg:w="7"/><text x="79.3679%" y="830.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (7 samples, 0.04%)</title><rect x="79.1179%" y="836" width="0.0350%" height="15" fill="rgb(220,68,6)" fg:x="15822" fg:w="7"/><text x="79.3679%" y="846.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (7 samples, 0.04%)</title><rect x="79.1179%" y="852" width="0.0350%" height="15" fill="rgb(240,60,26)" fg:x="15822" fg:w="7"/><text x="79.3679%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="79.6480%" y="820" width="0.0100%" height="15" fill="rgb(211,200,19)" fg:x="15928" fg:w="2"/><text x="79.8980%" y="830.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.07%)</title><rect x="79.9530%" y="836" width="0.0700%" height="15" fill="rgb(242,145,30)" fg:x="15989" fg:w="14"/><text x="80.2030%" y="846.50"></text></g><g><title>_int_free (2 samples, 0.01%)</title><rect x="80.0330%" y="900" width="0.0100%" height="15" fill="rgb(225,64,13)" fg:x="16005" fg:w="2"/><text x="80.2830%" y="910.50"></text></g><g><title>__GI___libc_free (5 samples, 0.03%)</title><rect x="80.0230%" y="884" width="0.0250%" height="15" fill="rgb(218,103,35)" fg:x="16003" fg:w="5"/><text x="80.2730%" y="894.50"></text></g><g><title>core::mem::drop (2 samples, 0.01%)</title><rect x="80.0480%" y="900" width="0.0100%" height="15" fill="rgb(216,93,46)" fg:x="16008" fg:w="2"/><text x="80.2980%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="80.0480%" y="916" width="0.0100%" height="15" fill="rgb(225,159,27)" fg:x="16008" fg:w="2"/><text x="80.2980%" y="926.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="80.0480%" y="932" width="0.0100%" height="15" fill="rgb(225,204,11)" fg:x="16008" fg:w="2"/><text x="80.2980%" y="942.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::queue::Queue&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="80.0630%" y="916" width="0.0200%" height="15" fill="rgb(205,56,4)" fg:x="16011" fg:w="4"/><text x="80.3130%" y="926.50"></text></g><g><title>&lt;futures_channel::mpsc::queue::Queue&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="80.0630%" y="932" width="0.0200%" height="15" fill="rgb(206,6,35)" fg:x="16011" fg:w="4"/><text x="80.3130%" y="942.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt;&gt; (13 samples, 0.07%)</title><rect x="80.0230%" y="836" width="0.0650%" height="15" fill="rgb(247,73,52)" fg:x="16003" fg:w="13"/><text x="80.2730%" y="846.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (13 samples, 0.07%)</title><rect x="80.0230%" y="852" width="0.0650%" height="15" fill="rgb(246,97,4)" fg:x="16003" fg:w="13"/><text x="80.2730%" y="862.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.07%)</title><rect x="80.0230%" y="868" width="0.0650%" height="15" fill="rgb(212,37,15)" fg:x="16003" fg:w="13"/><text x="80.2730%" y="878.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (8 samples, 0.04%)</title><rect x="80.0480%" y="884" width="0.0400%" height="15" fill="rgb(208,130,40)" fg:x="16008" fg:w="8"/><text x="80.2980%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::BoundedInner&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt; (6 samples, 0.03%)</title><rect x="80.0580%" y="900" width="0.0300%" height="15" fill="rgb(236,55,29)" fg:x="16010" fg:w="6"/><text x="80.3080%" y="910.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="80.0980%" y="852" width="0.0150%" height="15" fill="rgb(209,156,45)" fg:x="16018" fg:w="3"/><text x="80.3480%" y="862.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt; (41 samples, 0.21%)</title><rect x="80.1180%" y="852" width="0.2050%" height="15" fill="rgb(249,107,4)" fg:x="16022" fg:w="41"/><text x="80.3680%" y="862.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (41 samples, 0.21%)</title><rect x="80.1180%" y="868" width="0.2050%" height="15" fill="rgb(227,7,13)" fg:x="16022" fg:w="41"/><text x="80.3680%" y="878.50"></text></g><g><title>std::sync::poison::Flag::done (6 samples, 0.03%)</title><rect x="80.3230%" y="884" width="0.0300%" height="15" fill="rgb(250,129,14)" fg:x="16063" fg:w="6"/><text x="80.5730%" y="894.50"></text></g><g><title>std::thread::panicking (5 samples, 0.03%)</title><rect x="80.3280%" y="900" width="0.0250%" height="15" fill="rgb(229,92,13)" fg:x="16064" fg:w="5"/><text x="80.5780%" y="910.50"></text></g><g><title>std::panicking::panicking (5 samples, 0.03%)</title><rect x="80.3280%" y="916" width="0.0250%" height="15" fill="rgb(245,98,39)" fg:x="16064" fg:w="5"/><text x="80.5780%" y="926.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (5 samples, 0.03%)</title><rect x="80.3280%" y="932" width="0.0250%" height="15" fill="rgb(234,135,48)" fg:x="16064" fg:w="5"/><text x="80.5780%" y="942.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="80.3430%" y="948" width="0.0100%" height="15" fill="rgb(230,98,28)" fg:x="16067" fg:w="2"/><text x="80.5930%" y="958.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="80.3430%" y="964" width="0.0100%" height="15" fill="rgb(223,121,0)" fg:x="16067" fg:w="2"/><text x="80.5930%" y="974.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::mutex::MutexGuard&lt;futures_channel::mpsc::SenderTask&gt;&gt; (34 samples, 0.17%)</title><rect x="80.3230%" y="852" width="0.1700%" height="15" fill="rgb(234,173,33)" fg:x="16063" fg:w="34"/><text x="80.5730%" y="862.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (34 samples, 0.17%)</title><rect x="80.3230%" y="868" width="0.1700%" height="15" fill="rgb(245,47,8)" fg:x="16063" fg:w="34"/><text x="80.5730%" y="878.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (28 samples, 0.14%)</title><rect x="80.3530%" y="884" width="0.1400%" height="15" fill="rgb(205,17,20)" fg:x="16069" fg:w="28"/><text x="80.6030%" y="894.50"></text></g><g><title>futures_channel::mpsc::SenderTask::notify (9 samples, 0.05%)</title><rect x="80.4930%" y="852" width="0.0450%" height="15" fill="rgb(232,151,16)" fg:x="16097" fg:w="9"/><text x="80.7430%" y="862.50"></text></g><g><title>_int_free (26 samples, 0.13%)</title><rect x="80.8881%" y="980" width="0.1300%" height="15" fill="rgb(208,30,32)" fg:x="16176" fg:w="26"/><text x="81.1381%" y="990.50"></text></g><g><title>tcache_put (6 samples, 0.03%)</title><rect x="80.9881%" y="996" width="0.0300%" height="15" fill="rgb(254,26,3)" fg:x="16196" fg:w="6"/><text x="81.2381%" y="1006.50"></text></g><g><title>__GI___libc_free (78 samples, 0.39%)</title><rect x="80.6431%" y="964" width="0.3900%" height="15" fill="rgb(240,177,30)" fg:x="16127" fg:w="78"/><text x="80.8931%" y="974.50"></text></g><g><title>arena_for_chunk (3 samples, 0.02%)</title><rect x="81.0181%" y="980" width="0.0150%" height="15" fill="rgb(248,76,44)" fg:x="16202" fg:w="3"/><text x="81.2681%" y="990.50"></text></g><g><title>arena_for_chunk (2 samples, 0.01%)</title><rect x="81.0231%" y="996" width="0.0100%" height="15" fill="rgb(241,186,54)" fg:x="16203" fg:w="2"/><text x="81.2731%" y="1006.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.02%)</title><rect x="81.0331%" y="964" width="0.0200%" height="15" fill="rgb(249,171,29)" fg:x="16205" fg:w="4"/><text x="81.2831%" y="974.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.02%)</title><rect x="81.0331%" y="980" width="0.0200%" height="15" fill="rgb(237,151,44)" fg:x="16205" fg:w="4"/><text x="81.2831%" y="990.50"></text></g><g><title>core::mem::drop (104 samples, 0.52%)</title><rect x="80.6381%" y="884" width="0.5201%" height="15" fill="rgb(228,174,30)" fg:x="16126" fg:w="104"/><text x="80.8881%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;alloc::sync::Arc&lt;std::sync::mutex::Mutex&lt;futures_channel::mpsc::SenderTask&gt;&gt;&gt;&gt;&gt; (104 samples, 0.52%)</title><rect x="80.6381%" y="900" width="0.5201%" height="15" fill="rgb(252,14,37)" fg:x="16126" fg:w="104"/><text x="80.8881%" y="910.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 0.52%)</title><rect x="80.6381%" y="916" width="0.5201%" height="15" fill="rgb(207,111,40)" fg:x="16126" fg:w="104"/><text x="80.8881%" y="926.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (104 samples, 0.52%)</title><rect x="80.6381%" y="932" width="0.5201%" height="15" fill="rgb(248,171,54)" fg:x="16126" fg:w="104"/><text x="80.8881%" y="942.50"></text></g><g><title>alloc::alloc::dealloc (104 samples, 0.52%)</title><rect x="80.6381%" y="948" width="0.5201%" height="15" fill="rgb(211,127,2)" fg:x="16126" fg:w="104"/><text x="80.8881%" y="958.50"></text></g><g><title>__rust_dealloc (21 samples, 0.11%)</title><rect x="81.0531%" y="964" width="0.1050%" height="15" fill="rgb(236,87,47)" fg:x="16209" fg:w="21"/><text x="81.3031%" y="974.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (10 samples, 0.05%)</title><rect x="81.1581%" y="884" width="0.0500%" height="15" fill="rgb(223,190,45)" fg:x="16230" fg:w="10"/><text x="81.4081%" y="894.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (10 samples, 0.05%)</title><rect x="81.1581%" y="900" width="0.0500%" height="15" fill="rgb(215,5,16)" fg:x="16230" fg:w="10"/><text x="81.4081%" y="910.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (7 samples, 0.04%)</title><rect x="81.2081%" y="884" width="0.0350%" height="15" fill="rgb(252,82,33)" fg:x="16240" fg:w="7"/><text x="81.4581%" y="894.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (19 samples, 0.10%)</title><rect x="81.2431%" y="884" width="0.0950%" height="15" fill="rgb(247,213,44)" fg:x="16247" fg:w="19"/><text x="81.4931%" y="894.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (10 samples, 0.05%)</title><rect x="81.3381%" y="884" width="0.0500%" height="15" fill="rgb(205,196,44)" fg:x="16266" fg:w="10"/><text x="81.5881%" y="894.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (10 samples, 0.05%)</title><rect x="81.3381%" y="900" width="0.0500%" height="15" fill="rgb(237,96,54)" fg:x="16266" fg:w="10"/><text x="81.5881%" y="910.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (172 samples, 0.86%)</title><rect x="80.5381%" y="852" width="0.8601%" height="15" fill="rgb(230,113,34)" fg:x="16106" fg:w="172"/><text x="80.7881%" y="862.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (152 samples, 0.76%)</title><rect x="80.6381%" y="868" width="0.7601%" height="15" fill="rgb(221,224,12)" fg:x="16126" fg:w="152"/><text x="80.8881%" y="878.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (2 samples, 0.01%)</title><rect x="81.3881%" y="884" width="0.0100%" height="15" fill="rgb(219,112,44)" fg:x="16276" fg:w="2"/><text x="81.6381%" y="894.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="81.3881%" y="900" width="0.0100%" height="15" fill="rgb(210,31,13)" fg:x="16276" fg:w="2"/><text x="81.6381%" y="910.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="81.3981%" y="868" width="0.0350%" height="15" fill="rgb(230,25,16)" fg:x="16278" fg:w="7"/><text x="81.6481%" y="878.50"></text></g><g><title>std::sync::poison::Flag::guard (7 samples, 0.04%)</title><rect x="81.3981%" y="884" width="0.0350%" height="15" fill="rgb(246,108,53)" fg:x="16278" fg:w="7"/><text x="81.6481%" y="894.50"></text></g><g><title>std::thread::panicking (4 samples, 0.02%)</title><rect x="81.4131%" y="900" width="0.0200%" height="15" fill="rgb(241,172,50)" fg:x="16281" fg:w="4"/><text x="81.6631%" y="910.50"></text></g><g><title>std::panicking::panicking (4 samples, 0.02%)</title><rect x="81.4131%" y="916" width="0.0200%" height="15" fill="rgb(235,141,10)" fg:x="16281" fg:w="4"/><text x="81.6631%" y="926.50"></text></g><g><title>std::panicking::panic_count::count_is_zero (4 samples, 0.02%)</title><rect x="81.4131%" y="932" width="0.0200%" height="15" fill="rgb(220,174,43)" fg:x="16281" fg:w="4"/><text x="81.6631%" y="942.50"></text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (25 samples, 0.13%)</title><rect x="81.3981%" y="852" width="0.1250%" height="15" fill="rgb(215,181,40)" fg:x="16278" fg:w="25"/><text x="81.6481%" y="862.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (18 samples, 0.09%)</title><rect x="81.4331%" y="868" width="0.0900%" height="15" fill="rgb(230,97,2)" fg:x="16285" fg:w="18"/><text x="81.6831%" y="878.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::ref_dec (2 samples, 0.01%)</title><rect x="81.7232%" y="932" width="0.0100%" height="15" fill="rgb(211,25,27)" fg:x="16343" fg:w="2"/><text x="81.9732%" y="942.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::unpark_one (331 samples, 1.66%)</title><rect x="80.0880%" y="836" width="1.6552%" height="15" fill="rgb(230,87,26)" fg:x="16016" fg:w="331"/><text x="80.3380%" y="846.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (44 samples, 0.22%)</title><rect x="81.5232%" y="852" width="0.2200%" height="15" fill="rgb(227,160,17)" fg:x="16303" fg:w="44"/><text x="81.7732%" y="862.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (42 samples, 0.21%)</title><rect x="81.5332%" y="868" width="0.2100%" height="15" fill="rgb(244,85,34)" fg:x="16305" fg:w="42"/><text x="81.7832%" y="878.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (42 samples, 0.21%)</title><rect x="81.5332%" y="884" width="0.2100%" height="15" fill="rgb(207,70,0)" fg:x="16305" fg:w="42"/><text x="81.7832%" y="894.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (42 samples, 0.21%)</title><rect x="81.5332%" y="900" width="0.2100%" height="15" fill="rgb(223,129,7)" fg:x="16305" fg:w="42"/><text x="81.7832%" y="910.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val::_{{closure}} (5 samples, 0.03%)</title><rect x="81.7182%" y="916" width="0.0250%" height="15" fill="rgb(246,105,7)" fg:x="16342" fg:w="5"/><text x="81.9682%" y="926.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::set_notified (2 samples, 0.01%)</title><rect x="81.7332%" y="932" width="0.0100%" height="15" fill="rgb(215,154,42)" fg:x="16345" fg:w="2"/><text x="81.9832%" y="942.50"></text></g><g><title>_int_free (20 samples, 0.10%)</title><rect x="82.2982%" y="964" width="0.1000%" height="15" fill="rgb(220,215,30)" fg:x="16458" fg:w="20"/><text x="82.5482%" y="974.50"></text></g><g><title>__GI___libc_free (93 samples, 0.47%)</title><rect x="81.9432%" y="948" width="0.4650%" height="15" fill="rgb(228,81,51)" fg:x="16387" fg:w="93"/><text x="82.1932%" y="958.50"></text></g><g><title>arena_for_chunk (2 samples, 0.01%)</title><rect x="82.3982%" y="964" width="0.0100%" height="15" fill="rgb(247,71,54)" fg:x="16478" fg:w="2"/><text x="82.6482%" y="974.50"></text></g><g><title>arena_for_chunk (2 samples, 0.01%)</title><rect x="82.3982%" y="980" width="0.0100%" height="15" fill="rgb(234,176,34)" fg:x="16478" fg:w="2"/><text x="82.6482%" y="990.50"></text></g><g><title>core::mem::drop (99 samples, 0.50%)</title><rect x="81.9182%" y="868" width="0.4950%" height="15" fill="rgb(241,103,54)" fg:x="16382" fg:w="99"/><text x="82.1682%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;futures_channel::mpsc::queue::Node&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt;&gt; (99 samples, 0.50%)</title><rect x="81.9182%" y="884" width="0.4950%" height="15" fill="rgb(228,22,34)" fg:x="16382" fg:w="99"/><text x="82.1682%" y="894.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99 samples, 0.50%)</title><rect x="81.9182%" y="900" width="0.4950%" height="15" fill="rgb(241,179,48)" fg:x="16382" fg:w="99"/><text x="82.1682%" y="910.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (99 samples, 0.50%)</title><rect x="81.9182%" y="916" width="0.4950%" height="15" fill="rgb(235,167,37)" fg:x="16382" fg:w="99"/><text x="82.1682%" y="926.50"></text></g><g><title>alloc::alloc::dealloc (99 samples, 0.50%)</title><rect x="81.9182%" y="932" width="0.4950%" height="15" fill="rgb(213,109,30)" fg:x="16382" fg:w="99"/><text x="82.1682%" y="942.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.01%)</title><rect x="82.4182%" y="868" width="0.0100%" height="15" fill="rgb(222,172,16)" fg:x="16482" fg:w="2"/><text x="82.6682%" y="878.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (10 samples, 0.05%)</title><rect x="82.4332%" y="868" width="0.0500%" height="15" fill="rgb(233,192,5)" fg:x="16485" fg:w="10"/><text x="82.6832%" y="878.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null (12 samples, 0.06%)</title><rect x="82.4832%" y="868" width="0.0600%" height="15" fill="rgb(247,189,41)" fg:x="16495" fg:w="12"/><text x="82.7332%" y="878.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::is_null::runtime_impl (12 samples, 0.06%)</title><rect x="82.4832%" y="884" width="0.0600%" height="15" fill="rgb(218,134,47)" fg:x="16495" fg:w="12"/><text x="82.7332%" y="894.50"></text></g><g><title>futures_channel::mpsc::Receiver&lt;T&gt;::next_message (581 samples, 2.91%)</title><rect x="79.6580%" y="820" width="2.9053%" height="15" fill="rgb(216,29,3)" fg:x="15930" fg:w="581"/><text x="79.9080%" y="830.50">fu..</text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (164 samples, 0.82%)</title><rect x="81.7432%" y="836" width="0.8201%" height="15" fill="rgb(246,140,12)" fg:x="16347" fg:w="164"/><text x="81.9932%" y="846.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::pop (164 samples, 0.82%)</title><rect x="81.7432%" y="852" width="0.8201%" height="15" fill="rgb(230,136,11)" fg:x="16347" fg:w="164"/><text x="81.9932%" y="862.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (4 samples, 0.02%)</title><rect x="82.5433%" y="868" width="0.0200%" height="15" fill="rgb(247,22,47)" fg:x="16507" fg:w="4"/><text x="82.7933%" y="878.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.02%)</title><rect x="82.5433%" y="884" width="0.0200%" height="15" fill="rgb(218,84,22)" fg:x="16507" fg:w="4"/><text x="82.7933%" y="894.50"></text></g><g><title>&lt;&amp;mut S as futures_core::stream::Stream&gt;::poll_next (683 samples, 3.42%)</title><rect x="79.1529%" y="788" width="3.4153%" height="15" fill="rgb(216,87,39)" fg:x="15829" fg:w="683"/><text x="79.4029%" y="798.50">&lt;&amp;m..</text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (663 samples, 3.32%)</title><rect x="79.2529%" y="804" width="3.3153%" height="15" fill="rgb(221,178,8)" fg:x="15849" fg:w="663"/><text x="79.5029%" y="814.50">&lt;fu..</text></g><g><title>&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (4,907 samples, 24.54%)</title><rect x="58.0708%" y="772" width="24.5375%" height="15" fill="rgb(230,42,11)" fg:x="11613" fg:w="4907"/><text x="58.3208%" y="782.50">&lt;sqlx_core::ext::async_stream::TryAsync..</text></g><g><title>core::ptr::drop_in_place&lt;core::task::poll::Poll&lt;core::result::Result&lt;(),sqlx_core::error::Error&gt;&gt;&gt; (8 samples, 0.04%)</title><rect x="82.5683%" y="788" width="0.0400%" height="15" fill="rgb(237,229,4)" fg:x="16512" fg:w="8"/><text x="82.8183%" y="798.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (4,913 samples, 24.57%)</title><rect x="58.0558%" y="740" width="24.5675%" height="15" fill="rgb(222,31,33)" fg:x="11610" fg:w="4913"/><text x="58.3058%" y="750.50">&lt;S as futures_core::stream::TryStream&gt;:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (4,913 samples, 24.57%)</title><rect x="58.0558%" y="756" width="24.5675%" height="15" fill="rgb(210,17,39)" fg:x="11610" fg:w="4913"/><text x="58.3058%" y="766.50">&lt;core::pin::Pin&lt;P&gt; as futures_core::str..</text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (3 samples, 0.02%)</title><rect x="82.6083%" y="772" width="0.0150%" height="15" fill="rgb(244,93,20)" fg:x="16520" fg:w="3"/><text x="82.8583%" y="782.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.02%)</title><rect x="82.6083%" y="788" width="0.0150%" height="15" fill="rgb(210,40,47)" fg:x="16520" fg:w="3"/><text x="82.8583%" y="798.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::option::Option&lt;core::result::Result&lt;T,E&gt;&gt;&gt; as core::ops::try_trait::Try&gt;::branch (46 samples, 0.23%)</title><rect x="82.6233%" y="740" width="0.2300%" height="15" fill="rgb(239,211,47)" fg:x="16523" fg:w="46"/><text x="82.8733%" y="750.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_pin_mut (9 samples, 0.05%)</title><rect x="82.8533%" y="740" width="0.0450%" height="15" fill="rgb(251,223,49)" fg:x="16569" fg:w="9"/><text x="83.1033%" y="750.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (6 samples, 0.03%)</title><rect x="82.8683%" y="756" width="0.0300%" height="15" fill="rgb(221,149,5)" fg:x="16572" fg:w="6"/><text x="83.1183%" y="766.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_filter_map::TryFilterMap&lt;St,Fut,F&gt; as futures_core::stream::Stream&gt;::poll_next (5,139 samples, 25.70%)</title><rect x="57.2957%" y="724" width="25.6976%" height="15" fill="rgb(219,224,51)" fg:x="11458" fg:w="5139"/><text x="57.5457%" y="734.50">&lt;futures_util::stream::try_stream::try_fi..</text></g><g><title>core::pin::Pin&lt;P&gt;::set (19 samples, 0.10%)</title><rect x="82.8983%" y="740" width="0.0950%" height="15" fill="rgb(223,7,8)" fg:x="16578" fg:w="19"/><text x="83.1483%" y="750.50"></text></g><g><title>&lt;S as futures_core::stream::TryStream&gt;::try_poll_next (5,144 samples, 25.72%)</title><rect x="57.2857%" y="692" width="25.7226%" height="15" fill="rgb(241,217,22)" fg:x="11456" fg:w="5144"/><text x="57.5357%" y="702.50">&lt;S as futures_core::stream::TryStream&gt;::t..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as futures_core::stream::Stream&gt;::poll_next (5,144 samples, 25.72%)</title><rect x="57.2857%" y="708" width="25.7226%" height="15" fill="rgb(248,209,0)" fg:x="11456" fg:w="5144"/><text x="57.5357%" y="718.50">&lt;core::pin::Pin&lt;P&gt; as futures_core::strea..</text></g><g><title>core::pin::Pin&lt;P&gt;::as_mut (3 samples, 0.02%)</title><rect x="82.9933%" y="724" width="0.0150%" height="15" fill="rgb(217,205,4)" fg:x="16597" fg:w="3"/><text x="83.2433%" y="734.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (3 samples, 0.02%)</title><rect x="82.9933%" y="740" width="0.0150%" height="15" fill="rgb(228,124,39)" fg:x="16597" fg:w="3"/><text x="83.2433%" y="750.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (5 samples, 0.03%)</title><rect x="83.1733%" y="772" width="0.0250%" height="15" fill="rgb(250,116,42)" fg:x="16633" fg:w="5"/><text x="83.4233%" y="782.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="83.2033%" y="804" width="0.0100%" height="15" fill="rgb(223,202,9)" fg:x="16639" fg:w="2"/><text x="83.4533%" y="814.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17h539c3c0965d8f18fE.llvm.2944384259960771704 (3 samples, 0.02%)</title><rect x="83.2133%" y="804" width="0.0150%" height="15" fill="rgb(242,222,40)" fg:x="16641" fg:w="3"/><text x="83.4633%" y="814.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="83.2183%" y="820" width="0.0100%" height="15" fill="rgb(229,99,46)" fg:x="16642" fg:w="2"/><text x="83.4683%" y="830.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="83.2183%" y="836" width="0.0100%" height="15" fill="rgb(225,56,46)" fg:x="16642" fg:w="2"/><text x="83.4683%" y="846.50"></text></g><g><title>__GI___lll_lock_wait_private (6 samples, 0.03%)</title><rect x="83.3583%" y="884" width="0.0300%" height="15" fill="rgb(227,94,5)" fg:x="16670" fg:w="6"/><text x="83.6083%" y="894.50"></text></g><g><title>futex_wait (5 samples, 0.03%)</title><rect x="83.3633%" y="900" width="0.0250%" height="15" fill="rgb(205,112,38)" fg:x="16671" fg:w="5"/><text x="83.6133%" y="910.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="83.3633%" y="916" width="0.0250%" height="15" fill="rgb(231,133,46)" fg:x="16671" fg:w="5"/><text x="83.6133%" y="926.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="83.3633%" y="932" width="0.0250%" height="15" fill="rgb(217,16,9)" fg:x="16671" fg:w="5"/><text x="83.6133%" y="942.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="83.3633%" y="948" width="0.0250%" height="15" fill="rgb(249,173,9)" fg:x="16671" fg:w="5"/><text x="83.6133%" y="958.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="83.3633%" y="964" width="0.0250%" height="15" fill="rgb(205,163,53)" fg:x="16671" fg:w="5"/><text x="83.6133%" y="974.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="83.3683%" y="980" width="0.0200%" height="15" fill="rgb(217,54,41)" fg:x="16672" fg:w="4"/><text x="83.6183%" y="990.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="83.3733%" y="996" width="0.0150%" height="15" fill="rgb(228,216,12)" fg:x="16673" fg:w="3"/><text x="83.6233%" y="1006.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="83.3733%" y="1012" width="0.0150%" height="15" fill="rgb(244,228,15)" fg:x="16673" fg:w="3"/><text x="83.6233%" y="1022.50"></text></g><g><title>__GI___lll_lock_wake_private (7 samples, 0.04%)</title><rect x="83.3883%" y="884" width="0.0350%" height="15" fill="rgb(221,176,53)" fg:x="16676" fg:w="7"/><text x="83.6383%" y="894.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="83.3883%" y="900" width="0.0350%" height="15" fill="rgb(205,94,34)" fg:x="16676" fg:w="7"/><text x="83.6383%" y="910.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="83.3933%" y="916" width="0.0300%" height="15" fill="rgb(213,110,48)" fg:x="16677" fg:w="6"/><text x="83.6433%" y="926.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="83.3933%" y="932" width="0.0300%" height="15" fill="rgb(236,142,28)" fg:x="16677" fg:w="6"/><text x="83.6433%" y="942.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="83.3933%" y="948" width="0.0300%" height="15" fill="rgb(225,135,29)" fg:x="16677" fg:w="6"/><text x="83.6433%" y="958.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="83.3933%" y="964" width="0.0300%" height="15" fill="rgb(252,45,31)" fg:x="16677" fg:w="6"/><text x="83.6433%" y="974.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="83.4133%" y="980" width="0.0100%" height="15" fill="rgb(211,187,50)" fg:x="16681" fg:w="2"/><text x="83.6633%" y="990.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="83.4133%" y="996" width="0.0100%" height="15" fill="rgb(229,109,7)" fg:x="16681" fg:w="2"/><text x="83.6633%" y="1006.50"></text></g><g><title>__memcpy_avx_unaligned_erms (31 samples, 0.16%)</title><rect x="83.4483%" y="900" width="0.1550%" height="15" fill="rgb(251,131,51)" fg:x="16688" fg:w="31"/><text x="83.6983%" y="910.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="83.6034%" y="900" width="0.0100%" height="15" fill="rgb(251,180,35)" fg:x="16719" fg:w="2"/><text x="83.8534%" y="910.50"></text></g><g><title>_int_free (16 samples, 0.08%)</title><rect x="83.6134%" y="900" width="0.0800%" height="15" fill="rgb(211,46,32)" fg:x="16721" fg:w="16"/><text x="83.8634%" y="910.50"></text></g><g><title>malloc_consolidate (79 samples, 0.40%)</title><rect x="83.9784%" y="916" width="0.3950%" height="15" fill="rgb(248,123,17)" fg:x="16794" fg:w="79"/><text x="84.2284%" y="926.50"></text></g><g><title>unlink_chunk (21 samples, 0.11%)</title><rect x="84.2684%" y="932" width="0.1050%" height="15" fill="rgb(227,141,18)" fg:x="16852" fg:w="21"/><text x="84.5184%" y="942.50"></text></g><g><title>__GI___libc_realloc (233 samples, 1.17%)</title><rect x="83.2533%" y="868" width="1.1651%" height="15" fill="rgb(216,102,9)" fg:x="16649" fg:w="233"/><text x="83.5033%" y="878.50"></text></g><g><title>_int_realloc (199 samples, 1.00%)</title><rect x="83.4233%" y="884" width="0.9951%" height="15" fill="rgb(253,47,13)" fg:x="16683" fg:w="199"/><text x="83.6733%" y="894.50"></text></g><g><title>_int_malloc (145 samples, 0.73%)</title><rect x="83.6934%" y="900" width="0.7251%" height="15" fill="rgb(226,93,23)" fg:x="16737" fg:w="145"/><text x="83.9434%" y="910.50"></text></g><g><title>unlink_chunk (9 samples, 0.05%)</title><rect x="84.3734%" y="916" width="0.0450%" height="15" fill="rgb(247,104,17)" fg:x="16873" fg:w="9"/><text x="84.6234%" y="926.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (235 samples, 1.18%)</title><rect x="83.2533%" y="820" width="1.1751%" height="15" fill="rgb(233,203,26)" fg:x="16649" fg:w="235"/><text x="83.5033%" y="830.50"></text></g><g><title>alloc::alloc::Global::grow_impl (235 samples, 1.18%)</title><rect x="83.2533%" y="836" width="1.1751%" height="15" fill="rgb(244,98,49)" fg:x="16649" fg:w="235"/><text x="83.5033%" y="846.50"></text></g><g><title>alloc::alloc::realloc (235 samples, 1.18%)</title><rect x="83.2533%" y="852" width="1.1751%" height="15" fill="rgb(235,134,22)" fg:x="16649" fg:w="235"/><text x="83.5033%" y="862.50"></text></g><g><title>__rust_realloc (2 samples, 0.01%)</title><rect x="84.4184%" y="868" width="0.0100%" height="15" fill="rgb(221,70,32)" fg:x="16882" fg:w="2"/><text x="84.6684%" y="878.50"></text></g><g><title>alloc::raw_vec::finish_grow (244 samples, 1.22%)</title><rect x="83.2283%" y="804" width="1.2201%" height="15" fill="rgb(238,15,50)" fg:x="16644" fg:w="244"/><text x="83.4783%" y="814.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.02%)</title><rect x="84.4284%" y="820" width="0.0200%" height="15" fill="rgb(215,221,48)" fg:x="16884" fg:w="4"/><text x="84.6784%" y="830.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (252 samples, 1.26%)</title><rect x="83.2033%" y="788" width="1.2601%" height="15" fill="rgb(236,73,3)" fg:x="16639" fg:w="252"/><text x="83.4533%" y="798.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.01%)</title><rect x="84.4534%" y="804" width="0.0100%" height="15" fill="rgb(250,107,11)" fg:x="16889" fg:w="2"/><text x="84.7034%" y="814.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.01%)</title><rect x="84.4534%" y="820" width="0.0100%" height="15" fill="rgb(242,39,14)" fg:x="16889" fg:w="2"/><text x="84.7034%" y="830.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (261 samples, 1.31%)</title><rect x="83.1683%" y="740" width="1.3051%" height="15" fill="rgb(248,164,37)" fg:x="16632" fg:w="261"/><text x="83.4183%" y="750.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (261 samples, 1.31%)</title><rect x="83.1683%" y="756" width="1.3051%" height="15" fill="rgb(217,60,12)" fg:x="16632" fg:w="261"/><text x="83.4183%" y="766.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (255 samples, 1.28%)</title><rect x="83.1983%" y="772" width="1.2751%" height="15" fill="rgb(240,125,29)" fg:x="16638" fg:w="255"/><text x="83.4483%" y="782.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.01%)</title><rect x="84.4634%" y="788" width="0.0100%" height="15" fill="rgb(208,207,28)" fg:x="16891" fg:w="2"/><text x="84.7134%" y="798.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (2 samples, 0.01%)</title><rect x="84.4734%" y="804" width="0.0100%" height="15" fill="rgb(209,159,27)" fg:x="16893" fg:w="2"/><text x="84.7234%" y="814.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (330 samples, 1.65%)</title><rect x="83.0083%" y="708" width="1.6502%" height="15" fill="rgb(251,176,53)" fg:x="16600" fg:w="330"/><text x="83.2583%" y="718.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (330 samples, 1.65%)</title><rect x="83.0083%" y="724" width="1.6502%" height="15" fill="rgb(211,85,7)" fg:x="16600" fg:w="330"/><text x="83.2583%" y="734.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (37 samples, 0.19%)</title><rect x="84.4734%" y="740" width="0.1850%" height="15" fill="rgb(216,64,54)" fg:x="16893" fg:w="37"/><text x="84.7234%" y="750.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (37 samples, 0.19%)</title><rect x="84.4734%" y="756" width="0.1850%" height="15" fill="rgb(217,54,24)" fg:x="16893" fg:w="37"/><text x="84.7234%" y="766.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (37 samples, 0.19%)</title><rect x="84.4734%" y="772" width="0.1850%" height="15" fill="rgb(208,206,53)" fg:x="16893" fg:w="37"/><text x="84.7234%" y="782.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (37 samples, 0.19%)</title><rect x="84.4734%" y="788" width="0.1850%" height="15" fill="rgb(251,74,39)" fg:x="16893" fg:w="37"/><text x="84.7234%" y="798.50"></text></g><g><title>core::ptr::write (34 samples, 0.17%)</title><rect x="84.4884%" y="804" width="0.1700%" height="15" fill="rgb(226,47,5)" fg:x="16896" fg:w="34"/><text x="84.7384%" y="814.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (331 samples, 1.66%)</title><rect x="83.0083%" y="692" width="1.6552%" height="15" fill="rgb(234,111,33)" fg:x="16600" fg:w="331"/><text x="83.2583%" y="702.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::option::Option&lt;core::result::Result&lt;T,E&gt;&gt;&gt; as core::ops::try_trait::Try&gt;::branch (21 samples, 0.11%)</title><rect x="84.6635%" y="692" width="0.1050%" height="15" fill="rgb(251,14,10)" fg:x="16931" fg:w="21"/><text x="84.9135%" y="702.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (5,509 samples, 27.55%)</title><rect x="57.2257%" y="676" width="27.5478%" height="15" fill="rgb(232,43,0)" fg:x="11444" fg:w="5509"/><text x="57.4757%" y="686.50">&lt;futures_util::stream::try_stream::try_colle..</text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.04%)</title><rect x="84.7935%" y="724" width="0.0350%" height="15" fill="rgb(222,68,43)" fg:x="16957" fg:w="7"/><text x="85.0435%" y="734.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.04%)</title><rect x="84.7935%" y="740" width="0.0350%" height="15" fill="rgb(217,24,23)" fg:x="16957" fg:w="7"/><text x="85.0435%" y="750.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.04%)</title><rect x="84.7935%" y="756" width="0.0350%" height="15" fill="rgb(229,209,14)" fg:x="16957" fg:w="7"/><text x="85.0435%" y="766.50"></text></g><g><title>__GI___libc_free (7 samples, 0.04%)</title><rect x="84.7935%" y="772" width="0.0350%" height="15" fill="rgb(250,149,48)" fg:x="16957" fg:w="7"/><text x="85.0435%" y="782.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="84.8085%" y="788" width="0.0200%" height="15" fill="rgb(210,120,37)" fg:x="16960" fg:w="4"/><text x="85.0585%" y="798.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="84.8285%" y="820" width="0.0100%" height="15" fill="rgb(210,21,8)" fg:x="16964" fg:w="2"/><text x="85.0785%" y="830.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="84.8285%" y="772" width="0.0150%" height="15" fill="rgb(243,145,7)" fg:x="16964" fg:w="3"/><text x="85.0785%" y="782.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="84.8285%" y="788" width="0.0150%" height="15" fill="rgb(238,178,32)" fg:x="16964" fg:w="3"/><text x="85.0785%" y="798.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="84.8285%" y="804" width="0.0150%" height="15" fill="rgb(222,4,10)" fg:x="16964" fg:w="3"/><text x="85.0785%" y="814.50"></text></g><g><title>__GI___libc_free (8 samples, 0.04%)</title><rect x="84.8485%" y="772" width="0.0400%" height="15" fill="rgb(239,7,37)" fg:x="16968" fg:w="8"/><text x="85.0985%" y="782.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="84.8685%" y="788" width="0.0200%" height="15" fill="rgb(215,31,37)" fg:x="16972" fg:w="4"/><text x="85.1185%" y="798.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="84.8935%" y="788" width="0.0250%" height="15" fill="rgb(224,83,33)" fg:x="16977" fg:w="5"/><text x="85.1435%" y="798.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (5 samples, 0.03%)</title><rect x="84.8935%" y="804" width="0.0250%" height="15" fill="rgb(239,55,3)" fg:x="16977" fg:w="5"/><text x="85.1435%" y="814.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::fuse::Fuse&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;&gt;::new&lt;sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch_many&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}},sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch_many&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}}::{{closure}}&gt;::{{closure}}&gt;&gt; (4 samples, 0.02%)</title><rect x="84.8985%" y="820" width="0.0200%" height="15" fill="rgb(247,92,11)" fg:x="16978" fg:w="4"/><text x="85.1485%" y="830.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;&gt;::new&lt;sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch_many&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}},sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch_many&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}}::{{closure}}&gt;::{{closure}}&gt;&gt; (3 samples, 0.02%)</title><rect x="84.9035%" y="836" width="0.0150%" height="15" fill="rgb(239,200,7)" fg:x="16979" fg:w="3"/><text x="85.1535%" y="846.50"></text></g><g><title>&lt;futures_channel::mpsc::Receiver&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="84.9185%" y="804" width="0.0200%" height="15" fill="rgb(227,115,8)" fg:x="16982" fg:w="4"/><text x="85.1685%" y="814.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;rust_axum::User,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;,alloc::vec::Vec&lt;rust_axum::User&gt;&gt;&gt; (34 samples, 0.17%)</title><rect x="84.7735%" y="676" width="0.1700%" height="15" fill="rgb(215,189,27)" fg:x="16953" fg:w="34"/><text x="85.0235%" y="686.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;rust_axum::User,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (30 samples, 0.15%)</title><rect x="84.7935%" y="692" width="0.1500%" height="15" fill="rgb(251,216,39)" fg:x="16957" fg:w="30"/><text x="85.0435%" y="702.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;rust_axum::User,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (30 samples, 0.15%)</title><rect x="84.7935%" y="708" width="0.1500%" height="15" fill="rgb(207,29,47)" fg:x="16957" fg:w="30"/><text x="85.0435%" y="718.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::stream::try_stream::try_filter_map::TryFilterMap&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;,sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}}::{{closure}},sqlx_core::query::Map&lt;sqlx_postgres::database::Postgres,rust_axum::read_users::{{closure}}::{{closure}},sqlx_postgres::arguments::PgArguments&gt;::fetch&lt;&amp;mut sqlx_postgres::connection::PgConnection&gt;::{{closure}}&gt;&gt; (23 samples, 0.12%)</title><rect x="84.8285%" y="724" width="0.1150%" height="15" fill="rgb(210,71,34)" fg:x="16964" fg:w="23"/><text x="85.0785%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (23 samples, 0.12%)</title><rect x="84.8285%" y="740" width="0.1150%" height="15" fill="rgb(253,217,51)" fg:x="16964" fg:w="23"/><text x="85.0785%" y="750.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn futures_core::stream::Stream+Item = core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (23 samples, 0.12%)</title><rect x="84.8285%" y="756" width="0.1150%" height="15" fill="rgb(222,117,46)" fg:x="16964" fg:w="23"/><text x="85.0785%" y="766.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::ext::async_stream::TryAsyncStream&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;&gt;&gt; (11 samples, 0.06%)</title><rect x="84.8885%" y="772" width="0.0550%" height="15" fill="rgb(226,132,6)" fg:x="16976" fg:w="11"/><text x="85.1385%" y="782.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_channel::mpsc::Receiver&lt;core::result::Result&lt;either::Either&lt;sqlx_postgres::query_result::PgQueryResult,rust_axum::User&gt;,sqlx_core::error::Error&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="84.9185%" y="788" width="0.0250%" height="15" fill="rgb(254,145,51)" fg:x="16982" fg:w="5"/><text x="85.1685%" y="798.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.03%)</title><rect x="84.9485%" y="804" width="0.0250%" height="15" fill="rgb(231,199,27)" fg:x="16988" fg:w="5"/><text x="85.1985%" y="814.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="84.9635%" y="820" width="0.0100%" height="15" fill="rgb(245,158,14)" fg:x="16991" fg:w="2"/><text x="85.2135%" y="830.50"></text></g><g><title>futures_util::stream::stream::StreamExt::boxed (7 samples, 0.04%)</title><rect x="84.9435%" y="692" width="0.0350%" height="15" fill="rgb(240,113,14)" fg:x="16987" fg:w="7"/><text x="85.1935%" y="702.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (7 samples, 0.04%)</title><rect x="84.9435%" y="708" width="0.0350%" height="15" fill="rgb(210,20,13)" fg:x="16987" fg:w="7"/><text x="85.1935%" y="718.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="84.9435%" y="724" width="0.0350%" height="15" fill="rgb(241,144,13)" fg:x="16987" fg:w="7"/><text x="85.1935%" y="734.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.03%)</title><rect x="84.9485%" y="740" width="0.0300%" height="15" fill="rgb(235,43,34)" fg:x="16988" fg:w="6"/><text x="85.1985%" y="750.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="84.9485%" y="756" width="0.0300%" height="15" fill="rgb(208,36,20)" fg:x="16988" fg:w="6"/><text x="85.1985%" y="766.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="84.9485%" y="772" width="0.0300%" height="15" fill="rgb(239,204,10)" fg:x="16988" fg:w="6"/><text x="85.1985%" y="782.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="84.9485%" y="788" width="0.0300%" height="15" fill="rgb(217,84,43)" fg:x="16988" fg:w="6"/><text x="85.1985%" y="798.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (2 samples, 0.01%)</title><rect x="84.9835%" y="708" width="0.0100%" height="15" fill="rgb(241,170,50)" fg:x="16995" fg:w="2"/><text x="85.2335%" y="718.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="84.9835%" y="724" width="0.0100%" height="15" fill="rgb(226,205,29)" fg:x="16995" fg:w="2"/><text x="85.2335%" y="734.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.01%)</title><rect x="84.9835%" y="740" width="0.0100%" height="15" fill="rgb(233,113,1)" fg:x="16995" fg:w="2"/><text x="85.2335%" y="750.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="84.9835%" y="756" width="0.0100%" height="15" fill="rgb(253,98,13)" fg:x="16995" fg:w="2"/><text x="85.2335%" y="766.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="84.9835%" y="772" width="0.0100%" height="15" fill="rgb(211,115,12)" fg:x="16995" fg:w="2"/><text x="85.2335%" y="782.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="84.9835%" y="788" width="0.0100%" height="15" fill="rgb(208,12,16)" fg:x="16995" fg:w="2"/><text x="85.2335%" y="798.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="84.9835%" y="804" width="0.0100%" height="15" fill="rgb(237,193,54)" fg:x="16995" fg:w="2"/><text x="85.2335%" y="814.50"></text></g><g><title>_int_malloc (4 samples, 0.02%)</title><rect x="85.0535%" y="884" width="0.0200%" height="15" fill="rgb(243,22,42)" fg:x="17009" fg:w="4"/><text x="85.3035%" y="894.50"></text></g><g><title>&lt;futures_channel::mpsc::Sender&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.06%)</title><rect x="85.0185%" y="724" width="0.0600%" height="15" fill="rgb(233,151,36)" fg:x="17002" fg:w="12"/><text x="85.2685%" y="734.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.04%)</title><rect x="85.0435%" y="740" width="0.0350%" height="15" fill="rgb(237,57,45)" fg:x="17007" fg:w="7"/><text x="85.2935%" y="750.50"></text></g><g><title>&lt;futures_channel::mpsc::BoundedSenderInner&lt;T&gt; as core::clone::Clone&gt;::clone (7 samples, 0.04%)</title><rect x="85.0435%" y="756" width="0.0350%" height="15" fill="rgb(221,88,17)" fg:x="17007" fg:w="7"/><text x="85.2935%" y="766.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="85.0485%" y="772" width="0.0300%" height="15" fill="rgb(230,79,15)" fg:x="17008" fg:w="6"/><text x="85.2985%" y="782.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (6 samples, 0.03%)</title><rect x="85.0485%" y="788" width="0.0300%" height="15" fill="rgb(213,57,13)" fg:x="17008" fg:w="6"/><text x="85.2985%" y="798.50"></text></g><g><title>alloc::alloc::exchange_malloc (6 samples, 0.03%)</title><rect x="85.0485%" y="804" width="0.0300%" height="15" fill="rgb(222,116,39)" fg:x="17008" fg:w="6"/><text x="85.2985%" y="814.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.03%)</title><rect x="85.0485%" y="820" width="0.0300%" height="15" fill="rgb(245,107,2)" fg:x="17008" fg:w="6"/><text x="85.2985%" y="830.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.03%)</title><rect x="85.0485%" y="836" width="0.0300%" height="15" fill="rgb(238,1,10)" fg:x="17008" fg:w="6"/><text x="85.2985%" y="846.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.03%)</title><rect x="85.0485%" y="852" width="0.0300%" height="15" fill="rgb(249,4,48)" fg:x="17008" fg:w="6"/><text x="85.2985%" y="862.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.03%)</title><rect x="85.0485%" y="868" width="0.0300%" height="15" fill="rgb(223,151,18)" fg:x="17008" fg:w="6"/><text x="85.2985%" y="878.50"></text></g><g><title>_int_malloc (2 samples, 0.01%)</title><rect x="85.0935%" y="852" width="0.0100%" height="15" fill="rgb(227,65,43)" fg:x="17017" fg:w="2"/><text x="85.3435%" y="862.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="85.0785%" y="740" width="0.0350%" height="15" fill="rgb(218,40,45)" fg:x="17014" fg:w="7"/><text x="85.3285%" y="750.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="85.0785%" y="756" width="0.0350%" height="15" fill="rgb(252,121,31)" fg:x="17014" fg:w="7"/><text x="85.3285%" y="766.50"></text></g><g><title>alloc::alloc::exchange_malloc (5 samples, 0.03%)</title><rect x="85.0885%" y="772" width="0.0250%" height="15" fill="rgb(219,158,43)" fg:x="17016" fg:w="5"/><text x="85.3385%" y="782.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.03%)</title><rect x="85.0885%" y="788" width="0.0250%" height="15" fill="rgb(231,162,42)" fg:x="17016" fg:w="5"/><text x="85.3385%" y="798.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.03%)</title><rect x="85.0885%" y="804" width="0.0250%" height="15" fill="rgb(217,179,25)" fg:x="17016" fg:w="5"/><text x="85.3385%" y="814.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.03%)</title><rect x="85.0885%" y="820" width="0.0250%" height="15" fill="rgb(206,212,31)" fg:x="17016" fg:w="5"/><text x="85.3385%" y="830.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.03%)</title><rect x="85.0885%" y="836" width="0.0250%" height="15" fill="rgb(235,144,12)" fg:x="17016" fg:w="5"/><text x="85.3385%" y="846.50"></text></g><g><title>tcache_get (2 samples, 0.01%)</title><rect x="85.1035%" y="852" width="0.0100%" height="15" fill="rgb(213,51,10)" fg:x="17019" fg:w="2"/><text x="85.3535%" y="862.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.03%)</title><rect x="85.1185%" y="852" width="0.0250%" height="15" fill="rgb(231,145,14)" fg:x="17022" fg:w="5"/><text x="85.3685%" y="862.50"></text></g><g><title>tcache_get (3 samples, 0.02%)</title><rect x="85.1285%" y="868" width="0.0150%" height="15" fill="rgb(235,15,28)" fg:x="17024" fg:w="3"/><text x="85.3785%" y="878.50"></text></g><g><title>futures_channel::mpsc::channel (14 samples, 0.07%)</title><rect x="85.0785%" y="724" width="0.0700%" height="15" fill="rgb(237,206,10)" fg:x="17014" fg:w="14"/><text x="85.3285%" y="734.50"></text></g><g><title>futures_channel::mpsc::queue::Queue&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="85.1135%" y="740" width="0.0350%" height="15" fill="rgb(236,227,27)" fg:x="17021" fg:w="7"/><text x="85.3635%" y="750.50"></text></g><g><title>futures_channel::mpsc::queue::Node&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="85.1135%" y="756" width="0.0350%" height="15" fill="rgb(246,83,35)" fg:x="17021" fg:w="7"/><text x="85.3635%" y="766.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (7 samples, 0.04%)</title><rect x="85.1135%" y="772" width="0.0350%" height="15" fill="rgb(220,136,24)" fg:x="17021" fg:w="7"/><text x="85.3635%" y="782.50"></text></g><g><title>alloc::alloc::exchange_malloc (7 samples, 0.04%)</title><rect x="85.1135%" y="788" width="0.0350%" height="15" fill="rgb(217,3,25)" fg:x="17021" fg:w="7"/><text x="85.3635%" y="798.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.04%)</title><rect x="85.1135%" y="804" width="0.0350%" height="15" fill="rgb(239,24,14)" fg:x="17021" fg:w="7"/><text x="85.3635%" y="814.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.04%)</title><rect x="85.1135%" y="820" width="0.0350%" height="15" fill="rgb(244,16,53)" fg:x="17021" fg:w="7"/><text x="85.3635%" y="830.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.04%)</title><rect x="85.1135%" y="836" width="0.0350%" height="15" fill="rgb(208,175,44)" fg:x="17021" fg:w="7"/><text x="85.3635%" y="846.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="85.1485%" y="772" width="0.0150%" height="15" fill="rgb(252,18,48)" fg:x="17028" fg:w="3"/><text x="85.3985%" y="782.50"></text></g><g><title>malloc_consolidate (56 samples, 0.28%)</title><rect x="85.3085%" y="868" width="0.2800%" height="15" fill="rgb(234,199,32)" fg:x="17060" fg:w="56"/><text x="85.5585%" y="878.50"></text></g><g><title>unlink_chunk (14 samples, 0.07%)</title><rect x="85.5186%" y="884" width="0.0700%" height="15" fill="rgb(225,77,54)" fg:x="17102" fg:w="14"/><text x="85.7686%" y="894.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}} (8,720 samples, 43.60%)</title><rect x="41.9892%" y="628" width="43.6044%" height="15" fill="rgb(225,42,25)" fg:x="8397" fg:w="8720"/><text x="42.2392%" y="638.50">&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}}</text></g><g><title>rust_axum::read_users::_{{closure}} (5,692 samples, 28.46%)</title><rect x="57.1307%" y="644" width="28.4628%" height="15" fill="rgb(242,227,46)" fg:x="11425" fg:w="5692"/><text x="57.3807%" y="654.50">rust_axum::read_users::_{{closure}}</text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_all::_{{closure}} (5,681 samples, 28.41%)</title><rect x="57.1857%" y="660" width="28.4078%" height="15" fill="rgb(246,197,35)" fg:x="11436" fg:w="5681"/><text x="57.4357%" y="670.50">sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_all::_{{c..</text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch (130 samples, 0.65%)</title><rect x="84.9435%" y="676" width="0.6501%" height="15" fill="rgb(215,159,26)" fg:x="16987" fg:w="130"/><text x="85.1935%" y="686.50"></text></g><g><title>sqlx_core::query::Map&lt;DB,F,A&gt;::fetch_many (123 samples, 0.62%)</title><rect x="84.9785%" y="692" width="0.6151%" height="15" fill="rgb(212,194,50)" fg:x="16994" fg:w="123"/><text x="85.2285%" y="702.50"></text></g><g><title>sqlx_core::ext::async_stream::TryAsyncStream&lt;T&gt;::new (120 samples, 0.60%)</title><rect x="84.9935%" y="708" width="0.6001%" height="15" fill="rgb(246,132,1)" fg:x="16997" fg:w="120"/><text x="85.2435%" y="718.50"></text></g><g><title>futures_util::future::future::FutureExt::boxed (89 samples, 0.45%)</title><rect x="85.1485%" y="724" width="0.4450%" height="15" fill="rgb(217,71,7)" fg:x="17028" fg:w="89"/><text x="85.3985%" y="734.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (89 samples, 0.45%)</title><rect x="85.1485%" y="740" width="0.4450%" height="15" fill="rgb(252,59,32)" fg:x="17028" fg:w="89"/><text x="85.3985%" y="750.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (89 samples, 0.45%)</title><rect x="85.1485%" y="756" width="0.4450%" height="15" fill="rgb(253,204,25)" fg:x="17028" fg:w="89"/><text x="85.3985%" y="766.50"></text></g><g><title>alloc::alloc::exchange_malloc (86 samples, 0.43%)</title><rect x="85.1635%" y="772" width="0.4300%" height="15" fill="rgb(232,21,16)" fg:x="17031" fg:w="86"/><text x="85.4135%" y="782.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (86 samples, 0.43%)</title><rect x="85.1635%" y="788" width="0.4300%" height="15" fill="rgb(248,90,29)" fg:x="17031" fg:w="86"/><text x="85.4135%" y="798.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (86 samples, 0.43%)</title><rect x="85.1635%" y="804" width="0.4300%" height="15" fill="rgb(249,223,7)" fg:x="17031" fg:w="86"/><text x="85.4135%" y="814.50"></text></g><g><title>alloc::alloc::alloc (86 samples, 0.43%)</title><rect x="85.1635%" y="820" width="0.4300%" height="15" fill="rgb(231,119,42)" fg:x="17031" fg:w="86"/><text x="85.4135%" y="830.50"></text></g><g><title>__GI___libc_malloc (86 samples, 0.43%)</title><rect x="85.1635%" y="836" width="0.4300%" height="15" fill="rgb(215,41,35)" fg:x="17031" fg:w="86"/><text x="85.4135%" y="846.50"></text></g><g><title>_int_malloc (84 samples, 0.42%)</title><rect x="85.1735%" y="852" width="0.4200%" height="15" fill="rgb(220,44,45)" fg:x="17033" fg:w="84"/><text x="85.4235%" y="862.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (8,852 samples, 44.26%)</title><rect x="41.3341%" y="276" width="44.2644%" height="15" fill="rgb(253,197,36)" fg:x="8266" fg:w="8852"/><text x="41.5841%" y="286.50">&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::f..</text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (8,852 samples, 44.26%)</title><rect x="41.3341%" y="292" width="44.2644%" height="15" fill="rgb(245,225,54)" fg:x="8266" fg:w="8852"/><text x="41.5841%" y="302.50">&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::fut..</text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (8,852 samples, 44.26%)</title><rect x="41.3341%" y="308" width="44.2644%" height="15" fill="rgb(239,94,37)" fg:x="8266" fg:w="8852"/><text x="41.5841%" y="318.50">&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Futur..</text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (8,852 samples, 44.26%)</title><rect x="41.3341%" y="324" width="44.2644%" height="15" fill="rgb(242,217,10)" fg:x="8266" fg:w="8852"/><text x="41.5841%" y="334.50">&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (8,852 samples, 44.26%)</title><rect x="41.3341%" y="340" width="44.2644%" height="15" fill="rgb(250,193,7)" fg:x="8266" fg:w="8852"/><text x="41.5841%" y="350.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (8,852 samples, 44.26%)</title><rect x="41.3341%" y="356" width="44.2644%" height="15" fill="rgb(230,104,19)" fg:x="8266" fg:w="8852"/><text x="41.5841%" y="366.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (8,852 samples, 44.26%)</title><rect x="41.3341%" y="372" width="44.2644%" height="15" fill="rgb(230,181,4)" fg:x="8266" fg:w="8852"/><text x="41.5841%" y="382.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (8,721 samples, 43.61%)</title><rect x="41.9892%" y="388" width="43.6094%" height="15" fill="rgb(216,219,49)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="398.50">hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write</text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (8,721 samples, 43.61%)</title><rect x="41.9892%" y="404" width="43.6094%" height="15" fill="rgb(254,144,0)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="414.50">&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper..</text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="420" width="43.6094%" height="15" fill="rgb(205,209,38)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="430.50">&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future..</text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="436" width="43.6094%" height="15" fill="rgb(240,21,42)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="446.50">&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="452" width="43.6094%" height="15" fill="rgb(241,132,3)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="462.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="468" width="43.6094%" height="15" fill="rgb(225,14,2)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="478.50">&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::fut..</text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="484" width="43.6094%" height="15" fill="rgb(210,141,35)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="494.50">&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="500" width="43.6094%" height="15" fill="rgb(251,14,44)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="510.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Futu..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="516" width="43.6094%" height="15" fill="rgb(247,48,18)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="526.50">&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future:..</text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="532" width="43.6094%" height="15" fill="rgb(225,0,40)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="542.50">&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core..</text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="548" width="43.6094%" height="15" fill="rgb(221,31,33)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="558.50">&lt;F as futures_core::future::TryFuture&gt;::try_poll</text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="564" width="43.6094%" height="15" fill="rgb(237,42,40)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="574.50">&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::F..</text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="580" width="43.6094%" height="15" fill="rgb(233,51,29)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="590.50">&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Futu..</text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="596" width="43.6094%" height="15" fill="rgb(226,58,20)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="606.50">&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future:..</text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (8,721 samples, 43.61%)</title><rect x="41.9892%" y="612" width="43.6094%" height="15" fill="rgb(208,98,7)" fg:x="8397" fg:w="8721"/><text x="42.2392%" y="622.50">&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll</text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.01%)</title><rect x="85.6036%" y="868" width="0.0100%" height="15" fill="rgb(228,143,44)" fg:x="17119" fg:w="2"/><text x="85.8536%" y="878.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_read::AsyncRead&gt;::poll_read (3 samples, 0.02%)</title><rect x="85.6136%" y="868" width="0.0150%" height="15" fill="rgb(246,55,38)" fg:x="17121" fg:w="3"/><text x="85.8636%" y="878.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (2 samples, 0.01%)</title><rect x="85.6186%" y="884" width="0.0100%" height="15" fill="rgb(247,87,16)" fg:x="17122" fg:w="2"/><text x="85.8686%" y="894.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::next (2 samples, 0.01%)</title><rect x="85.6286%" y="868" width="0.0100%" height="15" fill="rgb(234,129,42)" fg:x="17124" fg:w="2"/><text x="85.8786%" y="878.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (9 samples, 0.05%)</title><rect x="85.5986%" y="852" width="0.0450%" height="15" fill="rgb(220,82,16)" fg:x="17118" fg:w="9"/><text x="85.8486%" y="862.50"></text></g><g><title>[unknown] (17,016 samples, 85.09%)</title><rect x="0.5851%" y="84" width="85.0885%" height="15" fill="rgb(211,88,4)" fg:x="117" fg:w="17016"/><text x="0.8351%" y="94.50">[unknown]</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (8,867 samples, 44.34%)</title><rect x="41.3341%" y="100" width="44.3394%" height="15" fill="rgb(248,151,21)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="110.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (8,867 samples, 44.34%)</title><rect x="41.3341%" y="116" width="44.3394%" height="15" fill="rgb(238,163,6)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="126.50">tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner</text></g><g><title>tokio::runtime::task::harness::poll_future (8,867 samples, 44.34%)</title><rect x="41.3341%" y="132" width="44.3394%" height="15" fill="rgb(209,183,11)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="142.50">tokio::runtime::task::harness::poll_future</text></g><g><title>std::panic::catch_unwind (8,867 samples, 44.34%)</title><rect x="41.3341%" y="148" width="44.3394%" height="15" fill="rgb(219,37,20)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="158.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,867 samples, 44.34%)</title><rect x="41.3341%" y="164" width="44.3394%" height="15" fill="rgb(210,158,4)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="174.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,867 samples, 44.34%)</title><rect x="41.3341%" y="180" width="44.3394%" height="15" fill="rgb(221,167,53)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="190.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (8,867 samples, 44.34%)</title><rect x="41.3341%" y="196" width="44.3394%" height="15" fill="rgb(237,151,45)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="206.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::Fn..</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (8,867 samples, 44.34%)</title><rect x="41.3341%" y="212" width="44.3394%" height="15" fill="rgb(231,39,3)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="222.50">tokio::runtime::task::harness::poll_future::_{{closure}}</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8,867 samples, 44.34%)</title><rect x="41.3341%" y="228" width="44.3394%" height="15" fill="rgb(212,167,28)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="238.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (8,867 samples, 44.34%)</title><rect x="41.3341%" y="244" width="44.3394%" height="15" fill="rgb(232,178,8)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="254.50">tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (8,867 samples, 44.34%)</title><rect x="41.3341%" y="260" width="44.3394%" height="15" fill="rgb(225,151,20)" fg:x="8266" fg:w="8867"/><text x="41.5841%" y="270.50">tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}}</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="276" width="0.0750%" height="15" fill="rgb(238,3,37)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="286.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (15 samples, 0.08%)</title><rect x="85.5986%" y="292" width="0.0750%" height="15" fill="rgb(251,147,42)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="302.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (15 samples, 0.08%)</title><rect x="85.5986%" y="308" width="0.0750%" height="15" fill="rgb(208,173,10)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="318.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (15 samples, 0.08%)</title><rect x="85.5986%" y="324" width="0.0750%" height="15" fill="rgb(246,225,4)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="334.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (15 samples, 0.08%)</title><rect x="85.5986%" y="340" width="0.0750%" height="15" fill="rgb(248,102,6)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="350.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (15 samples, 0.08%)</title><rect x="85.5986%" y="356" width="0.0750%" height="15" fill="rgb(232,6,21)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="366.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (15 samples, 0.08%)</title><rect x="85.5986%" y="372" width="0.0750%" height="15" fill="rgb(221,179,22)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="382.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (15 samples, 0.08%)</title><rect x="85.5986%" y="388" width="0.0750%" height="15" fill="rgb(252,50,20)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="398.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (15 samples, 0.08%)</title><rect x="85.5986%" y="404" width="0.0750%" height="15" fill="rgb(222,56,38)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="414.50"></text></g><g><title>tokio::runtime::coop::budget (15 samples, 0.08%)</title><rect x="85.5986%" y="420" width="0.0750%" height="15" fill="rgb(206,193,29)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="430.50"></text></g><g><title>tokio::runtime::coop::with_budget (15 samples, 0.08%)</title><rect x="85.5986%" y="436" width="0.0750%" height="15" fill="rgb(239,192,45)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="446.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (15 samples, 0.08%)</title><rect x="85.5986%" y="452" width="0.0750%" height="15" fill="rgb(254,18,36)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="462.50"></text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (15 samples, 0.08%)</title><rect x="85.5986%" y="468" width="0.0750%" height="15" fill="rgb(221,127,11)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="478.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="484" width="0.0750%" height="15" fill="rgb(234,146,35)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="494.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="500" width="0.0750%" height="15" fill="rgb(254,201,37)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="510.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (15 samples, 0.08%)</title><rect x="85.5986%" y="516" width="0.0750%" height="15" fill="rgb(211,202,23)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="526.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (15 samples, 0.08%)</title><rect x="85.5986%" y="532" width="0.0750%" height="15" fill="rgb(237,91,2)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="542.50"></text></g><g><title>std::panic::catch_unwind (15 samples, 0.08%)</title><rect x="85.5986%" y="548" width="0.0750%" height="15" fill="rgb(226,228,36)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="558.50"></text></g><g><title>std::panicking::try (15 samples, 0.08%)</title><rect x="85.5986%" y="564" width="0.0750%" height="15" fill="rgb(213,63,50)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="574.50"></text></g><g><title>std::panicking::try::do_call (15 samples, 0.08%)</title><rect x="85.5986%" y="580" width="0.0750%" height="15" fill="rgb(235,194,19)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="590.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (15 samples, 0.08%)</title><rect x="85.5986%" y="596" width="0.0750%" height="15" fill="rgb(207,204,18)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="606.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (15 samples, 0.08%)</title><rect x="85.5986%" y="612" width="0.0750%" height="15" fill="rgb(248,8,7)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="622.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="628" width="0.0750%" height="15" fill="rgb(223,145,47)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="638.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (15 samples, 0.08%)</title><rect x="85.5986%" y="644" width="0.0750%" height="15" fill="rgb(228,84,11)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="654.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (15 samples, 0.08%)</title><rect x="85.5986%" y="660" width="0.0750%" height="15" fill="rgb(218,76,45)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="670.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="676" width="0.0750%" height="15" fill="rgb(223,80,15)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="686.50"></text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="692" width="0.0750%" height="15" fill="rgb(219,218,33)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="702.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="708" width="0.0750%" height="15" fill="rgb(208,51,11)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="718.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (15 samples, 0.08%)</title><rect x="85.5986%" y="724" width="0.0750%" height="15" fill="rgb(229,165,39)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="734.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (15 samples, 0.08%)</title><rect x="85.5986%" y="740" width="0.0750%" height="15" fill="rgb(241,100,24)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="750.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (15 samples, 0.08%)</title><rect x="85.5986%" y="756" width="0.0750%" height="15" fill="rgb(228,14,23)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="766.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (15 samples, 0.08%)</title><rect x="85.5986%" y="772" width="0.0750%" height="15" fill="rgb(247,116,52)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="782.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (15 samples, 0.08%)</title><rect x="85.5986%" y="788" width="0.0750%" height="15" fill="rgb(216,149,33)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="798.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (15 samples, 0.08%)</title><rect x="85.5986%" y="804" width="0.0750%" height="15" fill="rgb(238,142,29)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="814.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (15 samples, 0.08%)</title><rect x="85.5986%" y="820" width="0.0750%" height="15" fill="rgb(224,83,40)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="830.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (15 samples, 0.08%)</title><rect x="85.5986%" y="836" width="0.0750%" height="15" fill="rgb(234,165,11)" fg:x="17118" fg:w="15"/><text x="85.8486%" y="846.50"></text></g><g><title>hyper::proto::h1::role::parse_headers (6 samples, 0.03%)</title><rect x="85.6436%" y="852" width="0.0300%" height="15" fill="rgb(215,96,23)" fg:x="17127" fg:w="6"/><text x="85.8936%" y="862.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.6736%" y="116" width="0.0200%" height="15" fill="rgb(233,179,26)" fg:x="17133" fg:w="4"/><text x="85.9236%" y="126.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.6836%" y="132" width="0.0100%" height="15" fill="rgb(225,129,33)" fg:x="17135" fg:w="2"/><text x="85.9336%" y="142.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::unlock_slow (4 samples, 0.02%)</title><rect x="85.6936%" y="404" width="0.0200%" height="15" fill="rgb(237,49,13)" fg:x="17137" fg:w="4"/><text x="85.9436%" y="414.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_one (4 samples, 0.02%)</title><rect x="85.6936%" y="420" width="0.0200%" height="15" fill="rgb(211,3,31)" fg:x="17137" fg:w="4"/><text x="85.9436%" y="430.50"></text></g><g><title>core::mem::drop (9 samples, 0.05%)</title><rect x="85.6936%" y="324" width="0.0450%" height="15" fill="rgb(216,152,19)" fg:x="17137" fg:w="9"/><text x="85.9436%" y="334.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (9 samples, 0.05%)</title><rect x="85.6936%" y="340" width="0.0450%" height="15" fill="rgb(251,121,35)" fg:x="17137" fg:w="9"/><text x="85.9436%" y="350.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (9 samples, 0.05%)</title><rect x="85.6936%" y="356" width="0.0450%" height="15" fill="rgb(210,217,47)" fg:x="17137" fg:w="9"/><text x="85.9436%" y="366.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.05%)</title><rect x="85.6936%" y="372" width="0.0450%" height="15" fill="rgb(244,116,22)" fg:x="17137" fg:w="9"/><text x="85.9436%" y="382.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (9 samples, 0.05%)</title><rect x="85.6936%" y="388" width="0.0450%" height="15" fill="rgb(228,17,21)" fg:x="17137" fg:w="9"/><text x="85.9436%" y="398.50"></text></g><g><title>syscall (5 samples, 0.03%)</title><rect x="85.7136%" y="404" width="0.0250%" height="15" fill="rgb(240,149,34)" fg:x="17141" fg:w="5"/><text x="85.9636%" y="414.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7136%" y="420" width="0.0250%" height="15" fill="rgb(208,125,47)" fg:x="17141" fg:w="5"/><text x="85.9636%" y="430.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7136%" y="436" width="0.0250%" height="15" fill="rgb(249,186,39)" fg:x="17141" fg:w="5"/><text x="85.9636%" y="446.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7136%" y="452" width="0.0250%" height="15" fill="rgb(240,220,33)" fg:x="17141" fg:w="5"/><text x="85.9636%" y="462.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7136%" y="468" width="0.0250%" height="15" fill="rgb(243,110,23)" fg:x="17141" fg:w="5"/><text x="85.9636%" y="478.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7136%" y="484" width="0.0250%" height="15" fill="rgb(219,163,46)" fg:x="17141" fg:w="5"/><text x="85.9636%" y="494.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.7186%" y="500" width="0.0200%" height="15" fill="rgb(216,126,30)" fg:x="17142" fg:w="4"/><text x="85.9686%" y="510.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (6 samples, 0.03%)</title><rect x="85.7386%" y="436" width="0.0300%" height="15" fill="rgb(208,139,11)" fg:x="17146" fg:w="6"/><text x="85.9886%" y="446.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (6 samples, 0.03%)</title><rect x="85.7386%" y="452" width="0.0300%" height="15" fill="rgb(213,118,36)" fg:x="17146" fg:w="6"/><text x="85.9886%" y="462.50"></text></g><g><title>syscall (6 samples, 0.03%)</title><rect x="85.7386%" y="468" width="0.0300%" height="15" fill="rgb(226,43,17)" fg:x="17146" fg:w="6"/><text x="85.9886%" y="478.50"></text></g><g><title>[unknown] (6 samples, 0.03%)</title><rect x="85.7386%" y="484" width="0.0300%" height="15" fill="rgb(254,217,4)" fg:x="17146" fg:w="6"/><text x="85.9886%" y="494.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7436%" y="500" width="0.0250%" height="15" fill="rgb(210,134,47)" fg:x="17147" fg:w="5"/><text x="85.9936%" y="510.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7436%" y="516" width="0.0250%" height="15" fill="rgb(237,24,49)" fg:x="17147" fg:w="5"/><text x="85.9936%" y="526.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7436%" y="532" width="0.0250%" height="15" fill="rgb(251,39,46)" fg:x="17147" fg:w="5"/><text x="85.9936%" y="542.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7436%" y="548" width="0.0250%" height="15" fill="rgb(251,220,3)" fg:x="17147" fg:w="5"/><text x="85.9936%" y="558.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7436%" y="564" width="0.0250%" height="15" fill="rgb(228,105,12)" fg:x="17147" fg:w="5"/><text x="85.9936%" y="574.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="85.7436%" y="580" width="0.0250%" height="15" fill="rgb(215,196,1)" fg:x="17147" fg:w="5"/><text x="85.9936%" y="590.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.7586%" y="596" width="0.0100%" height="15" fill="rgb(214,33,39)" fg:x="17150" fg:w="2"/><text x="86.0086%" y="606.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.7586%" y="612" width="0.0100%" height="15" fill="rgb(220,19,52)" fg:x="17150" fg:w="2"/><text x="86.0086%" y="622.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.7586%" y="628" width="0.0100%" height="15" fill="rgb(221,78,38)" fg:x="17150" fg:w="2"/><text x="86.0086%" y="638.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.7586%" y="644" width="0.0100%" height="15" fill="rgb(253,30,16)" fg:x="17150" fg:w="2"/><text x="86.0086%" y="654.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.7586%" y="660" width="0.0100%" height="15" fill="rgb(242,65,0)" fg:x="17150" fg:w="2"/><text x="86.0086%" y="670.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (2 samples, 0.01%)</title><rect x="85.7736%" y="436" width="0.0100%" height="15" fill="rgb(235,201,12)" fg:x="17153" fg:w="2"/><text x="86.0236%" y="446.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (10 samples, 0.05%)</title><rect x="85.7386%" y="420" width="0.0500%" height="15" fill="rgb(233,161,9)" fg:x="17146" fg:w="10"/><text x="85.9886%" y="430.50"></text></g><g><title>parking_lot_core::parking_lot::park (11 samples, 0.06%)</title><rect x="85.7386%" y="388" width="0.0550%" height="15" fill="rgb(241,207,41)" fg:x="17146" fg:w="11"/><text x="85.9886%" y="398.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (11 samples, 0.06%)</title><rect x="85.7386%" y="404" width="0.0550%" height="15" fill="rgb(212,69,46)" fg:x="17146" fg:w="11"/><text x="85.9886%" y="414.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (15 samples, 0.08%)</title><rect x="85.7386%" y="324" width="0.0750%" height="15" fill="rgb(239,69,45)" fg:x="17146" fg:w="15"/><text x="85.9886%" y="334.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (15 samples, 0.08%)</title><rect x="85.7386%" y="340" width="0.0750%" height="15" fill="rgb(242,117,48)" fg:x="17146" fg:w="15"/><text x="85.9886%" y="350.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (15 samples, 0.08%)</title><rect x="85.7386%" y="356" width="0.0750%" height="15" fill="rgb(228,41,36)" fg:x="17146" fg:w="15"/><text x="85.9886%" y="366.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (15 samples, 0.08%)</title><rect x="85.7386%" y="372" width="0.0750%" height="15" fill="rgb(212,3,32)" fg:x="17146" fg:w="15"/><text x="85.9886%" y="382.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (4 samples, 0.02%)</title><rect x="85.7936%" y="388" width="0.0200%" height="15" fill="rgb(233,41,49)" fg:x="17157" fg:w="4"/><text x="86.0436%" y="398.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (3 samples, 0.02%)</title><rect x="85.7986%" y="404" width="0.0150%" height="15" fill="rgb(252,170,49)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="414.50"></text></g><g><title>__GI___sched_yield (3 samples, 0.02%)</title><rect x="85.7986%" y="420" width="0.0150%" height="15" fill="rgb(229,53,26)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="430.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.7986%" y="436" width="0.0150%" height="15" fill="rgb(217,157,12)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="446.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.7986%" y="452" width="0.0150%" height="15" fill="rgb(227,17,9)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="462.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.7986%" y="468" width="0.0150%" height="15" fill="rgb(218,84,12)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="478.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.7986%" y="484" width="0.0150%" height="15" fill="rgb(212,79,24)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="494.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.7986%" y="500" width="0.0150%" height="15" fill="rgb(217,222,37)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="510.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.7986%" y="516" width="0.0150%" height="15" fill="rgb(246,208,8)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="526.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.7986%" y="532" width="0.0150%" height="15" fill="rgb(244,133,10)" fg:x="17158" fg:w="3"/><text x="86.0486%" y="542.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.8036%" y="548" width="0.0100%" height="15" fill="rgb(209,219,41)" fg:x="17159" fg:w="2"/><text x="86.0536%" y="558.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.8036%" y="564" width="0.0100%" height="15" fill="rgb(253,175,45)" fg:x="17159" fg:w="2"/><text x="86.0536%" y="574.50"></text></g><g><title>syscall (2 samples, 0.01%)</title><rect x="85.8136%" y="372" width="0.0100%" height="15" fill="rgb(235,100,37)" fg:x="17161" fg:w="2"/><text x="86.0636%" y="382.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="85.8136%" y="388" width="0.0100%" height="15" fill="rgb(225,87,19)" fg:x="17161" fg:w="2"/><text x="86.0636%" y="398.50"></text></g><g><title>__check_pf (6 samples, 0.03%)</title><rect x="85.8236%" y="676" width="0.0300%" height="15" fill="rgb(217,152,17)" fg:x="17163" fg:w="6"/><text x="86.0736%" y="686.50"></text></g><g><title>make_request (3 samples, 0.02%)</title><rect x="85.8386%" y="692" width="0.0150%" height="15" fill="rgb(235,72,13)" fg:x="17166" fg:w="3"/><text x="86.0886%" y="702.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (10 samples, 0.05%)</title><rect x="85.8236%" y="596" width="0.0500%" height="15" fill="rgb(233,140,18)" fg:x="17163" fg:w="10"/><text x="86.0736%" y="606.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from (10 samples, 0.05%)</title><rect x="85.8236%" y="612" width="0.0500%" height="15" fill="rgb(207,212,28)" fg:x="17163" fg:w="10"/><text x="86.0736%" y="622.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (10 samples, 0.05%)</title><rect x="85.8236%" y="628" width="0.0500%" height="15" fill="rgb(220,130,25)" fg:x="17163" fg:w="10"/><text x="86.0736%" y="638.50"></text></g><g><title>&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (10 samples, 0.05%)</title><rect x="85.8236%" y="644" width="0.0500%" height="15" fill="rgb(205,55,34)" fg:x="17163" fg:w="10"/><text x="86.0736%" y="654.50"></text></g><g><title>__GI_getaddrinfo (10 samples, 0.05%)</title><rect x="85.8236%" y="660" width="0.0500%" height="15" fill="rgb(237,54,35)" fg:x="17163" fg:w="10"/><text x="86.0736%" y="670.50"></text></g><g><title>gaih_inet (4 samples, 0.02%)</title><rect x="85.8536%" y="676" width="0.0200%" height="15" fill="rgb(208,67,23)" fg:x="17169" fg:w="4"/><text x="86.1036%" y="686.50"></text></g><g><title>tokio::net::addr::_&lt;impl tokio::net::addr::sealed::ToSocketAddrsPriv for (&amp;str,u16)&gt;::to_socket_addrs::_{{closure}} (11 samples, 0.06%)</title><rect x="85.8236%" y="564" width="0.0550%" height="15" fill="rgb(206,207,50)" fg:x="17163" fg:w="11"/><text x="86.0736%" y="574.50"></text></g><g><title>&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (11 samples, 0.06%)</title><rect x="85.8236%" y="580" width="0.0550%" height="15" fill="rgb(213,211,42)" fg:x="17163" fg:w="11"/><text x="86.0736%" y="590.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.8886%" y="996" width="0.0200%" height="15" fill="rgb(252,197,50)" fg:x="17176" fg:w="4"/><text x="86.1386%" y="1006.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.8886%" y="1012" width="0.0200%" height="15" fill="rgb(251,211,41)" fg:x="17176" fg:w="4"/><text x="86.1386%" y="1022.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.8886%" y="1028" width="0.0200%" height="15" fill="rgb(229,211,5)" fg:x="17176" fg:w="4"/><text x="86.1386%" y="1038.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.8886%" y="1044" width="0.0200%" height="15" fill="rgb(239,36,31)" fg:x="17176" fg:w="4"/><text x="86.1386%" y="1054.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.8886%" y="1060" width="0.0200%" height="15" fill="rgb(248,67,31)" fg:x="17176" fg:w="4"/><text x="86.1386%" y="1070.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="85.8886%" y="1076" width="0.0200%" height="15" fill="rgb(249,55,44)" fg:x="17176" fg:w="4"/><text x="86.1386%" y="1086.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="85.8936%" y="1092" width="0.0150%" height="15" fill="rgb(216,82,12)" fg:x="17177" fg:w="3"/><text x="86.1436%" y="1102.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.04%)</title><rect x="85.8786%" y="612" width="0.0350%" height="15" fill="rgb(242,174,1)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="622.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.04%)</title><rect x="85.8786%" y="628" width="0.0350%" height="15" fill="rgb(208,120,29)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="638.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime::_{{closure}} (7 samples, 0.04%)</title><rect x="85.8786%" y="644" width="0.0350%" height="15" fill="rgb(221,105,43)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="654.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (7 samples, 0.04%)</title><rect x="85.8786%" y="660" width="0.0350%" height="15" fill="rgb(234,124,22)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="670.50"></text></g><g><title>core::ops::function::FnOnce::call_once (7 samples, 0.04%)</title><rect x="85.8786%" y="676" width="0.0350%" height="15" fill="rgb(212,23,30)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="686.50"></text></g><g><title>tokio::util::rand::FastRand::new (7 samples, 0.04%)</title><rect x="85.8786%" y="692" width="0.0350%" height="15" fill="rgb(219,122,53)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="702.50"></text></g><g><title>tokio::util::rand::RngSeed::new (7 samples, 0.04%)</title><rect x="85.8786%" y="708" width="0.0350%" height="15" fill="rgb(248,84,24)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="718.50"></text></g><g><title>tokio::loom::std::rand::seed (7 samples, 0.04%)</title><rect x="85.8786%" y="724" width="0.0350%" height="15" fill="rgb(245,115,18)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="734.50"></text></g><g><title>std::collections::hash::map::RandomState::new (7 samples, 0.04%)</title><rect x="85.8786%" y="740" width="0.0350%" height="15" fill="rgb(227,176,51)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="750.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (7 samples, 0.04%)</title><rect x="85.8786%" y="756" width="0.0350%" height="15" fill="rgb(229,63,42)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="766.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (7 samples, 0.04%)</title><rect x="85.8786%" y="772" width="0.0350%" height="15" fill="rgb(247,202,24)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="782.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit (7 samples, 0.04%)</title><rect x="85.8786%" y="788" width="0.0350%" height="15" fill="rgb(244,173,20)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="798.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (7 samples, 0.04%)</title><rect x="85.8786%" y="804" width="0.0350%" height="15" fill="rgb(242,81,47)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="814.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (7 samples, 0.04%)</title><rect x="85.8786%" y="820" width="0.0350%" height="15" fill="rgb(231,185,54)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="830.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::initialize (7 samples, 0.04%)</title><rect x="85.8786%" y="836" width="0.0350%" height="15" fill="rgb(243,55,32)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="846.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__getit::_{{closure}} (7 samples, 0.04%)</title><rect x="85.8786%" y="852" width="0.0350%" height="15" fill="rgb(208,167,19)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="862.50"></text></g><g><title>std::collections::hash::map::RandomState::new::KEYS::__init (7 samples, 0.04%)</title><rect x="85.8786%" y="868" width="0.0350%" height="15" fill="rgb(231,72,35)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="878.50"></text></g><g><title>std::sys::unix::rand::hashmap_random_keys (7 samples, 0.04%)</title><rect x="85.8786%" y="884" width="0.0350%" height="15" fill="rgb(250,173,51)" fg:x="17174" fg:w="7"/><text x="86.1286%" y="894.50"></text></g><g><title>std::sys::unix::rand::imp::fill_bytes (6 samples, 0.03%)</title><rect x="85.8836%" y="900" width="0.0300%" height="15" fill="rgb(209,5,22)" fg:x="17175" fg:w="6"/><text x="86.1336%" y="910.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom_fill_bytes (6 samples, 0.03%)</title><rect x="85.8836%" y="916" width="0.0300%" height="15" fill="rgb(250,174,19)" fg:x="17175" fg:w="6"/><text x="86.1336%" y="926.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom (6 samples, 0.03%)</title><rect x="85.8836%" y="932" width="0.0300%" height="15" fill="rgb(217,3,49)" fg:x="17175" fg:w="6"/><text x="86.1336%" y="942.50"></text></g><g><title>std::sys::unix::rand::imp::getrandom::getrandom (6 samples, 0.03%)</title><rect x="85.8836%" y="948" width="0.0300%" height="15" fill="rgb(218,225,5)" fg:x="17175" fg:w="6"/><text x="86.1336%" y="958.50"></text></g><g><title>__GI___getrandom (6 samples, 0.03%)</title><rect x="85.8836%" y="964" width="0.0300%" height="15" fill="rgb(236,89,11)" fg:x="17175" fg:w="6"/><text x="86.1336%" y="974.50"></text></g><g><title>__GI___getrandom (5 samples, 0.03%)</title><rect x="85.8886%" y="980" width="0.0250%" height="15" fill="rgb(206,33,28)" fg:x="17176" fg:w="5"/><text x="86.1386%" y="990.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="85.9636%" y="676" width="0.0100%" height="15" fill="rgb(241,56,42)" fg:x="17191" fg:w="2"/><text x="86.2136%" y="686.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (20 samples, 0.10%)</title><rect x="86.0336%" y="692" width="0.1000%" height="15" fill="rgb(222,44,11)" fg:x="17205" fg:w="20"/><text x="86.2836%" y="702.50"></text></g><g><title>std::time::Instant::duration_since (14 samples, 0.07%)</title><rect x="86.0636%" y="708" width="0.0700%" height="15" fill="rgb(234,111,20)" fg:x="17211" fg:w="14"/><text x="86.3136%" y="718.50"></text></g><g><title>std::time::Instant::checked_duration_since (14 samples, 0.07%)</title><rect x="86.0636%" y="724" width="0.0700%" height="15" fill="rgb(237,77,6)" fg:x="17211" fg:w="14"/><text x="86.3136%" y="734.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (14 samples, 0.07%)</title><rect x="86.0636%" y="740" width="0.0700%" height="15" fill="rgb(235,111,23)" fg:x="17211" fg:w="14"/><text x="86.3136%" y="750.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (13 samples, 0.07%)</title><rect x="86.0686%" y="756" width="0.0650%" height="15" fill="rgb(251,135,29)" fg:x="17212" fg:w="13"/><text x="86.3186%" y="766.50"></text></g><g><title>core::time::Duration::new (3 samples, 0.02%)</title><rect x="86.1186%" y="772" width="0.0150%" height="15" fill="rgb(217,57,1)" fg:x="17222" fg:w="3"/><text x="86.3686%" y="782.50"></text></g><g><title>__floattidf (17 samples, 0.09%)</title><rect x="86.1336%" y="692" width="0.0850%" height="15" fill="rgb(249,119,31)" fg:x="17225" fg:w="17"/><text x="86.3836%" y="702.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (17 samples, 0.09%)</title><rect x="86.1336%" y="708" width="0.0850%" height="15" fill="rgb(233,164,33)" fg:x="17225" fg:w="17"/><text x="86.3836%" y="718.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (16 samples, 0.08%)</title><rect x="86.1386%" y="724" width="0.0800%" height="15" fill="rgb(250,217,43)" fg:x="17226" fg:w="16"/><text x="86.3886%" y="734.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (16 samples, 0.08%)</title><rect x="86.1386%" y="740" width="0.0800%" height="15" fill="rgb(232,154,50)" fg:x="17226" fg:w="16"/><text x="86.3886%" y="750.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.2086%" y="756" width="0.0100%" height="15" fill="rgb(227,190,8)" fg:x="17240" fg:w="2"/><text x="86.4586%" y="766.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.2086%" y="772" width="0.0100%" height="15" fill="rgb(209,217,32)" fg:x="17240" fg:w="2"/><text x="86.4586%" y="782.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.2086%" y="788" width="0.0100%" height="15" fill="rgb(243,203,50)" fg:x="17240" fg:w="2"/><text x="86.4586%" y="798.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.2086%" y="804" width="0.0100%" height="15" fill="rgb(232,152,27)" fg:x="17240" fg:w="2"/><text x="86.4586%" y="814.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.2086%" y="820" width="0.0100%" height="15" fill="rgb(240,34,29)" fg:x="17240" fg:w="2"/><text x="86.4586%" y="830.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.2086%" y="836" width="0.0100%" height="15" fill="rgb(215,185,52)" fg:x="17240" fg:w="2"/><text x="86.4586%" y="846.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.2086%" y="852" width="0.0100%" height="15" fill="rgb(240,89,49)" fg:x="17240" fg:w="2"/><text x="86.4586%" y="862.50"></text></g><g><title>exp_inline (16 samples, 0.08%)</title><rect x="86.3636%" y="740" width="0.0800%" height="15" fill="rgb(225,12,52)" fg:x="17271" fg:w="16"/><text x="86.6136%" y="750.50"></text></g><g><title>log_inline (10 samples, 0.05%)</title><rect x="86.4436%" y="740" width="0.0500%" height="15" fill="rgb(239,128,45)" fg:x="17287" fg:w="10"/><text x="86.6936%" y="750.50"></text></g><g><title>__ieee754_pow_fma (38 samples, 0.19%)</title><rect x="86.3136%" y="724" width="0.1900%" height="15" fill="rgb(211,78,47)" fg:x="17261" fg:w="38"/><text x="86.5636%" y="734.50"></text></g><g><title>top12 (2 samples, 0.01%)</title><rect x="86.4936%" y="740" width="0.0100%" height="15" fill="rgb(232,31,21)" fg:x="17297" fg:w="2"/><text x="86.7436%" y="750.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::powf (64 samples, 0.32%)</title><rect x="86.2236%" y="692" width="0.3200%" height="15" fill="rgb(222,168,14)" fg:x="17243" fg:w="64"/><text x="86.4736%" y="702.50"></text></g><g><title>__pow (62 samples, 0.31%)</title><rect x="86.2336%" y="708" width="0.3100%" height="15" fill="rgb(209,128,24)" fg:x="17245" fg:w="62"/><text x="86.4836%" y="718.50"></text></g><g><title>__pow_finite@GLIBC_2.15@plt (8 samples, 0.04%)</title><rect x="86.5037%" y="724" width="0.0400%" height="15" fill="rgb(249,35,13)" fg:x="17299" fg:w="8"/><text x="86.7537%" y="734.50"></text></g><g><title>&lt;std::sys::unix::time::Timespec as core::convert::From&lt;libc::unix::timespec&gt;&gt;::from (2 samples, 0.01%)</title><rect x="86.5587%" y="708" width="0.0100%" height="15" fill="rgb(218,7,2)" fg:x="17310" fg:w="2"/><text x="86.8087%" y="718.50"></text></g><g><title>std::sys::unix::time::Timespec::new (2 samples, 0.01%)</title><rect x="86.5587%" y="724" width="0.0100%" height="15" fill="rgb(238,107,27)" fg:x="17310" fg:w="2"/><text x="86.8087%" y="734.50"></text></g><g><title>[[vdso]] (11 samples, 0.06%)</title><rect x="86.7087%" y="740" width="0.0550%" height="15" fill="rgb(217,88,38)" fg:x="17340" fg:w="11"/><text x="86.9587%" y="750.50"></text></g><g><title>[[vdso]] (31 samples, 0.16%)</title><rect x="86.6137%" y="724" width="0.1550%" height="15" fill="rgb(230,207,0)" fg:x="17321" fg:w="31"/><text x="86.8637%" y="734.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (47 samples, 0.24%)</title><rect x="86.5437%" y="692" width="0.2350%" height="15" fill="rgb(249,64,54)" fg:x="17307" fg:w="47"/><text x="86.7937%" y="702.50"></text></g><g><title>__GI___clock_gettime (42 samples, 0.21%)</title><rect x="86.5687%" y="708" width="0.2100%" height="15" fill="rgb(231,7,11)" fg:x="17312" fg:w="42"/><text x="86.8187%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (160 samples, 0.80%)</title><rect x="85.9886%" y="676" width="0.8001%" height="15" fill="rgb(205,149,21)" fg:x="17196" fg:w="160"/><text x="86.2386%" y="686.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.01%)</title><rect x="86.7787%" y="692" width="0.0100%" height="15" fill="rgb(215,126,34)" fg:x="17354" fg:w="2"/><text x="87.0287%" y="702.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.01%)</title><rect x="86.7787%" y="708" width="0.0100%" height="15" fill="rgb(241,132,45)" fg:x="17354" fg:w="2"/><text x="87.0287%" y="718.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (5 samples, 0.03%)</title><rect x="86.7987%" y="692" width="0.0250%" height="15" fill="rgb(252,69,32)" fg:x="17358" fg:w="5"/><text x="87.0487%" y="702.50"></text></g><g><title>__GI___clock_gettime (5 samples, 0.03%)</title><rect x="86.7987%" y="708" width="0.0250%" height="15" fill="rgb(232,204,19)" fg:x="17358" fg:w="5"/><text x="87.0487%" y="718.50"></text></g><g><title>[[vdso]] (4 samples, 0.02%)</title><rect x="86.8037%" y="724" width="0.0200%" height="15" fill="rgb(249,15,47)" fg:x="17359" fg:w="4"/><text x="87.0537%" y="734.50"></text></g><g><title>[[vdso]] (4 samples, 0.02%)</title><rect x="86.8037%" y="740" width="0.0200%" height="15" fill="rgb(209,227,23)" fg:x="17359" fg:w="4"/><text x="87.0537%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (9 samples, 0.05%)</title><rect x="86.7887%" y="676" width="0.0450%" height="15" fill="rgb(248,92,24)" fg:x="17356" fg:w="9"/><text x="87.0387%" y="686.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.01%)</title><rect x="86.8237%" y="692" width="0.0100%" height="15" fill="rgb(247,59,2)" fg:x="17363" fg:w="2"/><text x="87.0737%" y="702.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.01%)</title><rect x="86.8237%" y="708" width="0.0100%" height="15" fill="rgb(221,30,5)" fg:x="17363" fg:w="2"/><text x="87.0737%" y="718.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="86.8487%" y="692" width="0.0100%" height="15" fill="rgb(208,108,53)" fg:x="17368" fg:w="2"/><text x="87.0987%" y="702.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="86.8487%" y="708" width="0.0100%" height="15" fill="rgb(211,183,26)" fg:x="17368" fg:w="2"/><text x="87.0987%" y="718.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="86.8487%" y="724" width="0.0100%" height="15" fill="rgb(232,132,4)" fg:x="17368" fg:w="2"/><text x="87.0987%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::end_processing_scheduled_tasks (4 samples, 0.02%)</title><rect x="86.8587%" y="692" width="0.0200%" height="15" fill="rgb(253,128,37)" fg:x="17370" fg:w="4"/><text x="87.1087%" y="702.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.01%)</title><rect x="86.8687%" y="708" width="0.0100%" height="15" fill="rgb(221,58,24)" fg:x="17372" fg:w="2"/><text x="87.1187%" y="718.50"></text></g><g><title>__GI___clock_gettime (2 samples, 0.01%)</title><rect x="86.8687%" y="724" width="0.0100%" height="15" fill="rgb(230,54,45)" fg:x="17372" fg:w="2"/><text x="87.1187%" y="734.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17hefcab1efb85dee80E.llvm.38889971964023245 (4 samples, 0.02%)</title><rect x="86.8887%" y="772" width="0.0200%" height="15" fill="rgb(254,21,18)" fg:x="17376" fg:w="4"/><text x="87.1387%" y="782.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (3 samples, 0.02%)</title><rect x="86.8937%" y="788" width="0.0150%" height="15" fill="rgb(221,108,0)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="798.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (3 samples, 0.02%)</title><rect x="86.8937%" y="804" width="0.0150%" height="15" fill="rgb(206,95,1)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="814.50"></text></g><g><title>epoll_wait (3 samples, 0.02%)</title><rect x="86.8937%" y="820" width="0.0150%" height="15" fill="rgb(237,52,5)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="830.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="86.8937%" y="836" width="0.0150%" height="15" fill="rgb(218,150,34)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="846.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="86.8937%" y="852" width="0.0150%" height="15" fill="rgb(235,194,28)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="862.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="86.8937%" y="868" width="0.0150%" height="15" fill="rgb(245,92,18)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="878.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="86.8937%" y="884" width="0.0150%" height="15" fill="rgb(253,203,53)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="894.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="86.8937%" y="900" width="0.0150%" height="15" fill="rgb(249,185,47)" fg:x="17377" fg:w="3"/><text x="87.1437%" y="910.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.8987%" y="916" width="0.0100%" height="15" fill="rgb(252,194,52)" fg:x="17378" fg:w="2"/><text x="87.1487%" y="926.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.8987%" y="932" width="0.0100%" height="15" fill="rgb(210,53,36)" fg:x="17378" fg:w="2"/><text x="87.1487%" y="942.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="86.8987%" y="948" width="0.0100%" height="15" fill="rgb(237,37,25)" fg:x="17378" fg:w="2"/><text x="87.1487%" y="958.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (3 samples, 0.02%)</title><rect x="86.9087%" y="772" width="0.0150%" height="15" fill="rgb(242,116,27)" fg:x="17380" fg:w="3"/><text x="87.1587%" y="782.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (3 samples, 0.02%)</title><rect x="86.9087%" y="788" width="0.0150%" height="15" fill="rgb(213,185,26)" fg:x="17380" fg:w="3"/><text x="87.1587%" y="798.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (3 samples, 0.02%)</title><rect x="86.9087%" y="804" width="0.0150%" height="15" fill="rgb(225,204,8)" fg:x="17380" fg:w="3"/><text x="87.1587%" y="814.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::maintenance (19 samples, 0.10%)</title><rect x="86.8337%" y="676" width="0.0950%" height="15" fill="rgb(254,111,37)" fg:x="17365" fg:w="19"/><text x="87.0837%" y="686.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (9 samples, 0.05%)</title><rect x="86.8837%" y="692" width="0.0450%" height="15" fill="rgb(242,35,9)" fg:x="17375" fg:w="9"/><text x="87.1337%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park_timeout (8 samples, 0.04%)</title><rect x="86.8887%" y="708" width="0.0400%" height="15" fill="rgb(232,138,49)" fg:x="17376" fg:w="8"/><text x="87.1387%" y="718.50"></text></g><g><title>tokio::runtime::driver::Driver::park_timeout (8 samples, 0.04%)</title><rect x="86.8887%" y="724" width="0.0400%" height="15" fill="rgb(247,56,4)" fg:x="17376" fg:w="8"/><text x="87.1387%" y="734.50"></text></g><g><title>tokio::runtime::driver::TimeDriver::park_timeout (8 samples, 0.04%)</title><rect x="86.8887%" y="740" width="0.0400%" height="15" fill="rgb(226,179,17)" fg:x="17376" fg:w="8"/><text x="87.1387%" y="750.50"></text></g><g><title>tokio::runtime::time::Driver::park_timeout (8 samples, 0.04%)</title><rect x="86.8887%" y="756" width="0.0400%" height="15" fill="rgb(216,163,45)" fg:x="17376" fg:w="8"/><text x="87.1387%" y="766.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.06%)</title><rect x="86.9587%" y="692" width="0.0550%" height="15" fill="rgb(211,157,3)" fg:x="17390" fg:w="11"/><text x="87.2087%" y="702.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (11 samples, 0.06%)</title><rect x="86.9587%" y="708" width="0.0550%" height="15" fill="rgb(234,44,20)" fg:x="17390" fg:w="11"/><text x="87.2087%" y="718.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (11 samples, 0.06%)</title><rect x="86.9587%" y="724" width="0.0550%" height="15" fill="rgb(254,138,23)" fg:x="17390" fg:w="11"/><text x="87.2087%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (2 samples, 0.01%)</title><rect x="87.0137%" y="692" width="0.0100%" height="15" fill="rgb(206,119,39)" fg:x="17401" fg:w="2"/><text x="87.2637%" y="702.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio::runtime::scheduler::multi_thread::park::Parker&gt;&gt; (3 samples, 0.02%)</title><rect x="87.0787%" y="708" width="0.0150%" height="15" fill="rgb(231,105,52)" fg:x="17414" fg:w="3"/><text x="87.3287%" y="718.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (12 samples, 0.06%)</title><rect x="87.0987%" y="740" width="0.0600%" height="15" fill="rgb(250,20,5)" fg:x="17418" fg:w="12"/><text x="87.3487%" y="750.50"></text></g><g><title>syscall (12 samples, 0.06%)</title><rect x="87.0987%" y="756" width="0.0600%" height="15" fill="rgb(215,198,30)" fg:x="17418" fg:w="12"/><text x="87.3487%" y="766.50"></text></g><g><title>[unknown] (12 samples, 0.06%)</title><rect x="87.0987%" y="772" width="0.0600%" height="15" fill="rgb(246,142,8)" fg:x="17418" fg:w="12"/><text x="87.3487%" y="782.50"></text></g><g><title>[unknown] (12 samples, 0.06%)</title><rect x="87.0987%" y="788" width="0.0600%" height="15" fill="rgb(243,26,38)" fg:x="17418" fg:w="12"/><text x="87.3487%" y="798.50"></text></g><g><title>[unknown] (12 samples, 0.06%)</title><rect x="87.0987%" y="804" width="0.0600%" height="15" fill="rgb(205,133,28)" fg:x="17418" fg:w="12"/><text x="87.3487%" y="814.50"></text></g><g><title>[unknown] (12 samples, 0.06%)</title><rect x="87.0987%" y="820" width="0.0600%" height="15" fill="rgb(212,34,0)" fg:x="17418" fg:w="12"/><text x="87.3487%" y="830.50"></text></g><g><title>[unknown] (12 samples, 0.06%)</title><rect x="87.0987%" y="836" width="0.0600%" height="15" fill="rgb(251,226,22)" fg:x="17418" fg:w="12"/><text x="87.3487%" y="846.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="87.1137%" y="852" width="0.0450%" height="15" fill="rgb(252,119,9)" fg:x="17421" fg:w="9"/><text x="87.3637%" y="862.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="87.1187%" y="868" width="0.0400%" height="15" fill="rgb(213,150,50)" fg:x="17422" fg:w="8"/><text x="87.3687%" y="878.50"></text></g><g><title>[unknown] (5 samples, 0.03%)</title><rect x="87.1337%" y="884" width="0.0250%" height="15" fill="rgb(212,24,39)" fg:x="17425" fg:w="5"/><text x="87.3837%" y="894.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="87.1487%" y="900" width="0.0100%" height="15" fill="rgb(213,46,39)" fg:x="17428" fg:w="2"/><text x="87.3987%" y="910.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="87.1487%" y="916" width="0.0100%" height="15" fill="rgb(239,106,12)" fg:x="17428" fg:w="2"/><text x="87.3987%" y="926.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="87.1487%" y="932" width="0.0100%" height="15" fill="rgb(249,229,21)" fg:x="17428" fg:w="2"/><text x="87.3987%" y="942.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (2 samples, 0.01%)</title><rect x="87.1587%" y="740" width="0.0100%" height="15" fill="rgb(212,158,3)" fg:x="17430" fg:w="2"/><text x="87.4087%" y="750.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (17 samples, 0.09%)</title><rect x="87.0937%" y="708" width="0.0850%" height="15" fill="rgb(253,26,48)" fg:x="17417" fg:w="17"/><text x="87.3437%" y="718.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (16 samples, 0.08%)</title><rect x="87.0987%" y="724" width="0.0800%" height="15" fill="rgb(238,178,20)" fg:x="17418" fg:w="16"/><text x="87.3487%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::defer::Defer::wake (5 samples, 0.03%)</title><rect x="87.1787%" y="708" width="0.0250%" height="15" fill="rgb(208,86,15)" fg:x="17434" fg:w="5"/><text x="87.4287%" y="718.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (5 samples, 0.03%)</title><rect x="87.1787%" y="724" width="0.0250%" height="15" fill="rgb(239,42,53)" fg:x="17434" fg:w="5"/><text x="87.4287%" y="734.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (5 samples, 0.03%)</title><rect x="87.1787%" y="740" width="0.0250%" height="15" fill="rgb(245,226,8)" fg:x="17434" fg:w="5"/><text x="87.4287%" y="750.50"></text></g><g><title>core::cell::BorrowRefMut::new (5 samples, 0.03%)</title><rect x="87.1787%" y="756" width="0.0250%" height="15" fill="rgb(216,176,32)" fg:x="17434" fg:w="5"/><text x="87.4287%" y="766.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.07%)</title><rect x="87.2637%" y="740" width="0.0700%" height="15" fill="rgb(231,186,21)" fg:x="17451" fg:w="14"/><text x="87.5137%" y="750.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (4 samples, 0.02%)</title><rect x="87.3687%" y="836" width="0.0200%" height="15" fill="rgb(205,95,49)" fg:x="17472" fg:w="4"/><text x="87.6187%" y="846.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (227 samples, 1.14%)</title><rect x="87.3887%" y="852" width="1.1351%" height="15" fill="rgb(217,145,8)" fg:x="17476" fg:w="227"/><text x="87.6387%" y="862.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (226 samples, 1.13%)</title><rect x="87.3937%" y="868" width="1.1301%" height="15" fill="rgb(239,144,48)" fg:x="17477" fg:w="226"/><text x="87.6437%" y="878.50"></text></g><g><title>syscall (226 samples, 1.13%)</title><rect x="87.3937%" y="884" width="1.1301%" height="15" fill="rgb(214,189,23)" fg:x="17477" fg:w="226"/><text x="87.6437%" y="894.50"></text></g><g><title>[unknown] (223 samples, 1.12%)</title><rect x="87.4087%" y="900" width="1.1151%" height="15" fill="rgb(229,157,17)" fg:x="17480" fg:w="223"/><text x="87.6587%" y="910.50"></text></g><g><title>[unknown] (217 samples, 1.09%)</title><rect x="87.4387%" y="916" width="1.0851%" height="15" fill="rgb(230,5,48)" fg:x="17486" fg:w="217"/><text x="87.6887%" y="926.50"></text></g><g><title>[unknown] (203 samples, 1.02%)</title><rect x="87.5088%" y="932" width="1.0151%" height="15" fill="rgb(224,156,48)" fg:x="17500" fg:w="203"/><text x="87.7588%" y="942.50"></text></g><g><title>[unknown] (196 samples, 0.98%)</title><rect x="87.5438%" y="948" width="0.9801%" height="15" fill="rgb(223,14,29)" fg:x="17507" fg:w="196"/><text x="87.7938%" y="958.50"></text></g><g><title>[unknown] (187 samples, 0.94%)</title><rect x="87.5888%" y="964" width="0.9351%" height="15" fill="rgb(229,96,36)" fg:x="17516" fg:w="187"/><text x="87.8388%" y="974.50"></text></g><g><title>[unknown] (168 samples, 0.84%)</title><rect x="87.6838%" y="980" width="0.8401%" height="15" fill="rgb(231,102,53)" fg:x="17535" fg:w="168"/><text x="87.9338%" y="990.50"></text></g><g><title>[unknown] (153 samples, 0.77%)</title><rect x="87.7588%" y="996" width="0.7651%" height="15" fill="rgb(210,77,38)" fg:x="17550" fg:w="153"/><text x="88.0088%" y="1006.50"></text></g><g><title>[unknown] (112 samples, 0.56%)</title><rect x="87.9638%" y="1012" width="0.5601%" height="15" fill="rgb(235,131,6)" fg:x="17591" fg:w="112"/><text x="88.2138%" y="1022.50"></text></g><g><title>[unknown] (94 samples, 0.47%)</title><rect x="88.0538%" y="1028" width="0.4700%" height="15" fill="rgb(252,55,38)" fg:x="17609" fg:w="94"/><text x="88.3038%" y="1038.50"></text></g><g><title>[unknown] (74 samples, 0.37%)</title><rect x="88.1538%" y="1044" width="0.3700%" height="15" fill="rgb(246,38,14)" fg:x="17629" fg:w="74"/><text x="88.4038%" y="1054.50"></text></g><g><title>[unknown] (53 samples, 0.27%)</title><rect x="88.2588%" y="1060" width="0.2650%" height="15" fill="rgb(242,27,5)" fg:x="17650" fg:w="53"/><text x="88.5088%" y="1070.50"></text></g><g><title>[unknown] (43 samples, 0.22%)</title><rect x="88.3088%" y="1076" width="0.2150%" height="15" fill="rgb(228,65,35)" fg:x="17660" fg:w="43"/><text x="88.5588%" y="1086.50"></text></g><g><title>[unknown] (21 samples, 0.11%)</title><rect x="88.4188%" y="1092" width="0.1050%" height="15" fill="rgb(245,93,11)" fg:x="17682" fg:w="21"/><text x="88.6688%" y="1102.50"></text></g><g><title>core::ops::function::FnOnce::call_once (6 samples, 0.03%)</title><rect x="88.5289%" y="852" width="0.0300%" height="15" fill="rgb(213,1,31)" fg:x="17704" fg:w="6"/><text x="88.7789%" y="862.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal::_{{closure}} (6 samples, 0.03%)</title><rect x="88.5289%" y="868" width="0.0300%" height="15" fill="rgb(237,205,14)" fg:x="17704" fg:w="6"/><text x="88.7789%" y="878.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (5 samples, 0.03%)</title><rect x="88.5339%" y="884" width="0.0250%" height="15" fill="rgb(232,118,45)" fg:x="17705" fg:w="5"/><text x="88.7839%" y="894.50"></text></g><g><title>parking_lot_core::parking_lot::hash (6 samples, 0.03%)</title><rect x="88.5639%" y="868" width="0.0300%" height="15" fill="rgb(218,5,6)" fg:x="17711" fg:w="6"/><text x="88.8139%" y="878.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (248 samples, 1.24%)</title><rect x="87.3887%" y="836" width="1.2401%" height="15" fill="rgb(251,87,51)" fg:x="17476" fg:w="248"/><text x="87.6387%" y="846.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket (14 samples, 0.07%)</title><rect x="88.5589%" y="852" width="0.0700%" height="15" fill="rgb(207,225,20)" fg:x="17710" fg:w="14"/><text x="88.8089%" y="862.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (7 samples, 0.04%)</title><rect x="88.5939%" y="868" width="0.0350%" height="15" fill="rgb(222,78,54)" fg:x="17717" fg:w="7"/><text x="88.8439%" y="878.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (261 samples, 1.31%)</title><rect x="87.3437%" y="756" width="1.3051%" height="15" fill="rgb(232,85,16)" fg:x="17467" fg:w="261"/><text x="87.5937%" y="766.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (261 samples, 1.31%)</title><rect x="87.3437%" y="772" width="1.3051%" height="15" fill="rgb(244,25,33)" fg:x="17467" fg:w="261"/><text x="87.5937%" y="782.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (261 samples, 1.31%)</title><rect x="87.3437%" y="788" width="1.3051%" height="15" fill="rgb(233,24,36)" fg:x="17467" fg:w="261"/><text x="87.5937%" y="798.50"></text></g><g><title>parking_lot_core::parking_lot::park (256 samples, 1.28%)</title><rect x="87.3687%" y="804" width="1.2801%" height="15" fill="rgb(253,49,54)" fg:x="17472" fg:w="256"/><text x="87.6187%" y="814.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (256 samples, 1.28%)</title><rect x="87.3687%" y="820" width="1.2801%" height="15" fill="rgb(245,12,22)" fg:x="17472" fg:w="256"/><text x="87.6187%" y="830.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.02%)</title><rect x="88.6289%" y="836" width="0.0200%" height="15" fill="rgb(253,141,28)" fg:x="17724" fg:w="4"/><text x="88.8789%" y="846.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (4 samples, 0.02%)</title><rect x="88.6289%" y="852" width="0.0200%" height="15" fill="rgb(225,207,27)" fg:x="17724" fg:w="4"/><text x="88.8789%" y="862.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (4 samples, 0.02%)</title><rect x="88.6289%" y="868" width="0.0200%" height="15" fill="rgb(220,84,2)" fg:x="17724" fg:w="4"/><text x="88.8789%" y="878.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (263 samples, 1.32%)</title><rect x="87.3387%" y="740" width="1.3151%" height="15" fill="rgb(224,37,37)" fg:x="17466" fg:w="263"/><text x="87.5887%" y="750.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="88.7539%" y="836" width="0.0100%" height="15" fill="rgb(220,143,18)" fg:x="17749" fg:w="2"/><text x="89.0039%" y="846.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,core::option::Option&lt;tokio::sync::watch::Receiver&lt;()&gt;&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="88.7539%" y="852" width="0.0100%" height="15" fill="rgb(210,88,33)" fg:x="17749" fg:w="2"/><text x="89.0039%" y="862.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="88.7539%" y="868" width="0.0100%" height="15" fill="rgb(219,87,51)" fg:x="17749" fg:w="2"/><text x="89.0039%" y="878.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (2 samples, 0.01%)</title><rect x="88.7539%" y="884" width="0.0100%" height="15" fill="rgb(211,7,35)" fg:x="17749" fg:w="2"/><text x="89.0039%" y="894.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.01%)</title><rect x="88.7639%" y="836" width="0.0100%" height="15" fill="rgb(232,77,2)" fg:x="17751" fg:w="2"/><text x="89.0139%" y="846.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.01%)</title><rect x="88.7639%" y="852" width="0.0100%" height="15" fill="rgb(249,94,25)" fg:x="17751" fg:w="2"/><text x="89.0139%" y="862.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.01%)</title><rect x="88.7639%" y="868" width="0.0100%" height="15" fill="rgb(215,112,2)" fg:x="17751" fg:w="2"/><text x="89.0139%" y="878.50"></text></g><g><title>tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (27 samples, 0.14%)</title><rect x="88.7189%" y="820" width="0.1350%" height="15" fill="rgb(226,115,48)" fg:x="17742" fg:w="27"/><text x="88.9689%" y="830.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::try_lock (16 samples, 0.08%)</title><rect x="88.7739%" y="836" width="0.0800%" height="15" fill="rgb(249,196,10)" fg:x="17753" fg:w="16"/><text x="89.0239%" y="846.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::try_lock (16 samples, 0.08%)</title><rect x="88.7739%" y="852" width="0.0800%" height="15" fill="rgb(237,109,14)" fg:x="17753" fg:w="16"/><text x="89.0239%" y="862.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::try_lock (16 samples, 0.08%)</title><rect x="88.7739%" y="868" width="0.0800%" height="15" fill="rgb(217,103,53)" fg:x="17753" fg:w="16"/><text x="89.0239%" y="878.50"></text></g><g><title>&lt;mio::event::events::Iter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.01%)</title><rect x="88.8939%" y="836" width="0.0100%" height="15" fill="rgb(244,137,9)" fg:x="17777" fg:w="2"/><text x="89.1439%" y="846.50"></text></g><g><title>mio::event::events::Events::iter (2 samples, 0.01%)</title><rect x="88.9089%" y="836" width="0.0100%" height="15" fill="rgb(227,201,3)" fg:x="17780" fg:w="2"/><text x="89.1589%" y="846.50"></text></g><g><title>mio::poll::Poll::poll (2 samples, 0.01%)</title><rect x="88.9189%" y="836" width="0.0100%" height="15" fill="rgb(243,94,6)" fg:x="17782" fg:w="2"/><text x="89.1689%" y="846.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.02%)</title><rect x="88.9639%" y="852" width="0.0150%" height="15" fill="rgb(235,118,5)" fg:x="17791" fg:w="3"/><text x="89.2139%" y="862.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select::_{{closure}} (3 samples, 0.02%)</title><rect x="88.9639%" y="868" width="0.0150%" height="15" fill="rgb(247,10,30)" fg:x="17791" fg:w="3"/><text x="89.2139%" y="878.50"></text></g><g><title>core::time::Duration::checked_add (3 samples, 0.02%)</title><rect x="88.9639%" y="884" width="0.0150%" height="15" fill="rgb(205,26,28)" fg:x="17791" fg:w="3"/><text x="89.2139%" y="894.50"></text></g><g><title>core::time::Duration::new (2 samples, 0.01%)</title><rect x="88.9689%" y="900" width="0.0100%" height="15" fill="rgb(206,99,35)" fg:x="17792" fg:w="2"/><text x="89.2189%" y="910.50"></text></g><g><title>[unknown] (268 samples, 1.34%)</title><rect x="89.0289%" y="868" width="1.3401%" height="15" fill="rgb(238,130,40)" fg:x="17804" fg:w="268"/><text x="89.2789%" y="878.50"></text></g><g><title>[unknown] (260 samples, 1.30%)</title><rect x="89.0689%" y="884" width="1.3001%" height="15" fill="rgb(224,126,31)" fg:x="17812" fg:w="260"/><text x="89.3189%" y="894.50"></text></g><g><title>[unknown] (252 samples, 1.26%)</title><rect x="89.1089%" y="900" width="1.2601%" height="15" fill="rgb(254,105,17)" fg:x="17820" fg:w="252"/><text x="89.3589%" y="910.50"></text></g><g><title>[unknown] (240 samples, 1.20%)</title><rect x="89.1689%" y="916" width="1.2001%" height="15" fill="rgb(216,87,36)" fg:x="17832" fg:w="240"/><text x="89.4189%" y="926.50"></text></g><g><title>[unknown] (216 samples, 1.08%)</title><rect x="89.2889%" y="932" width="1.0801%" height="15" fill="rgb(240,21,12)" fg:x="17856" fg:w="216"/><text x="89.5389%" y="942.50"></text></g><g><title>[unknown] (185 samples, 0.93%)</title><rect x="89.4439%" y="948" width="0.9251%" height="15" fill="rgb(245,192,34)" fg:x="17887" fg:w="185"/><text x="89.6939%" y="958.50"></text></g><g><title>[unknown] (125 samples, 0.63%)</title><rect x="89.7440%" y="964" width="0.6251%" height="15" fill="rgb(226,100,49)" fg:x="17947" fg:w="125"/><text x="89.9940%" y="974.50"></text></g><g><title>[unknown] (82 samples, 0.41%)</title><rect x="89.9590%" y="980" width="0.4100%" height="15" fill="rgb(245,188,27)" fg:x="17990" fg:w="82"/><text x="90.2090%" y="990.50"></text></g><g><title>[unknown] (59 samples, 0.30%)</title><rect x="90.0740%" y="996" width="0.2950%" height="15" fill="rgb(212,170,8)" fg:x="18013" fg:w="59"/><text x="90.3240%" y="1006.50"></text></g><g><title>[unknown] (41 samples, 0.21%)</title><rect x="90.1640%" y="1012" width="0.2050%" height="15" fill="rgb(217,113,29)" fg:x="18031" fg:w="41"/><text x="90.4140%" y="1022.50"></text></g><g><title>[unknown] (26 samples, 0.13%)</title><rect x="90.2390%" y="1028" width="0.1300%" height="15" fill="rgb(237,30,3)" fg:x="18046" fg:w="26"/><text x="90.4890%" y="1038.50"></text></g><g><title>[unknown] (17 samples, 0.09%)</title><rect x="90.2840%" y="1044" width="0.0850%" height="15" fill="rgb(227,19,28)" fg:x="18055" fg:w="17"/><text x="90.5340%" y="1054.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="90.3040%" y="1060" width="0.0650%" height="15" fill="rgb(239,172,45)" fg:x="18059" fg:w="13"/><text x="90.5540%" y="1070.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="90.3190%" y="1076" width="0.0500%" height="15" fill="rgb(254,55,39)" fg:x="18062" fg:w="10"/><text x="90.5690%" y="1086.50"></text></g><g><title>mio::sys::unix::selector::epoll::Selector::select (296 samples, 1.48%)</title><rect x="88.9289%" y="836" width="1.4801%" height="15" fill="rgb(249,208,12)" fg:x="17784" fg:w="296"/><text x="89.1789%" y="846.50"></text></g><g><title>epoll_wait (286 samples, 1.43%)</title><rect x="88.9789%" y="852" width="1.4301%" height="15" fill="rgb(240,52,13)" fg:x="17794" fg:w="286"/><text x="89.2289%" y="862.50"></text></g><g><title>__GI___pthread_enable_asynccancel (8 samples, 0.04%)</title><rect x="90.3690%" y="868" width="0.0400%" height="15" fill="rgb(252,149,13)" fg:x="18072" fg:w="8"/><text x="90.6190%" y="878.50"></text></g><g><title>tokio::io::ready::Ready::from_mio (2 samples, 0.01%)</title><rect x="90.4090%" y="836" width="0.0100%" height="15" fill="rgb(232,81,48)" fg:x="18080" fg:w="2"/><text x="90.6590%" y="846.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::set_readiness (4 samples, 0.02%)</title><rect x="90.4240%" y="836" width="0.0200%" height="15" fill="rgb(222,144,2)" fg:x="18083" fg:w="4"/><text x="90.6740%" y="846.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="90.4340%" y="852" width="0.0100%" height="15" fill="rgb(216,81,32)" fg:x="18085" fg:w="2"/><text x="90.6840%" y="862.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="90.4340%" y="868" width="0.0100%" height="15" fill="rgb(244,78,51)" fg:x="18085" fg:w="2"/><text x="90.6840%" y="878.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.02%)</title><rect x="90.4490%" y="852" width="0.0200%" height="15" fill="rgb(217,66,21)" fg:x="18088" fg:w="4"/><text x="90.6990%" y="862.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.02%)</title><rect x="90.4490%" y="868" width="0.0200%" height="15" fill="rgb(247,101,42)" fg:x="18088" fg:w="4"/><text x="90.6990%" y="878.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.02%)</title><rect x="90.4490%" y="884" width="0.0200%" height="15" fill="rgb(227,81,39)" fg:x="18088" fg:w="4"/><text x="90.6990%" y="894.50"></text></g><g><title>tokio::runtime::park::wake (4 samples, 0.02%)</title><rect x="90.4740%" y="884" width="0.0200%" height="15" fill="rgb(220,223,44)" fg:x="18093" fg:w="4"/><text x="90.7240%" y="894.50"></text></g><g><title>tokio::runtime::park::Inner::unpark (4 samples, 0.02%)</title><rect x="90.4740%" y="900" width="0.0200%" height="15" fill="rgb(205,218,2)" fg:x="18093" fg:w="4"/><text x="90.7240%" y="910.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::notify_one (3 samples, 0.02%)</title><rect x="90.4790%" y="916" width="0.0150%" height="15" fill="rgb(212,207,28)" fg:x="18094" fg:w="3"/><text x="90.7290%" y="926.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one (3 samples, 0.02%)</title><rect x="90.4790%" y="932" width="0.0150%" height="15" fill="rgb(224,12,41)" fg:x="18094" fg:w="3"/><text x="90.7290%" y="942.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (3 samples, 0.02%)</title><rect x="90.4790%" y="948" width="0.0150%" height="15" fill="rgb(216,118,12)" fg:x="18094" fg:w="3"/><text x="90.7290%" y="958.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (3 samples, 0.02%)</title><rect x="90.4790%" y="964" width="0.0150%" height="15" fill="rgb(252,97,46)" fg:x="18094" fg:w="3"/><text x="90.7290%" y="974.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.02%)</title><rect x="90.5091%" y="948" width="0.0200%" height="15" fill="rgb(244,206,19)" fg:x="18100" fg:w="4"/><text x="90.7591%" y="958.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (4 samples, 0.02%)</title><rect x="90.5091%" y="964" width="0.0200%" height="15" fill="rgb(231,84,31)" fg:x="18100" fg:w="4"/><text x="90.7591%" y="974.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (4 samples, 0.02%)</title><rect x="90.5091%" y="980" width="0.0200%" height="15" fill="rgb(244,133,0)" fg:x="18100" fg:w="4"/><text x="90.7591%" y="990.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (16 samples, 0.08%)</title><rect x="90.5091%" y="932" width="0.0800%" height="15" fill="rgb(223,15,50)" fg:x="18100" fg:w="16"/><text x="90.7591%" y="942.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (12 samples, 0.06%)</title><rect x="90.5291%" y="948" width="0.0600%" height="15" fill="rgb(250,118,49)" fg:x="18104" fg:w="12"/><text x="90.7791%" y="958.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (12 samples, 0.06%)</title><rect x="90.5291%" y="964" width="0.0600%" height="15" fill="rgb(248,25,38)" fg:x="18104" fg:w="12"/><text x="90.7791%" y="974.50"></text></g><g><title>tokio::runtime::context::with_scheduler (12 samples, 0.06%)</title><rect x="90.5291%" y="980" width="0.0600%" height="15" fill="rgb(215,70,14)" fg:x="18104" fg:w="12"/><text x="90.7791%" y="990.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (10 samples, 0.05%)</title><rect x="90.5391%" y="996" width="0.0500%" height="15" fill="rgb(215,28,15)" fg:x="18106" fg:w="10"/><text x="90.7891%" y="1006.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (10 samples, 0.05%)</title><rect x="90.5391%" y="1012" width="0.0500%" height="15" fill="rgb(243,6,28)" fg:x="18106" fg:w="10"/><text x="90.7891%" y="1022.50"></text></g><g><title>tokio::runtime::context::with_scheduler::_{{closure}} (10 samples, 0.05%)</title><rect x="90.5391%" y="1028" width="0.0500%" height="15" fill="rgb(222,130,1)" fg:x="18106" fg:w="10"/><text x="90.7891%" y="1038.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (10 samples, 0.05%)</title><rect x="90.5391%" y="1044" width="0.0500%" height="15" fill="rgb(236,166,44)" fg:x="18106" fg:w="10"/><text x="90.7891%" y="1054.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::_{{closure}} (9 samples, 0.05%)</title><rect x="90.5441%" y="1060" width="0.0450%" height="15" fill="rgb(221,108,14)" fg:x="18107" fg:w="9"/><text x="90.7941%" y="1070.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (9 samples, 0.05%)</title><rect x="90.5441%" y="1076" width="0.0450%" height="15" fill="rgb(252,3,45)" fg:x="18107" fg:w="9"/><text x="90.7941%" y="1086.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (8 samples, 0.04%)</title><rect x="90.5491%" y="1092" width="0.0400%" height="15" fill="rgb(237,68,30)" fg:x="18108" fg:w="8"/><text x="90.7991%" y="1102.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (22 samples, 0.11%)</title><rect x="90.5091%" y="916" width="0.1100%" height="15" fill="rgb(211,79,22)" fg:x="18100" fg:w="22"/><text x="90.7591%" y="926.50"></text></g><g><title>tokio::runtime::task::raw::schedule (6 samples, 0.03%)</title><rect x="90.5891%" y="932" width="0.0300%" height="15" fill="rgb(252,185,21)" fg:x="18116" fg:w="6"/><text x="90.8391%" y="942.50"></text></g><g><title>tokio::runtime::task::core::Header::get_scheduler (5 samples, 0.03%)</title><rect x="90.5941%" y="948" width="0.0250%" height="15" fill="rgb(225,189,26)" fg:x="18117" fg:w="5"/><text x="90.8441%" y="958.50"></text></g><g><title>tokio::runtime::task::state::State::load (4 samples, 0.02%)</title><rect x="90.6291%" y="948" width="0.0200%" height="15" fill="rgb(241,30,40)" fg:x="18124" fg:w="4"/><text x="90.8791%" y="958.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.02%)</title><rect x="90.6291%" y="964" width="0.0200%" height="15" fill="rgb(235,215,44)" fg:x="18124" fg:w="4"/><text x="90.8791%" y="974.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.02%)</title><rect x="90.6291%" y="980" width="0.0200%" height="15" fill="rgb(205,8,29)" fg:x="18124" fg:w="4"/><text x="90.8791%" y="990.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="90.6391%" y="996" width="0.0100%" height="15" fill="rgb(241,137,42)" fg:x="18126" fg:w="2"/><text x="90.8891%" y="1006.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="90.6391%" y="1012" width="0.0100%" height="15" fill="rgb(237,155,2)" fg:x="18126" fg:w="2"/><text x="90.8891%" y="1022.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="90.6391%" y="1028" width="0.0100%" height="15" fill="rgb(245,29,42)" fg:x="18126" fg:w="2"/><text x="90.8891%" y="1038.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="90.6391%" y="1044" width="0.0100%" height="15" fill="rgb(234,101,35)" fg:x="18126" fg:w="2"/><text x="90.8891%" y="1054.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="90.6391%" y="1060" width="0.0100%" height="15" fill="rgb(228,64,37)" fg:x="18126" fg:w="2"/><text x="90.8891%" y="1070.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="90.6391%" y="1076" width="0.0100%" height="15" fill="rgb(217,214,36)" fg:x="18126" fg:w="2"/><text x="90.8891%" y="1086.50"></text></g><g><title>tokio::runtime::io::driver::Driver::turn (360 samples, 1.80%)</title><rect x="88.8539%" y="820" width="1.8002%" height="15" fill="rgb(243,70,3)" fg:x="17769" fg:w="360"/><text x="89.1039%" y="830.50">t..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (42 samples, 0.21%)</title><rect x="90.4440%" y="836" width="0.2100%" height="15" fill="rgb(253,158,52)" fg:x="18087" fg:w="42"/><text x="90.6940%" y="846.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (36 samples, 0.18%)</title><rect x="90.4740%" y="852" width="0.1800%" height="15" fill="rgb(234,111,54)" fg:x="18093" fg:w="36"/><text x="90.7240%" y="862.50"></text></g><g><title>core::task::wake::Waker::wake (36 samples, 0.18%)</title><rect x="90.4740%" y="868" width="0.1800%" height="15" fill="rgb(217,70,32)" fg:x="18093" fg:w="36"/><text x="90.7240%" y="878.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (32 samples, 0.16%)</title><rect x="90.4940%" y="884" width="0.1600%" height="15" fill="rgb(234,18,33)" fg:x="18097" fg:w="32"/><text x="90.7440%" y="894.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (30 samples, 0.15%)</title><rect x="90.5041%" y="900" width="0.1500%" height="15" fill="rgb(234,12,49)" fg:x="18099" fg:w="30"/><text x="90.7541%" y="910.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (7 samples, 0.04%)</title><rect x="90.6191%" y="916" width="0.0350%" height="15" fill="rgb(236,10,21)" fg:x="18122" fg:w="7"/><text x="90.8691%" y="926.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (7 samples, 0.04%)</title><rect x="90.6191%" y="932" width="0.0350%" height="15" fill="rgb(248,182,45)" fg:x="18122" fg:w="7"/><text x="90.8691%" y="942.50"></text></g><g><title>_ZN5tokio7runtime4time6Driver13park_internal17hefcab1efb85dee80E.llvm.38889971964023245 (393 samples, 1.97%)</title><rect x="88.7089%" y="804" width="1.9652%" height="15" fill="rgb(217,95,36)" fg:x="17740" fg:w="393"/><text x="88.9589%" y="814.50">_..</text></g><g><title>tokio::runtime::signal::Driver::process (4 samples, 0.02%)</title><rect x="90.6541%" y="820" width="0.0200%" height="15" fill="rgb(212,110,31)" fg:x="18129" fg:w="4"/><text x="90.9041%" y="830.50"></text></g><g><title>tokio::runtime::io::driver::signal::&lt;impl tokio::runtime::io::driver::Driver&gt;::consume_signal_ready (4 samples, 0.02%)</title><rect x="90.6541%" y="836" width="0.0200%" height="15" fill="rgb(206,32,53)" fg:x="18129" fg:w="4"/><text x="90.9041%" y="846.50"></text></g><g><title>core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt;: 32]&gt; (31 samples, 0.16%)</title><rect x="90.6891%" y="820" width="0.1550%" height="15" fill="rgb(246,141,37)" fg:x="18136" fg:w="31"/><text x="90.9391%" y="830.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::task::wake::Waker&gt;&gt; (27 samples, 0.14%)</title><rect x="90.7091%" y="836" width="0.1350%" height="15" fill="rgb(219,16,7)" fg:x="18140" fg:w="27"/><text x="90.9591%" y="846.50"></text></g><g><title>tokio::runtime::time::Inner::lock (5 samples, 0.03%)</title><rect x="90.8441%" y="820" width="0.0250%" height="15" fill="rgb(230,205,45)" fg:x="18167" fg:w="5"/><text x="91.0941%" y="830.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (5 samples, 0.03%)</title><rect x="90.8441%" y="836" width="0.0250%" height="15" fill="rgb(231,43,49)" fg:x="18167" fg:w="5"/><text x="91.0941%" y="846.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (5 samples, 0.03%)</title><rect x="90.8441%" y="852" width="0.0250%" height="15" fill="rgb(212,106,34)" fg:x="18167" fg:w="5"/><text x="91.0941%" y="862.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 0.03%)</title><rect x="90.8441%" y="868" width="0.0250%" height="15" fill="rgb(206,83,17)" fg:x="18167" fg:w="5"/><text x="91.0941%" y="878.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll (7 samples, 0.04%)</title><rect x="90.8691%" y="820" width="0.0350%" height="15" fill="rgb(244,154,49)" fg:x="18172" fg:w="7"/><text x="91.1191%" y="830.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (7 samples, 0.04%)</title><rect x="90.8691%" y="836" width="0.0350%" height="15" fill="rgb(244,149,49)" fg:x="18172" fg:w="7"/><text x="91.1191%" y="846.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (5 samples, 0.03%)</title><rect x="90.8791%" y="852" width="0.0250%" height="15" fill="rgb(227,134,18)" fg:x="18174" fg:w="5"/><text x="91.1291%" y="862.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (2 samples, 0.01%)</title><rect x="90.8941%" y="868" width="0.0100%" height="15" fill="rgb(237,116,36)" fg:x="18177" fg:w="2"/><text x="91.1441%" y="878.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (61 samples, 0.31%)</title><rect x="90.6741%" y="804" width="0.3050%" height="15" fill="rgb(205,129,40)" fg:x="18133" fg:w="61"/><text x="90.9241%" y="814.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::poll_at (15 samples, 0.08%)</title><rect x="90.9041%" y="820" width="0.0750%" height="15" fill="rgb(236,178,4)" fg:x="18179" fg:w="15"/><text x="91.1541%" y="830.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (15 samples, 0.08%)</title><rect x="90.9041%" y="836" width="0.0750%" height="15" fill="rgb(251,76,53)" fg:x="18179" fg:w="15"/><text x="91.1541%" y="846.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (4 samples, 0.02%)</title><rect x="90.9591%" y="852" width="0.0200%" height="15" fill="rgb(242,92,40)" fg:x="18190" fg:w="4"/><text x="91.2091%" y="862.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (6 samples, 0.03%)</title><rect x="90.9941%" y="820" width="0.0300%" height="15" fill="rgb(209,45,30)" fg:x="18197" fg:w="6"/><text x="91.2441%" y="830.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.03%)</title><rect x="90.9941%" y="836" width="0.0300%" height="15" fill="rgb(218,157,36)" fg:x="18197" fg:w="6"/><text x="91.2441%" y="846.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.03%)</title><rect x="90.9941%" y="852" width="0.0300%" height="15" fill="rgb(222,186,16)" fg:x="18197" fg:w="6"/><text x="91.2441%" y="862.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (4 samples, 0.02%)</title><rect x="91.0241%" y="836" width="0.0200%" height="15" fill="rgb(254,72,35)" fg:x="18203" fg:w="4"/><text x="91.2741%" y="846.50"></text></g><g><title>tokio::runtime::driver::Handle::time (7 samples, 0.04%)</title><rect x="91.0241%" y="820" width="0.0350%" height="15" fill="rgb(224,25,35)" fg:x="18203" fg:w="7"/><text x="91.2741%" y="830.50"></text></g><g><title>core::option::Option&lt;T&gt;::expect (3 samples, 0.02%)</title><rect x="91.0441%" y="836" width="0.0150%" height="15" fill="rgb(206,135,52)" fg:x="18207" fg:w="3"/><text x="91.2941%" y="846.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (2 samples, 0.01%)</title><rect x="91.0591%" y="852" width="0.0100%" height="15" fill="rgb(229,174,47)" fg:x="18210" fg:w="2"/><text x="91.3091%" y="862.50"></text></g><g><title>[[vdso]] (3 samples, 0.02%)</title><rect x="91.1191%" y="916" width="0.0150%" height="15" fill="rgb(242,184,21)" fg:x="18222" fg:w="3"/><text x="91.3691%" y="926.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (14 samples, 0.07%)</title><rect x="91.0691%" y="884" width="0.0700%" height="15" fill="rgb(213,22,45)" fg:x="18212" fg:w="14"/><text x="91.3191%" y="894.50"></text></g><g><title>__GI___clock_gettime (12 samples, 0.06%)</title><rect x="91.0791%" y="900" width="0.0600%" height="15" fill="rgb(237,81,54)" fg:x="18214" fg:w="12"/><text x="91.3291%" y="910.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process (17 samples, 0.09%)</title><rect x="91.0591%" y="820" width="0.0850%" height="15" fill="rgb(248,177,18)" fg:x="18210" fg:w="17"/><text x="91.3091%" y="830.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (17 samples, 0.09%)</title><rect x="91.0591%" y="836" width="0.0850%" height="15" fill="rgb(254,31,16)" fg:x="18210" fg:w="17"/><text x="91.3091%" y="846.50"></text></g><g><title>tokio::time::clock::Clock::now (15 samples, 0.08%)</title><rect x="91.0691%" y="852" width="0.0750%" height="15" fill="rgb(235,20,31)" fg:x="18212" fg:w="15"/><text x="91.3191%" y="862.50"></text></g><g><title>tokio::time::clock::now (15 samples, 0.08%)</title><rect x="91.0691%" y="868" width="0.0750%" height="15" fill="rgb(240,56,43)" fg:x="18212" fg:w="15"/><text x="91.3191%" y="878.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::instant_to_tick (3 samples, 0.02%)</title><rect x="91.1441%" y="836" width="0.0150%" height="15" fill="rgb(237,197,51)" fg:x="18227" fg:w="3"/><text x="91.3941%" y="846.50"></text></g><g><title>tokio::time::instant::Instant::checked_duration_since (3 samples, 0.02%)</title><rect x="91.1441%" y="852" width="0.0150%" height="15" fill="rgb(241,162,44)" fg:x="18227" fg:w="3"/><text x="91.3941%" y="862.50"></text></g><g><title>std::time::Instant::checked_duration_since (3 samples, 0.02%)</title><rect x="91.1441%" y="868" width="0.0150%" height="15" fill="rgb(224,23,20)" fg:x="18227" fg:w="3"/><text x="91.3941%" y="878.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (3 samples, 0.02%)</title><rect x="91.1441%" y="884" width="0.0150%" height="15" fill="rgb(250,109,34)" fg:x="18227" fg:w="3"/><text x="91.3941%" y="894.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.02%)</title><rect x="91.1441%" y="900" width="0.0150%" height="15" fill="rgb(214,175,50)" fg:x="18227" fg:w="3"/><text x="91.3941%" y="910.50"></text></g><g><title>tokio::runtime::time::source::TimeSource::now (17 samples, 0.09%)</title><rect x="91.1441%" y="820" width="0.0850%" height="15" fill="rgb(213,182,5)" fg:x="18227" fg:w="17"/><text x="91.3941%" y="830.50"></text></g><g><title>tokio::time::clock::Clock::now (14 samples, 0.07%)</title><rect x="91.1591%" y="836" width="0.0700%" height="15" fill="rgb(209,199,19)" fg:x="18230" fg:w="14"/><text x="91.4091%" y="846.50"></text></g><g><title>tokio::time::clock::now (14 samples, 0.07%)</title><rect x="91.1591%" y="852" width="0.0700%" height="15" fill="rgb(236,224,42)" fg:x="18230" fg:w="14"/><text x="91.4091%" y="862.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (14 samples, 0.07%)</title><rect x="91.1591%" y="868" width="0.0700%" height="15" fill="rgb(246,226,29)" fg:x="18230" fg:w="14"/><text x="91.4091%" y="878.50"></text></g><g><title>__GI___clock_gettime (12 samples, 0.06%)</title><rect x="91.1691%" y="884" width="0.0600%" height="15" fill="rgb(227,223,11)" fg:x="18232" fg:w="12"/><text x="91.4191%" y="894.50"></text></g><g><title>[[vdso]] (10 samples, 0.05%)</title><rect x="91.1791%" y="900" width="0.0500%" height="15" fill="rgb(219,7,51)" fg:x="18234" fg:w="10"/><text x="91.4291%" y="910.50"></text></g><g><title>[[vdso]] (8 samples, 0.04%)</title><rect x="91.1891%" y="916" width="0.0400%" height="15" fill="rgb(245,167,10)" fg:x="18236" fg:w="8"/><text x="91.4391%" y="926.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (4 samples, 0.02%)</title><rect x="91.2491%" y="868" width="0.0200%" height="15" fill="rgb(237,224,16)" fg:x="18248" fg:w="4"/><text x="91.4991%" y="878.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_occupied_slot (6 samples, 0.03%)</title><rect x="91.2691%" y="868" width="0.0300%" height="15" fill="rgb(226,132,13)" fg:x="18252" fg:w="6"/><text x="91.5191%" y="878.50"></text></g><g><title>tokio::runtime::time::wheel::level::slot_range (2 samples, 0.01%)</title><rect x="91.2891%" y="884" width="0.0100%" height="15" fill="rgb(214,140,3)" fg:x="18256" fg:w="2"/><text x="91.5391%" y="894.50"></text></g><g><title>core::num::&lt;impl usize&gt;::pow (2 samples, 0.01%)</title><rect x="91.2891%" y="900" width="0.0100%" height="15" fill="rgb(221,177,4)" fg:x="18256" fg:w="2"/><text x="91.5391%" y="910.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::next_expiration (13 samples, 0.07%)</title><rect x="91.2441%" y="852" width="0.0650%" height="15" fill="rgb(238,139,3)" fg:x="18247" fg:w="13"/><text x="91.4941%" y="862.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_driver (532 samples, 2.66%)</title><rect x="88.6539%" y="740" width="2.6603%" height="15" fill="rgb(216,17,39)" fg:x="17729" fg:w="532"/><text x="88.9039%" y="750.50">to..</text></g><g><title>tokio::runtime::driver::Driver::park (526 samples, 2.63%)</title><rect x="88.6839%" y="756" width="2.6303%" height="15" fill="rgb(238,120,9)" fg:x="17735" fg:w="526"/><text x="88.9339%" y="766.50">to..</text></g><g><title>tokio::runtime::driver::TimeDriver::park (526 samples, 2.63%)</title><rect x="88.6839%" y="772" width="2.6303%" height="15" fill="rgb(244,92,53)" fg:x="17735" fg:w="526"/><text x="88.9339%" y="782.50">to..</text></g><g><title>tokio::runtime::time::Driver::park (521 samples, 2.61%)</title><rect x="88.7089%" y="788" width="2.6053%" height="15" fill="rgb(224,148,33)" fg:x="17740" fg:w="521"/><text x="88.9589%" y="798.50">to..</text></g><g><title>tokio::runtime::time::Driver::park_internal (67 samples, 0.34%)</title><rect x="90.9791%" y="804" width="0.3350%" height="15" fill="rgb(243,6,36)" fg:x="18194" fg:w="67"/><text x="91.2291%" y="814.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration_time (17 samples, 0.09%)</title><rect x="91.2291%" y="820" width="0.0850%" height="15" fill="rgb(230,102,11)" fg:x="18244" fg:w="17"/><text x="91.4791%" y="830.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (16 samples, 0.08%)</title><rect x="91.2341%" y="836" width="0.0800%" height="15" fill="rgb(234,148,36)" fg:x="18245" fg:w="16"/><text x="91.4841%" y="846.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (823 samples, 4.12%)</title><rect x="87.2037%" y="708" width="4.1154%" height="15" fill="rgb(251,153,25)" fg:x="17439" fg:w="823"/><text x="87.4537%" y="718.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (823 samples, 4.12%)</title><rect x="87.2037%" y="724" width="4.1154%" height="15" fill="rgb(215,129,8)" fg:x="17439" fg:w="823"/><text x="87.4537%" y="734.50">toki..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (3 samples, 0.02%)</title><rect x="91.3241%" y="708" width="0.0150%" height="15" fill="rgb(224,128,35)" fg:x="18263" fg:w="3"/><text x="91.5741%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (3 samples, 0.02%)</title><rect x="91.3241%" y="724" width="0.0150%" height="15" fill="rgb(237,56,52)" fg:x="18263" fg:w="3"/><text x="91.5741%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (2 samples, 0.01%)</title><rect x="91.3291%" y="740" width="0.0100%" height="15" fill="rgb(234,213,19)" fg:x="18264" fg:w="2"/><text x="91.5791%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (863 samples, 4.32%)</title><rect x="87.0287%" y="692" width="4.3154%" height="15" fill="rgb(252,82,23)" fg:x="17404" fg:w="863"/><text x="87.2787%" y="702.50">tokio..</text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (2 samples, 0.01%)</title><rect x="91.3741%" y="708" width="0.0100%" height="15" fill="rgb(254,201,21)" fg:x="18273" fg:w="2"/><text x="91.6241%" y="718.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (2 samples, 0.01%)</title><rect x="91.3741%" y="724" width="0.0100%" height="15" fill="rgb(250,186,11)" fg:x="18273" fg:w="2"/><text x="91.6241%" y="734.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="91.3741%" y="740" width="0.0100%" height="15" fill="rgb(211,174,5)" fg:x="18273" fg:w="2"/><text x="91.6241%" y="750.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (2 samples, 0.01%)</title><rect x="91.3741%" y="756" width="0.0100%" height="15" fill="rgb(214,121,10)" fg:x="18273" fg:w="2"/><text x="91.6241%" y="766.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::maintenance (9 samples, 0.05%)</title><rect x="91.3441%" y="692" width="0.0450%" height="15" fill="rgb(241,66,2)" fg:x="18267" fg:w="9"/><text x="91.5941%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (8 samples, 0.04%)</title><rect x="91.3991%" y="708" width="0.0400%" height="15" fill="rgb(220,167,19)" fg:x="18278" fg:w="8"/><text x="91.6491%" y="718.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (7 samples, 0.04%)</title><rect x="91.4041%" y="724" width="0.0350%" height="15" fill="rgb(231,54,50)" fg:x="18279" fg:w="7"/><text x="91.6541%" y="734.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (7 samples, 0.04%)</title><rect x="91.4041%" y="740" width="0.0350%" height="15" fill="rgb(239,217,53)" fg:x="18279" fg:w="7"/><text x="91.6541%" y="750.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (7 samples, 0.04%)</title><rect x="91.4041%" y="756" width="0.0350%" height="15" fill="rgb(248,8,0)" fg:x="18279" fg:w="7"/><text x="91.6541%" y="766.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="772" width="0.0100%" height="15" fill="rgb(229,118,37)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="782.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="788" width="0.0100%" height="15" fill="rgb(253,223,43)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="798.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="804" width="0.0100%" height="15" fill="rgb(211,77,36)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="814.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="820" width="0.0100%" height="15" fill="rgb(219,3,53)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="830.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="836" width="0.0100%" height="15" fill="rgb(244,45,42)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="846.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="852" width="0.0100%" height="15" fill="rgb(225,95,27)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="862.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="868" width="0.0100%" height="15" fill="rgb(207,74,8)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="878.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="884" width="0.0100%" height="15" fill="rgb(243,63,36)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="894.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="900" width="0.0100%" height="15" fill="rgb(211,180,12)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="910.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="916" width="0.0100%" height="15" fill="rgb(254,166,49)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="926.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="932" width="0.0100%" height="15" fill="rgb(205,19,0)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="942.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="948" width="0.0100%" height="15" fill="rgb(224,172,32)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="958.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="964" width="0.0100%" height="15" fill="rgb(254,136,30)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="974.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="980" width="0.0100%" height="15" fill="rgb(246,19,35)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="990.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.4291%" y="996" width="0.0100%" height="15" fill="rgb(219,24,36)" fg:x="18284" fg:w="2"/><text x="91.6791%" y="1006.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.03%)</title><rect x="91.4541%" y="724" width="0.0250%" height="15" fill="rgb(251,55,1)" fg:x="18289" fg:w="5"/><text x="91.7041%" y="734.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.03%)</title><rect x="91.4541%" y="740" width="0.0250%" height="15" fill="rgb(218,117,39)" fg:x="18289" fg:w="5"/><text x="91.7041%" y="750.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5 samples, 0.03%)</title><rect x="91.4541%" y="756" width="0.0250%" height="15" fill="rgb(248,169,11)" fg:x="18289" fg:w="5"/><text x="91.7041%" y="766.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (21 samples, 0.11%)</title><rect x="91.3891%" y="692" width="0.1050%" height="15" fill="rgb(244,40,44)" fg:x="18276" fg:w="21"/><text x="91.6391%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::unpark_worker_by_id (11 samples, 0.06%)</title><rect x="91.4391%" y="708" width="0.0550%" height="15" fill="rgb(234,62,37)" fg:x="18286" fg:w="11"/><text x="91.6891%" y="718.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (3 samples, 0.02%)</title><rect x="91.4791%" y="724" width="0.0150%" height="15" fill="rgb(207,117,42)" fg:x="18294" fg:w="3"/><text x="91.7291%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (3 samples, 0.02%)</title><rect x="91.4791%" y="740" width="0.0150%" height="15" fill="rgb(213,43,2)" fg:x="18294" fg:w="3"/><text x="91.7291%" y="750.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="91.4791%" y="756" width="0.0150%" height="15" fill="rgb(244,202,51)" fg:x="18294" fg:w="3"/><text x="91.7291%" y="766.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (3 samples, 0.02%)</title><rect x="91.4791%" y="772" width="0.0150%" height="15" fill="rgb(253,174,46)" fg:x="18294" fg:w="3"/><text x="91.7291%" y="782.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.03%)</title><rect x="91.5542%" y="724" width="0.0250%" height="15" fill="rgb(251,23,1)" fg:x="18309" fg:w="5"/><text x="91.8042%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (8 samples, 0.04%)</title><rect x="91.5792%" y="724" width="0.0400%" height="15" fill="rgb(253,26,1)" fg:x="18314" fg:w="8"/><text x="91.8292%" y="734.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::scheduler::multi_thread::worker::Synced&gt;&gt; (8 samples, 0.04%)</title><rect x="91.5792%" y="740" width="0.0400%" height="15" fill="rgb(216,89,31)" fg:x="18314" fg:w="8"/><text x="91.8292%" y="750.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.04%)</title><rect x="91.5792%" y="756" width="0.0400%" height="15" fill="rgb(209,109,5)" fg:x="18314" fg:w="8"/><text x="91.8292%" y="766.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (8 samples, 0.04%)</title><rect x="91.5792%" y="772" width="0.0400%" height="15" fill="rgb(229,63,13)" fg:x="18314" fg:w="8"/><text x="91.8292%" y="782.50"></text></g><g><title>syscall (2 samples, 0.01%)</title><rect x="91.6092%" y="788" width="0.0100%" height="15" fill="rgb(238,137,54)" fg:x="18320" fg:w="2"/><text x="91.8592%" y="798.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.6092%" y="804" width="0.0100%" height="15" fill="rgb(228,1,9)" fg:x="18320" fg:w="2"/><text x="91.8592%" y="814.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="91.6092%" y="820" width="0.0100%" height="15" fill="rgb(249,120,48)" fg:x="18320" fg:w="2"/><text x="91.8592%" y="830.50"></text></g><g><title>parking_lot_core::spinwait::cpu_relax (2 samples, 0.01%)</title><rect x="91.6542%" y="804" width="0.0100%" height="15" fill="rgb(209,72,36)" fg:x="18329" fg:w="2"/><text x="91.9042%" y="814.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.01%)</title><rect x="91.6542%" y="820" width="0.0100%" height="15" fill="rgb(247,98,49)" fg:x="18329" fg:w="2"/><text x="91.9042%" y="830.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.01%)</title><rect x="91.6542%" y="836" width="0.0100%" height="15" fill="rgb(233,75,36)" fg:x="18329" fg:w="2"/><text x="91.9042%" y="846.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::transition_worker_to_parked (33 samples, 0.17%)</title><rect x="91.5042%" y="708" width="0.1650%" height="15" fill="rgb(225,14,24)" fg:x="18299" fg:w="33"/><text x="91.7542%" y="718.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (10 samples, 0.05%)</title><rect x="91.6192%" y="724" width="0.0500%" height="15" fill="rgb(237,193,20)" fg:x="18322" fg:w="10"/><text x="91.8692%" y="734.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (10 samples, 0.05%)</title><rect x="91.6192%" y="740" width="0.0500%" height="15" fill="rgb(239,122,19)" fg:x="18322" fg:w="10"/><text x="91.8692%" y="750.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (10 samples, 0.05%)</title><rect x="91.6192%" y="756" width="0.0500%" height="15" fill="rgb(231,220,10)" fg:x="18322" fg:w="10"/><text x="91.8692%" y="766.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (3 samples, 0.02%)</title><rect x="91.6542%" y="772" width="0.0150%" height="15" fill="rgb(220,66,15)" fg:x="18329" fg:w="3"/><text x="91.9042%" y="782.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (3 samples, 0.02%)</title><rect x="91.6542%" y="788" width="0.0150%" height="15" fill="rgb(215,171,52)" fg:x="18329" fg:w="3"/><text x="91.9042%" y="798.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.02%)</title><rect x="91.6892%" y="724" width="0.0150%" height="15" fill="rgb(241,169,50)" fg:x="18336" fg:w="3"/><text x="91.9392%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::inject::shared::Shared&lt;T&gt;::is_empty (5 samples, 0.03%)</title><rect x="91.7042%" y="724" width="0.0250%" height="15" fill="rgb(236,189,0)" fg:x="18339" fg:w="5"/><text x="91.9542%" y="734.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.01%)</title><rect x="91.7342%" y="772" width="0.0100%" height="15" fill="rgb(217,147,20)" fg:x="18345" fg:w="2"/><text x="91.9842%" y="782.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="91.7342%" y="788" width="0.0100%" height="15" fill="rgb(206,188,39)" fg:x="18345" fg:w="2"/><text x="91.9842%" y="798.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_if_work_pending (17 samples, 0.09%)</title><rect x="91.6742%" y="708" width="0.0850%" height="15" fill="rgb(227,118,25)" fg:x="18333" fg:w="17"/><text x="91.9242%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::is_empty (6 samples, 0.03%)</title><rect x="91.7292%" y="724" width="0.0300%" height="15" fill="rgb(248,171,40)" fg:x="18344" fg:w="6"/><text x="91.9792%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (5 samples, 0.03%)</title><rect x="91.7342%" y="740" width="0.0250%" height="15" fill="rgb(251,90,54)" fg:x="18345" fg:w="5"/><text x="91.9842%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (5 samples, 0.03%)</title><rect x="91.7342%" y="756" width="0.0250%" height="15" fill="rgb(234,11,46)" fg:x="18345" fg:w="5"/><text x="91.9842%" y="766.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (3 samples, 0.02%)</title><rect x="91.7442%" y="772" width="0.0150%" height="15" fill="rgb(229,134,13)" fg:x="18347" fg:w="3"/><text x="91.9942%" y="782.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="91.7442%" y="788" width="0.0150%" height="15" fill="rgb(223,129,3)" fg:x="18347" fg:w="3"/><text x="91.9942%" y="798.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (5 samples, 0.03%)</title><rect x="91.7592%" y="724" width="0.0250%" height="15" fill="rgb(221,124,13)" fg:x="18350" fg:w="5"/><text x="92.0092%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (974 samples, 4.87%)</title><rect x="86.9287%" y="676" width="4.8705%" height="15" fill="rgb(234,3,18)" fg:x="17384" fg:w="974"/><text x="87.1787%" y="686.50">tokio:..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_to_parked (61 samples, 0.31%)</title><rect x="91.4941%" y="692" width="0.3050%" height="15" fill="rgb(249,199,20)" fg:x="18297" fg:w="61"/><text x="91.7441%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::has_tasks (8 samples, 0.04%)</title><rect x="91.7592%" y="708" width="0.0400%" height="15" fill="rgb(224,134,6)" fg:x="18350" fg:w="8"/><text x="92.0092%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::has_tasks (3 samples, 0.02%)</title><rect x="91.7842%" y="724" width="0.0150%" height="15" fill="rgb(254,83,26)" fg:x="18355" fg:w="3"/><text x="92.0342%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::is_empty (3 samples, 0.02%)</title><rect x="91.7842%" y="740" width="0.0150%" height="15" fill="rgb(217,88,9)" fg:x="18355" fg:w="3"/><text x="92.0342%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Inner&lt;T&gt;::len (3 samples, 0.02%)</title><rect x="91.7842%" y="756" width="0.0150%" height="15" fill="rgb(225,73,2)" fg:x="18355" fg:w="3"/><text x="92.0342%" y="766.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (3 samples, 0.02%)</title><rect x="91.7842%" y="772" width="0.0150%" height="15" fill="rgb(226,44,39)" fg:x="18355" fg:w="3"/><text x="92.0342%" y="782.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="91.7842%" y="788" width="0.0150%" height="15" fill="rgb(228,53,17)" fg:x="18355" fg:w="3"/><text x="92.0342%" y="798.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (5 samples, 0.03%)</title><rect x="91.8042%" y="676" width="0.0250%" height="15" fill="rgb(212,27,27)" fg:x="18359" fg:w="5"/><text x="92.0542%" y="686.50"></text></g><g><title>core::cell::BorrowRefMut::new (7 samples, 0.04%)</title><rect x="91.8392%" y="772" width="0.0350%" height="15" fill="rgb(241,50,6)" fg:x="18366" fg:w="7"/><text x="92.0892%" y="782.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (8 samples, 0.04%)</title><rect x="91.8392%" y="740" width="0.0400%" height="15" fill="rgb(225,28,51)" fg:x="18366" fg:w="8"/><text x="92.0892%" y="750.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (8 samples, 0.04%)</title><rect x="91.8392%" y="756" width="0.0400%" height="15" fill="rgb(215,33,16)" fg:x="18366" fg:w="8"/><text x="92.0892%" y="766.50"></text></g><g><title>core::ptr::read (2 samples, 0.01%)</title><rect x="91.8792%" y="772" width="0.0100%" height="15" fill="rgb(243,40,39)" fg:x="18374" fg:w="2"/><text x="92.1292%" y="782.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (5 samples, 0.03%)</title><rect x="91.8792%" y="740" width="0.0250%" height="15" fill="rgb(225,11,42)" fg:x="18374" fg:w="5"/><text x="92.1292%" y="750.50"></text></g><g><title>core::mem::replace (5 samples, 0.03%)</title><rect x="91.8792%" y="756" width="0.0250%" height="15" fill="rgb(241,220,38)" fg:x="18374" fg:w="5"/><text x="92.1292%" y="766.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="91.8892%" y="772" width="0.0150%" height="15" fill="rgb(244,52,35)" fg:x="18376" fg:w="3"/><text x="92.1392%" y="782.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::reset_lifo_enabled (5 samples, 0.03%)</title><rect x="91.9092%" y="740" width="0.0250%" height="15" fill="rgb(246,42,46)" fg:x="18380" fg:w="5"/><text x="92.1592%" y="750.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="91.9242%" y="756" width="0.0100%" height="15" fill="rgb(205,184,13)" fg:x="18383" fg:w="2"/><text x="92.1742%" y="766.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="91.9242%" y="772" width="0.0100%" height="15" fill="rgb(209,48,36)" fg:x="18383" fg:w="2"/><text x="92.1742%" y="782.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.01%)</title><rect x="91.9242%" y="788" width="0.0100%" height="15" fill="rgb(244,34,51)" fg:x="18383" fg:w="2"/><text x="92.1742%" y="798.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.02%)</title><rect x="92.0092%" y="804" width="0.0150%" height="15" fill="rgb(221,107,33)" fg:x="18400" fg:w="3"/><text x="92.2592%" y="814.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (35 samples, 0.18%)</title><rect x="92.0742%" y="980" width="0.1750%" height="15" fill="rgb(224,203,12)" fg:x="18413" fg:w="35"/><text x="92.3242%" y="990.50"></text></g><g><title>syscall (35 samples, 0.18%)</title><rect x="92.0742%" y="996" width="0.1750%" height="15" fill="rgb(230,215,18)" fg:x="18413" fg:w="35"/><text x="92.3242%" y="1006.50"></text></g><g><title>[unknown] (31 samples, 0.16%)</title><rect x="92.0942%" y="1012" width="0.1550%" height="15" fill="rgb(206,185,35)" fg:x="18417" fg:w="31"/><text x="92.3442%" y="1022.50"></text></g><g><title>[unknown] (29 samples, 0.15%)</title><rect x="92.1042%" y="1028" width="0.1450%" height="15" fill="rgb(228,140,34)" fg:x="18419" fg:w="29"/><text x="92.3542%" y="1038.50"></text></g><g><title>[unknown] (29 samples, 0.15%)</title><rect x="92.1042%" y="1044" width="0.1450%" height="15" fill="rgb(208,93,13)" fg:x="18419" fg:w="29"/><text x="92.3542%" y="1054.50"></text></g><g><title>[unknown] (29 samples, 0.15%)</title><rect x="92.1042%" y="1060" width="0.1450%" height="15" fill="rgb(221,193,39)" fg:x="18419" fg:w="29"/><text x="92.3542%" y="1070.50"></text></g><g><title>[unknown] (28 samples, 0.14%)</title><rect x="92.1092%" y="1076" width="0.1400%" height="15" fill="rgb(241,132,34)" fg:x="18420" fg:w="28"/><text x="92.3592%" y="1086.50"></text></g><g><title>[unknown] (21 samples, 0.11%)</title><rect x="92.1442%" y="1092" width="0.1050%" height="15" fill="rgb(221,141,10)" fg:x="18427" fg:w="21"/><text x="92.3942%" y="1102.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="92.1842%" y="1108" width="0.0650%" height="15" fill="rgb(226,90,31)" fg:x="18435" fg:w="13"/><text x="92.4342%" y="1118.50"></text></g><g><title>[unknown] (9 samples, 0.05%)</title><rect x="92.2042%" y="1124" width="0.0450%" height="15" fill="rgb(243,75,5)" fg:x="18439" fg:w="9"/><text x="92.4542%" y="1134.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="92.2342%" y="1140" width="0.0150%" height="15" fill="rgb(227,156,21)" fg:x="18445" fg:w="3"/><text x="92.4842%" y="1150.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="92.2392%" y="1156" width="0.0100%" height="15" fill="rgb(250,195,8)" fg:x="18446" fg:w="2"/><text x="92.4892%" y="1166.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (5 samples, 0.03%)</title><rect x="92.2492%" y="980" width="0.0250%" height="15" fill="rgb(220,134,5)" fg:x="18448" fg:w="5"/><text x="92.4992%" y="990.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (4 samples, 0.02%)</title><rect x="92.2542%" y="996" width="0.0200%" height="15" fill="rgb(246,106,34)" fg:x="18449" fg:w="4"/><text x="92.5042%" y="1006.50"></text></g><g><title>__GI___clock_gettime (4 samples, 0.02%)</title><rect x="92.2542%" y="1012" width="0.0200%" height="15" fill="rgb(205,1,4)" fg:x="18449" fg:w="4"/><text x="92.5042%" y="1022.50"></text></g><g><title>[[vdso]] (4 samples, 0.02%)</title><rect x="92.2542%" y="1028" width="0.0200%" height="15" fill="rgb(224,151,29)" fg:x="18449" fg:w="4"/><text x="92.5042%" y="1038.50"></text></g><g><title>[[vdso]] (2 samples, 0.01%)</title><rect x="92.2642%" y="1044" width="0.0100%" height="15" fill="rgb(251,196,0)" fg:x="18451" fg:w="2"/><text x="92.5142%" y="1054.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (46 samples, 0.23%)</title><rect x="92.0592%" y="948" width="0.2300%" height="15" fill="rgb(212,127,0)" fg:x="18410" fg:w="46"/><text x="92.3092%" y="958.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (46 samples, 0.23%)</title><rect x="92.0592%" y="964" width="0.2300%" height="15" fill="rgb(236,71,53)" fg:x="18410" fg:w="46"/><text x="92.3092%" y="974.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (3 samples, 0.02%)</title><rect x="92.2742%" y="980" width="0.0150%" height="15" fill="rgb(227,99,0)" fg:x="18453" fg:w="3"/><text x="92.5242%" y="990.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (16 samples, 0.08%)</title><rect x="92.2992%" y="980" width="0.0800%" height="15" fill="rgb(239,89,21)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="990.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (16 samples, 0.08%)</title><rect x="92.2992%" y="996" width="0.0800%" height="15" fill="rgb(243,122,19)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1006.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (16 samples, 0.08%)</title><rect x="92.2992%" y="1012" width="0.0800%" height="15" fill="rgb(229,192,45)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1022.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (16 samples, 0.08%)</title><rect x="92.2992%" y="1028" width="0.0800%" height="15" fill="rgb(235,165,35)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1038.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (16 samples, 0.08%)</title><rect x="92.2992%" y="1044" width="0.0800%" height="15" fill="rgb(253,202,0)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1054.50"></text></g><g><title>std::sys::unix::fs::File::write (16 samples, 0.08%)</title><rect x="92.2992%" y="1060" width="0.0800%" height="15" fill="rgb(235,51,20)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1070.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (16 samples, 0.08%)</title><rect x="92.2992%" y="1076" width="0.0800%" height="15" fill="rgb(218,95,46)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1086.50"></text></g><g><title>__GI___libc_write (16 samples, 0.08%)</title><rect x="92.2992%" y="1092" width="0.0800%" height="15" fill="rgb(212,81,10)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1102.50"></text></g><g><title>__GI___libc_write (16 samples, 0.08%)</title><rect x="92.2992%" y="1108" width="0.0800%" height="15" fill="rgb(240,59,0)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1118.50"></text></g><g><title>[unknown] (16 samples, 0.08%)</title><rect x="92.2992%" y="1124" width="0.0800%" height="15" fill="rgb(212,191,42)" fg:x="18458" fg:w="16"/><text x="92.5492%" y="1134.50"></text></g><g><title>[unknown] (15 samples, 0.08%)</title><rect x="92.3042%" y="1140" width="0.0750%" height="15" fill="rgb(233,140,3)" fg:x="18459" fg:w="15"/><text x="92.5542%" y="1150.50"></text></g><g><title>[unknown] (14 samples, 0.07%)</title><rect x="92.3092%" y="1156" width="0.0700%" height="15" fill="rgb(215,69,23)" fg:x="18460" fg:w="14"/><text x="92.5592%" y="1166.50"></text></g><g><title>[unknown] (14 samples, 0.07%)</title><rect x="92.3092%" y="1172" width="0.0700%" height="15" fill="rgb(240,202,20)" fg:x="18460" fg:w="14"/><text x="92.5592%" y="1182.50"></text></g><g><title>[unknown] (14 samples, 0.07%)</title><rect x="92.3092%" y="1188" width="0.0700%" height="15" fill="rgb(209,146,50)" fg:x="18460" fg:w="14"/><text x="92.5592%" y="1198.50"></text></g><g><title>[unknown] (13 samples, 0.07%)</title><rect x="92.3142%" y="1204" width="0.0650%" height="15" fill="rgb(253,102,54)" fg:x="18461" fg:w="13"/><text x="92.5642%" y="1214.50"></text></g><g><title>[unknown] (11 samples, 0.06%)</title><rect x="92.3242%" y="1220" width="0.0550%" height="15" fill="rgb(250,173,47)" fg:x="18463" fg:w="11"/><text x="92.5742%" y="1230.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="92.3442%" y="1236" width="0.0350%" height="15" fill="rgb(232,142,7)" fg:x="18467" fg:w="7"/><text x="92.5942%" y="1246.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="92.3642%" y="1252" width="0.0150%" height="15" fill="rgb(230,157,47)" fg:x="18471" fg:w="3"/><text x="92.6142%" y="1262.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (18 samples, 0.09%)</title><rect x="92.2942%" y="964" width="0.0900%" height="15" fill="rgb(214,177,35)" fg:x="18457" fg:w="18"/><text x="92.5442%" y="974.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (20 samples, 0.10%)</title><rect x="92.2892%" y="948" width="0.1000%" height="15" fill="rgb(234,119,46)" fg:x="18456" fg:w="20"/><text x="92.5392%" y="958.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (2 samples, 0.01%)</title><rect x="92.3992%" y="980" width="0.0100%" height="15" fill="rgb(241,180,50)" fg:x="18478" fg:w="2"/><text x="92.6492%" y="990.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="92.3992%" y="996" width="0.0100%" height="15" fill="rgb(221,54,25)" fg:x="18478" fg:w="2"/><text x="92.6492%" y="1006.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::push_back_or_overflow (6 samples, 0.03%)</title><rect x="92.3942%" y="964" width="0.0300%" height="15" fill="rgb(209,157,44)" fg:x="18477" fg:w="6"/><text x="92.6442%" y="974.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (2 samples, 0.01%)</title><rect x="92.4142%" y="980" width="0.0100%" height="15" fill="rgb(246,115,41)" fg:x="18481" fg:w="2"/><text x="92.6642%" y="990.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::pop (3 samples, 0.02%)</title><rect x="92.4242%" y="996" width="0.0150%" height="15" fill="rgb(229,86,1)" fg:x="18483" fg:w="3"/><text x="92.6742%" y="1006.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (3 samples, 0.02%)</title><rect x="92.4242%" y="1012" width="0.0150%" height="15" fill="rgb(240,108,53)" fg:x="18483" fg:w="3"/><text x="92.6742%" y="1022.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (2 samples, 0.01%)</title><rect x="92.4392%" y="996" width="0.0100%" height="15" fill="rgb(227,134,2)" fg:x="18486" fg:w="2"/><text x="92.6892%" y="1006.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (2 samples, 0.01%)</title><rect x="92.4392%" y="1012" width="0.0100%" height="15" fill="rgb(213,129,25)" fg:x="18486" fg:w="2"/><text x="92.6892%" y="1022.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (2 samples, 0.01%)</title><rect x="92.4392%" y="1028" width="0.0100%" height="15" fill="rgb(226,35,21)" fg:x="18486" fg:w="2"/><text x="92.6892%" y="1038.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::yield_now (91 samples, 0.46%)</title><rect x="92.0092%" y="788" width="0.4550%" height="15" fill="rgb(208,129,26)" fg:x="18400" fg:w="91"/><text x="92.2592%" y="798.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (88 samples, 0.44%)</title><rect x="92.0242%" y="804" width="0.4400%" height="15" fill="rgb(224,83,6)" fg:x="18403" fg:w="88"/><text x="92.2742%" y="814.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (88 samples, 0.44%)</title><rect x="92.0242%" y="820" width="0.4400%" height="15" fill="rgb(227,52,39)" fg:x="18403" fg:w="88"/><text x="92.2742%" y="830.50"></text></g><g><title>tokio::runtime::context::with_scheduler (88 samples, 0.44%)</title><rect x="92.0242%" y="836" width="0.4400%" height="15" fill="rgb(241,30,17)" fg:x="18403" fg:w="88"/><text x="92.2742%" y="846.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (86 samples, 0.43%)</title><rect x="92.0342%" y="852" width="0.4300%" height="15" fill="rgb(246,186,42)" fg:x="18405" fg:w="86"/><text x="92.2842%" y="862.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (86 samples, 0.43%)</title><rect x="92.0342%" y="868" width="0.4300%" height="15" fill="rgb(221,169,15)" fg:x="18405" fg:w="86"/><text x="92.2842%" y="878.50"></text></g><g><title>tokio::runtime::context::with_scheduler::_{{closure}} (86 samples, 0.43%)</title><rect x="92.0342%" y="884" width="0.4300%" height="15" fill="rgb(235,108,21)" fg:x="18405" fg:w="86"/><text x="92.2842%" y="894.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (86 samples, 0.43%)</title><rect x="92.0342%" y="900" width="0.4300%" height="15" fill="rgb(219,148,30)" fg:x="18405" fg:w="86"/><text x="92.2842%" y="910.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::_{{closure}} (85 samples, 0.43%)</title><rect x="92.0392%" y="916" width="0.4250%" height="15" fill="rgb(220,109,5)" fg:x="18406" fg:w="85"/><text x="92.2892%" y="926.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (84 samples, 0.42%)</title><rect x="92.0442%" y="932" width="0.4200%" height="15" fill="rgb(213,203,48)" fg:x="18407" fg:w="84"/><text x="92.2942%" y="942.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (15 samples, 0.08%)</title><rect x="92.3892%" y="948" width="0.0750%" height="15" fill="rgb(244,71,33)" fg:x="18476" fg:w="15"/><text x="92.6392%" y="958.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (8 samples, 0.04%)</title><rect x="92.4242%" y="964" width="0.0400%" height="15" fill="rgb(209,23,2)" fg:x="18483" fg:w="8"/><text x="92.6742%" y="974.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (8 samples, 0.04%)</title><rect x="92.4242%" y="980" width="0.0400%" height="15" fill="rgb(219,97,7)" fg:x="18483" fg:w="8"/><text x="92.6742%" y="990.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (3 samples, 0.02%)</title><rect x="92.4492%" y="996" width="0.0150%" height="15" fill="rgb(216,161,23)" fg:x="18488" fg:w="3"/><text x="92.6992%" y="1006.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (3 samples, 0.02%)</title><rect x="92.4492%" y="1012" width="0.0150%" height="15" fill="rgb(207,45,42)" fg:x="18488" fg:w="3"/><text x="92.6992%" y="1022.50"></text></g><g><title>core::sync::atomic::atomic_add (3 samples, 0.02%)</title><rect x="92.4492%" y="1028" width="0.0150%" height="15" fill="rgb(241,61,4)" fg:x="18488" fg:w="3"/><text x="92.6992%" y="1038.50"></text></g><g><title>__GI___libc_free (8 samples, 0.04%)</title><rect x="92.4742%" y="804" width="0.0400%" height="15" fill="rgb(236,170,1)" fg:x="18493" fg:w="8"/><text x="92.7242%" y="814.50"></text></g><g><title>_int_free (4 samples, 0.02%)</title><rect x="92.4942%" y="820" width="0.0200%" height="15" fill="rgb(239,72,5)" fg:x="18497" fg:w="4"/><text x="92.7442%" y="830.50"></text></g><g><title>unlink_chunk (2 samples, 0.01%)</title><rect x="92.5043%" y="836" width="0.0100%" height="15" fill="rgb(214,13,50)" fg:x="18499" fg:w="2"/><text x="92.7543%" y="846.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="92.5193%" y="932" width="0.0100%" height="15" fill="rgb(224,88,9)" fg:x="18502" fg:w="2"/><text x="92.7693%" y="942.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="92.5293%" y="964" width="0.0150%" height="15" fill="rgb(238,192,34)" fg:x="18504" fg:w="3"/><text x="92.7793%" y="974.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (5 samples, 0.03%)</title><rect x="92.5293%" y="932" width="0.0250%" height="15" fill="rgb(217,203,50)" fg:x="18504" fg:w="5"/><text x="92.7793%" y="942.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage::_{{closure}} (5 samples, 0.03%)</title><rect x="92.5293%" y="948" width="0.0250%" height="15" fill="rgb(241,123,32)" fg:x="18504" fg:w="5"/><text x="92.7793%" y="958.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::drop_future_or_output (8 samples, 0.04%)</title><rect x="92.5193%" y="900" width="0.0400%" height="15" fill="rgb(248,151,39)" fg:x="18502" fg:w="8"/><text x="92.7693%" y="910.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (8 samples, 0.04%)</title><rect x="92.5193%" y="916" width="0.0400%" height="15" fill="rgb(208,89,6)" fg:x="18502" fg:w="8"/><text x="92.7693%" y="926.50"></text></g><g><title>std::panic::catch_unwind (10 samples, 0.05%)</title><rect x="92.5193%" y="804" width="0.0500%" height="15" fill="rgb(254,43,26)" fg:x="18502" fg:w="10"/><text x="92.7693%" y="814.50"></text></g><g><title>std::panicking::try (10 samples, 0.05%)</title><rect x="92.5193%" y="820" width="0.0500%" height="15" fill="rgb(216,158,13)" fg:x="18502" fg:w="10"/><text x="92.7693%" y="830.50"></text></g><g><title>std::panicking::try::do_call (10 samples, 0.05%)</title><rect x="92.5193%" y="836" width="0.0500%" height="15" fill="rgb(212,47,37)" fg:x="18502" fg:w="10"/><text x="92.7693%" y="846.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (10 samples, 0.05%)</title><rect x="92.5193%" y="852" width="0.0500%" height="15" fill="rgb(254,16,10)" fg:x="18502" fg:w="10"/><text x="92.7693%" y="862.50"></text></g><g><title>core::ops::function::FnOnce::call_once (10 samples, 0.05%)</title><rect x="92.5193%" y="868" width="0.0500%" height="15" fill="rgb(223,228,16)" fg:x="18502" fg:w="10"/><text x="92.7693%" y="878.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete::_{{closure}} (10 samples, 0.05%)</title><rect x="92.5193%" y="884" width="0.0500%" height="15" fill="rgb(249,108,50)" fg:x="18502" fg:w="10"/><text x="92.7693%" y="894.50"></text></g><g><title>tokio::runtime::task::state::Snapshot::is_join_interested (2 samples, 0.01%)</title><rect x="92.5593%" y="900" width="0.0100%" height="15" fill="rgb(208,220,5)" fg:x="18510" fg:w="2"/><text x="92.8093%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Core&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;::return_to_pool::{{closure}},alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="92.5693%" y="868" width="0.0250%" height="15" fill="rgb(217,89,48)" fg:x="18512" fg:w="5"/><text x="92.8193%" y="878.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::CoreStage&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;::return_to_pool::{{closure}}&gt;&gt; (4 samples, 0.02%)</title><rect x="92.5743%" y="884" width="0.0200%" height="15" fill="rgb(212,113,41)" fg:x="18513" fg:w="4"/><text x="92.8243%" y="894.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::unsafe_cell::UnsafeCell&lt;tokio::runtime::task::core::Stage&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;::return_to_pool::{{closure}}&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="92.5743%" y="900" width="0.0200%" height="15" fill="rgb(231,127,5)" fg:x="18513" fg:w="4"/><text x="92.8243%" y="910.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::UnsafeCell&lt;tokio::runtime::task::core::Stage&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;::return_to_pool::{{closure}}&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="92.5743%" y="916" width="0.0200%" height="15" fill="rgb(217,141,17)" fg:x="18513" fg:w="4"/><text x="92.8243%" y="926.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;::return_to_pool::{{closure}}&gt;&gt; (4 samples, 0.02%)</title><rect x="92.5743%" y="932" width="0.0200%" height="15" fill="rgb(245,125,54)" fg:x="18513" fg:w="4"/><text x="92.8243%" y="942.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::dealloc (6 samples, 0.03%)</title><rect x="92.5693%" y="804" width="0.0300%" height="15" fill="rgb(248,125,3)" fg:x="18512" fg:w="6"/><text x="92.8193%" y="814.50"></text></g><g><title>core::mem::drop (6 samples, 0.03%)</title><rect x="92.5693%" y="820" width="0.0300%" height="15" fill="rgb(236,119,51)" fg:x="18512" fg:w="6"/><text x="92.8193%" y="830.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::task::core::Cell&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;::return_to_pool::{{closure}},alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt;&gt; (6 samples, 0.03%)</title><rect x="92.5693%" y="836" width="0.0300%" height="15" fill="rgb(239,99,8)" fg:x="18512" fg:w="6"/><text x="92.8193%" y="846.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Cell&lt;sqlx_core::pool::connection::PoolConnection&lt;sqlx_postgres::database::Postgres&gt;::return_to_pool::{{closure}},alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;&gt; (6 samples, 0.03%)</title><rect x="92.5693%" y="852" width="0.0300%" height="15" fill="rgb(224,228,4)" fg:x="18512" fg:w="6"/><text x="92.8193%" y="862.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::release (2 samples, 0.01%)</title><rect x="92.5993%" y="820" width="0.0100%" height="15" fill="rgb(220,131,45)" fg:x="18518" fg:w="2"/><text x="92.8493%" y="830.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (4 samples, 0.02%)</title><rect x="92.6243%" y="836" width="0.0200%" height="15" fill="rgb(215,62,5)" fg:x="18523" fg:w="4"/><text x="92.8743%" y="846.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (4 samples, 0.02%)</title><rect x="92.6243%" y="852" width="0.0200%" height="15" fill="rgb(253,12,24)" fg:x="18523" fg:w="4"/><text x="92.8743%" y="862.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (4 samples, 0.02%)</title><rect x="92.6243%" y="868" width="0.0200%" height="15" fill="rgb(248,120,50)" fg:x="18523" fg:w="4"/><text x="92.8743%" y="878.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::release (10 samples, 0.05%)</title><rect x="92.5993%" y="804" width="0.0500%" height="15" fill="rgb(245,194,10)" fg:x="18518" fg:w="10"/><text x="92.8493%" y="814.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::remove (7 samples, 0.04%)</title><rect x="92.6143%" y="820" width="0.0350%" height="15" fill="rgb(241,149,38)" fg:x="18521" fg:w="7"/><text x="92.8643%" y="830.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_complete (3 samples, 0.02%)</title><rect x="92.6493%" y="804" width="0.0150%" height="15" fill="rgb(219,215,7)" fg:x="18528" fg:w="3"/><text x="92.8993%" y="814.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_xor (2 samples, 0.01%)</title><rect x="92.6543%" y="820" width="0.0100%" height="15" fill="rgb(208,120,31)" fg:x="18529" fg:w="2"/><text x="92.9043%" y="830.50"></text></g><g><title>core::sync::atomic::atomic_xor (2 samples, 0.01%)</title><rect x="92.6543%" y="836" width="0.0100%" height="15" fill="rgb(244,30,8)" fg:x="18529" fg:w="2"/><text x="92.9043%" y="846.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (42 samples, 0.21%)</title><rect x="92.4642%" y="788" width="0.2100%" height="15" fill="rgb(238,35,44)" fg:x="18491" fg:w="42"/><text x="92.7142%" y="798.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_terminal (2 samples, 0.01%)</title><rect x="92.6643%" y="804" width="0.0100%" height="15" fill="rgb(243,218,37)" fg:x="18531" fg:w="2"/><text x="92.9143%" y="814.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner::transition_result_to_poll_future (5 samples, 0.03%)</title><rect x="92.7143%" y="804" width="0.0250%" height="15" fill="rgb(218,169,10)" fg:x="18541" fg:w="5"/><text x="92.9643%" y="814.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (6 samples, 0.03%)</title><rect x="92.7843%" y="932" width="0.0300%" height="15" fill="rgb(221,144,10)" fg:x="18555" fg:w="6"/><text x="93.0343%" y="942.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (3 samples, 0.02%)</title><rect x="93.0443%" y="1140" width="0.0150%" height="15" fill="rgb(226,41,38)" fg:x="18607" fg:w="3"/><text x="93.2943%" y="1150.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.02%)</title><rect x="93.0443%" y="1156" width="0.0150%" height="15" fill="rgb(228,3,1)" fg:x="18607" fg:w="3"/><text x="93.2943%" y="1166.50"></text></g><g><title>hyper::common::date::CACHED::__getit (7 samples, 0.04%)</title><rect x="93.0343%" y="1108" width="0.0350%" height="15" fill="rgb(209,129,12)" fg:x="18605" fg:w="7"/><text x="93.2843%" y="1118.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (7 samples, 0.04%)</title><rect x="93.0343%" y="1124" width="0.0350%" height="15" fill="rgb(213,136,33)" fg:x="18605" fg:w="7"/><text x="93.2843%" y="1134.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::initialize (2 samples, 0.01%)</title><rect x="93.0593%" y="1140" width="0.0100%" height="15" fill="rgb(209,181,29)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1150.50"></text></g><g><title>hyper::common::date::CACHED::__getit::_{{closure}} (2 samples, 0.01%)</title><rect x="93.0593%" y="1156" width="0.0100%" height="15" fill="rgb(234,173,18)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1166.50"></text></g><g><title>hyper::common::date::CACHED::__init (2 samples, 0.01%)</title><rect x="93.0593%" y="1172" width="0.0100%" height="15" fill="rgb(227,73,47)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1182.50"></text></g><g><title>hyper::common::date::CachedDate::new (2 samples, 0.01%)</title><rect x="93.0593%" y="1188" width="0.0100%" height="15" fill="rgb(234,9,34)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1198.50"></text></g><g><title>hyper::common::date::CachedDate::update (2 samples, 0.01%)</title><rect x="93.0593%" y="1204" width="0.0100%" height="15" fill="rgb(235,172,15)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1214.50"></text></g><g><title>hyper::common::date::CachedDate::render (2 samples, 0.01%)</title><rect x="93.0593%" y="1220" width="0.0100%" height="15" fill="rgb(245,61,2)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1230.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.01%)</title><rect x="93.0593%" y="1236" width="0.0100%" height="15" fill="rgb(238,39,47)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1246.50"></text></g><g><title>core::fmt::write (2 samples, 0.01%)</title><rect x="93.0593%" y="1252" width="0.0100%" height="15" fill="rgb(234,37,24)" fg:x="18610" fg:w="2"/><text x="93.3093%" y="1262.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (17 samples, 0.09%)</title><rect x="93.0793%" y="1140" width="0.0850%" height="15" fill="rgb(248,223,24)" fg:x="18614" fg:w="17"/><text x="93.3293%" y="1150.50"></text></g><g><title>__GI___clock_gettime (17 samples, 0.09%)</title><rect x="93.0793%" y="1156" width="0.0850%" height="15" fill="rgb(223,12,15)" fg:x="18614" fg:w="17"/><text x="93.3293%" y="1166.50"></text></g><g><title>[[vdso]] (13 samples, 0.07%)</title><rect x="93.0993%" y="1172" width="0.0650%" height="15" fill="rgb(249,6,3)" fg:x="18618" fg:w="13"/><text x="93.3493%" y="1182.50"></text></g><g><title>[[vdso]] (11 samples, 0.06%)</title><rect x="93.1093%" y="1188" width="0.0550%" height="15" fill="rgb(237,105,33)" fg:x="18620" fg:w="11"/><text x="93.3593%" y="1198.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::update_date (27 samples, 0.14%)</title><rect x="93.0343%" y="1044" width="0.1350%" height="15" fill="rgb(252,208,35)" fg:x="18605" fg:w="27"/><text x="93.2843%" y="1054.50"></text></g><g><title>hyper::common::date::update (27 samples, 0.14%)</title><rect x="93.0343%" y="1060" width="0.1350%" height="15" fill="rgb(215,181,35)" fg:x="18605" fg:w="27"/><text x="93.2843%" y="1070.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (27 samples, 0.14%)</title><rect x="93.0343%" y="1076" width="0.1350%" height="15" fill="rgb(246,212,3)" fg:x="18605" fg:w="27"/><text x="93.2843%" y="1086.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (27 samples, 0.14%)</title><rect x="93.0343%" y="1092" width="0.1350%" height="15" fill="rgb(247,156,24)" fg:x="18605" fg:w="27"/><text x="93.2843%" y="1102.50"></text></g><g><title>hyper::common::date::update::_{{closure}} (20 samples, 0.10%)</title><rect x="93.0693%" y="1108" width="0.1000%" height="15" fill="rgb(248,9,31)" fg:x="18612" fg:w="20"/><text x="93.3193%" y="1118.50"></text></g><g><title>hyper::common::date::CachedDate::check (20 samples, 0.10%)</title><rect x="93.0693%" y="1124" width="0.1000%" height="15" fill="rgb(234,26,45)" fg:x="18612" fg:w="20"/><text x="93.3193%" y="1134.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::is_read_closed (5 samples, 0.03%)</title><rect x="93.1943%" y="1060" width="0.0250%" height="15" fill="rgb(249,11,32)" fg:x="18637" fg:w="5"/><text x="93.4443%" y="1070.50"></text></g><g><title>hyper::proto::h1::conn::State::is_read_closed (4 samples, 0.02%)</title><rect x="93.1993%" y="1076" width="0.0200%" height="15" fill="rgb(249,162,33)" fg:x="18638" fg:w="4"/><text x="93.4493%" y="1086.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::is_done (14 samples, 0.07%)</title><rect x="93.1693%" y="1044" width="0.0700%" height="15" fill="rgb(232,4,32)" fg:x="18632" fg:w="14"/><text x="93.4193%" y="1054.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::is_write_closed (4 samples, 0.02%)</title><rect x="93.2193%" y="1060" width="0.0200%" height="15" fill="rgb(212,5,45)" fg:x="18642" fg:w="4"/><text x="93.4693%" y="1070.50"></text></g><g><title>hyper::proto::h1::conn::State::is_write_closed (3 samples, 0.02%)</title><rect x="93.2243%" y="1076" width="0.0150%" height="15" fill="rgb(227,95,13)" fg:x="18643" fg:w="3"/><text x="93.4743%" y="1086.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (3 samples, 0.02%)</title><rect x="93.2393%" y="1044" width="0.0150%" height="15" fill="rgb(223,205,10)" fg:x="18646" fg:w="3"/><text x="93.4893%" y="1054.50"></text></g><g><title>core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt;::map_err (5 samples, 0.03%)</title><rect x="93.2843%" y="1076" width="0.0250%" height="15" fill="rgb(222,178,8)" fg:x="18655" fg:w="5"/><text x="93.5343%" y="1086.50"></text></g><g><title>&lt;tracing_core::metadata::Level as core::cmp::PartialOrd&lt;tracing_core::metadata::LevelFilter&gt;&gt;::le (2 samples, 0.01%)</title><rect x="93.3193%" y="1092" width="0.0100%" height="15" fill="rgb(216,13,22)" fg:x="18662" fg:w="2"/><text x="93.5693%" y="1102.50"></text></g><g><title>hyper::proto::h1::conn::KA::status (3 samples, 0.02%)</title><rect x="93.4043%" y="1124" width="0.0150%" height="15" fill="rgb(240,167,12)" fg:x="18679" fg:w="3"/><text x="93.6543%" y="1134.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::try_keep_alive (20 samples, 0.10%)</title><rect x="93.3293%" y="1092" width="0.1000%" height="15" fill="rgb(235,68,35)" fg:x="18664" fg:w="20"/><text x="93.5793%" y="1102.50"></text></g><g><title>hyper::proto::h1::conn::State::try_keep_alive (17 samples, 0.09%)</title><rect x="93.3443%" y="1108" width="0.0850%" height="15" fill="rgb(253,40,27)" fg:x="18667" fg:w="17"/><text x="93.5943%" y="1118.50"></text></g><g><title>hyper::proto::h1::conn::State::idle (2 samples, 0.01%)</title><rect x="93.4193%" y="1124" width="0.0100%" height="15" fill="rgb(214,19,28)" fg:x="18682" fg:w="2"/><text x="93.6693%" y="1134.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (4 samples, 0.02%)</title><rect x="93.4293%" y="1092" width="0.0200%" height="15" fill="rgb(210,167,45)" fg:x="18684" fg:w="4"/><text x="93.6793%" y="1102.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_flush (39 samples, 0.20%)</title><rect x="93.2643%" y="1060" width="0.1950%" height="15" fill="rgb(232,97,40)" fg:x="18651" fg:w="39"/><text x="93.5143%" y="1070.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_flush (30 samples, 0.15%)</title><rect x="93.3093%" y="1076" width="0.1500%" height="15" fill="rgb(250,35,23)" fg:x="18660" fg:w="30"/><text x="93.5593%" y="1086.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::is_read_closed (2 samples, 0.01%)</title><rect x="93.5494%" y="1092" width="0.0100%" height="15" fill="rgb(248,47,53)" fg:x="18708" fg:w="2"/><text x="93.7994%" y="1102.50"></text></g><g><title>hyper::proto::h1::conn::State::is_read_closed (2 samples, 0.01%)</title><rect x="93.5494%" y="1108" width="0.0100%" height="15" fill="rgb(226,58,50)" fg:x="18708" fg:w="2"/><text x="93.7994%" y="1118.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.01%)</title><rect x="93.6144%" y="1140" width="0.0100%" height="15" fill="rgb(217,105,26)" fg:x="18721" fg:w="2"/><text x="93.8644%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::coop::RestoreOnPending&gt; (2 samples, 0.01%)</title><rect x="93.6744%" y="1188" width="0.0100%" height="15" fill="rgb(208,64,1)" fg:x="18733" fg:w="2"/><text x="93.9244%" y="1198.50"></text></g><g><title>&lt;tokio::runtime::coop::RestoreOnPending as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="93.6744%" y="1204" width="0.0100%" height="15" fill="rgb(214,80,1)" fg:x="18733" fg:w="2"/><text x="93.9244%" y="1214.50"></text></g><g><title>tokio::runtime::context::budget (2 samples, 0.01%)</title><rect x="93.6744%" y="1220" width="0.0100%" height="15" fill="rgb(206,175,26)" fg:x="18733" fg:w="2"/><text x="93.9244%" y="1230.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.01%)</title><rect x="93.6744%" y="1236" width="0.0100%" height="15" fill="rgb(235,156,37)" fg:x="18733" fg:w="2"/><text x="93.9244%" y="1246.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.01%)</title><rect x="93.6744%" y="1252" width="0.0100%" height="15" fill="rgb(213,100,9)" fg:x="18733" fg:w="2"/><text x="93.9244%" y="1262.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="93.6744%" y="1268" width="0.0100%" height="15" fill="rgb(241,15,13)" fg:x="18733" fg:w="2"/><text x="93.9244%" y="1278.50"></text></g><g><title>tokio::runtime::coop::poll_proceed (2 samples, 0.01%)</title><rect x="93.6844%" y="1188" width="0.0100%" height="15" fill="rgb(205,97,43)" fg:x="18735" fg:w="2"/><text x="93.9344%" y="1198.50"></text></g><g><title>tokio::runtime::context::budget (2 samples, 0.01%)</title><rect x="93.6844%" y="1204" width="0.0100%" height="15" fill="rgb(216,106,32)" fg:x="18735" fg:w="2"/><text x="93.9344%" y="1214.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.01%)</title><rect x="93.6844%" y="1220" width="0.0100%" height="15" fill="rgb(226,200,8)" fg:x="18735" fg:w="2"/><text x="93.9344%" y="1230.50"></text></g><g><title>&lt;core::task::wake::RawWakerVTable as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="93.7094%" y="1252" width="0.0100%" height="15" fill="rgb(244,54,29)" fg:x="18740" fg:w="2"/><text x="93.9594%" y="1262.50"></text></g><g><title>core::task::wake::Waker::will_wake (4 samples, 0.02%)</title><rect x="93.7094%" y="1204" width="0.0200%" height="15" fill="rgb(252,169,12)" fg:x="18740" fg:w="4"/><text x="93.9594%" y="1214.50"></text></g><g><title>&lt;core::task::wake::RawWaker as core::cmp::PartialEq&gt;::eq (4 samples, 0.02%)</title><rect x="93.7094%" y="1220" width="0.0200%" height="15" fill="rgb(231,199,11)" fg:x="18740" fg:w="4"/><text x="93.9594%" y="1230.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (4 samples, 0.02%)</title><rect x="93.7094%" y="1236" width="0.0200%" height="15" fill="rgb(233,191,18)" fg:x="18740" fg:w="4"/><text x="93.9594%" y="1246.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.01%)</title><rect x="93.7194%" y="1252" width="0.0100%" height="15" fill="rgb(215,83,47)" fg:x="18742" fg:w="2"/><text x="93.9694%" y="1262.50"></text></g><g><title>&lt;hyper::server::tcp::addr_stream::AddrStream as tokio::io::async_read::AsyncRead&gt;::poll_read (26 samples, 0.13%)</title><rect x="93.6244%" y="1140" width="0.1300%" height="15" fill="rgb(251,67,19)" fg:x="18723" fg:w="26"/><text x="93.8744%" y="1150.50"></text></g><g><title>tokio::io::poll_evented::PollEvented&lt;E&gt;::poll_read (25 samples, 0.13%)</title><rect x="93.6294%" y="1156" width="0.1250%" height="15" fill="rgb(240,7,20)" fg:x="18724" fg:w="25"/><text x="93.8794%" y="1166.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (21 samples, 0.11%)</title><rect x="93.6494%" y="1172" width="0.1050%" height="15" fill="rgb(210,150,26)" fg:x="18728" fg:w="21"/><text x="93.8994%" y="1182.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (12 samples, 0.06%)</title><rect x="93.6944%" y="1188" width="0.0600%" height="15" fill="rgb(228,75,42)" fg:x="18737" fg:w="12"/><text x="93.9444%" y="1198.50"></text></g><g><title>tokio::runtime::io::driver::Direction::mask (4 samples, 0.02%)</title><rect x="93.7344%" y="1204" width="0.0200%" height="15" fill="rgb(237,134,48)" fg:x="18745" fg:w="4"/><text x="93.9844%" y="1214.50"></text></g><g><title>__GI___lll_lock_wake_private (2 samples, 0.01%)</title><rect x="93.8044%" y="1300" width="0.0100%" height="15" fill="rgb(205,80,50)" fg:x="18759" fg:w="2"/><text x="94.0544%" y="1310.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="93.8044%" y="1316" width="0.0100%" height="15" fill="rgb(217,74,48)" fg:x="18759" fg:w="2"/><text x="94.0544%" y="1326.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="93.8044%" y="1332" width="0.0100%" height="15" fill="rgb(205,82,50)" fg:x="18759" fg:w="2"/><text x="94.0544%" y="1342.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="93.8044%" y="1348" width="0.0100%" height="15" fill="rgb(228,1,33)" fg:x="18759" fg:w="2"/><text x="94.0544%" y="1358.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="93.8044%" y="1364" width="0.0100%" height="15" fill="rgb(214,50,23)" fg:x="18759" fg:w="2"/><text x="94.0544%" y="1374.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="93.8044%" y="1380" width="0.0100%" height="15" fill="rgb(210,62,9)" fg:x="18759" fg:w="2"/><text x="94.0544%" y="1390.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="93.8044%" y="1396" width="0.0100%" height="15" fill="rgb(210,104,37)" fg:x="18759" fg:w="2"/><text x="94.0544%" y="1406.50"></text></g><g><title>malloc_consolidate (88 samples, 0.44%)</title><rect x="93.9144%" y="1316" width="0.4400%" height="15" fill="rgb(232,104,43)" fg:x="18781" fg:w="88"/><text x="94.1644%" y="1326.50"></text></g><g><title>unlink_chunk (24 samples, 0.12%)</title><rect x="94.2344%" y="1332" width="0.1200%" height="15" fill="rgb(244,52,6)" fg:x="18845" fg:w="24"/><text x="94.4844%" y="1342.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (118 samples, 0.59%)</title><rect x="93.7694%" y="1172" width="0.5901%" height="15" fill="rgb(211,174,52)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1182.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (118 samples, 0.59%)</title><rect x="93.7694%" y="1188" width="0.5901%" height="15" fill="rgb(229,48,4)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1198.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (118 samples, 0.59%)</title><rect x="93.7694%" y="1204" width="0.5901%" height="15" fill="rgb(205,155,16)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1214.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (118 samples, 0.59%)</title><rect x="93.7694%" y="1220" width="0.5901%" height="15" fill="rgb(211,141,53)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1230.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (118 samples, 0.59%)</title><rect x="93.7694%" y="1236" width="0.5901%" height="15" fill="rgb(240,148,11)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1246.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (118 samples, 0.59%)</title><rect x="93.7694%" y="1252" width="0.5901%" height="15" fill="rgb(214,45,23)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1262.50"></text></g><g><title>alloc::alloc::alloc (118 samples, 0.59%)</title><rect x="93.7694%" y="1268" width="0.5901%" height="15" fill="rgb(248,74,26)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1278.50"></text></g><g><title>__GI___libc_malloc (118 samples, 0.59%)</title><rect x="93.7694%" y="1284" width="0.5901%" height="15" fill="rgb(218,121,16)" fg:x="18752" fg:w="118"/><text x="94.0194%" y="1294.50"></text></g><g><title>_int_malloc (109 samples, 0.55%)</title><rect x="93.8144%" y="1300" width="0.5451%" height="15" fill="rgb(218,10,47)" fg:x="18761" fg:w="109"/><text x="94.0644%" y="1310.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve (124 samples, 0.62%)</title><rect x="93.7544%" y="1140" width="0.6201%" height="15" fill="rgb(227,99,14)" fg:x="18749" fg:w="124"/><text x="94.0044%" y="1150.50"></text></g><g><title>bytes::bytes_mut::BytesMut::reserve_inner (124 samples, 0.62%)</title><rect x="93.7544%" y="1156" width="0.6201%" height="15" fill="rgb(229,83,46)" fg:x="18749" fg:w="124"/><text x="94.0044%" y="1166.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::mid_message_detect_eof (170 samples, 0.85%)</title><rect x="93.5594%" y="1092" width="0.8501%" height="15" fill="rgb(228,25,1)" fg:x="18710" fg:w="170"/><text x="93.8094%" y="1102.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::force_io_read (167 samples, 0.84%)</title><rect x="93.5744%" y="1108" width="0.8351%" height="15" fill="rgb(252,190,15)" fg:x="18713" fg:w="167"/><text x="93.8244%" y="1118.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (162 samples, 0.81%)</title><rect x="93.5994%" y="1124" width="0.8101%" height="15" fill="rgb(213,103,51)" fg:x="18718" fg:w="162"/><text x="93.8494%" y="1134.50"></text></g><g><title>hyper::proto::h1::io::ReadStrategy::next (7 samples, 0.04%)</title><rect x="94.3744%" y="1140" width="0.0350%" height="15" fill="rgb(220,38,44)" fg:x="18873" fg:w="7"/><text x="94.6244%" y="1150.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_keep_alive (180 samples, 0.90%)</title><rect x="93.5144%" y="1076" width="0.9001%" height="15" fill="rgb(210,45,26)" fg:x="18701" fg:w="180"/><text x="93.7644%" y="1086.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_ready (7 samples, 0.04%)</title><rect x="94.4344%" y="1092" width="0.0350%" height="15" fill="rgb(205,95,48)" fg:x="18885" fg:w="7"/><text x="94.6844%" y="1102.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="94.5045%" y="1124" width="0.0100%" height="15" fill="rgb(225,179,37)" fg:x="18899" fg:w="2"/><text x="94.7545%" y="1134.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (5 samples, 0.03%)</title><rect x="94.5045%" y="1108" width="0.0250%" height="15" fill="rgb(230,209,3)" fg:x="18899" fg:w="5"/><text x="94.7545%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;axum::routing::route::RouteFuture&lt;hyper::body::body::Body,core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="94.5195%" y="1124" width="0.0100%" height="15" fill="rgb(248,12,46)" fg:x="18902" fg:w="2"/><text x="94.7695%" y="1134.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;http::header::map::Bucket&lt;http::header::value::HeaderValue&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="94.5445%" y="1124" width="0.0150%" height="15" fill="rgb(234,18,0)" fg:x="18907" fg:w="3"/><text x="94.7945%" y="1134.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="94.5445%" y="1140" width="0.0150%" height="15" fill="rgb(238,197,14)" fg:x="18907" fg:w="3"/><text x="94.7945%" y="1150.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (3 samples, 0.02%)</title><rect x="94.5445%" y="1156" width="0.0150%" height="15" fill="rgb(251,162,48)" fg:x="18907" fg:w="3"/><text x="94.7945%" y="1166.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.02%)</title><rect x="94.5445%" y="1172" width="0.0150%" height="15" fill="rgb(237,73,42)" fg:x="18907" fg:w="3"/><text x="94.7945%" y="1182.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::HeaderMap&gt; (7 samples, 0.04%)</title><rect x="94.5295%" y="1108" width="0.0350%" height="15" fill="rgb(211,108,8)" fg:x="18904" fg:w="7"/><text x="94.7795%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::authority::Authority&gt; (2 samples, 0.01%)</title><rect x="94.5795%" y="1124" width="0.0100%" height="15" fill="rgb(213,45,22)" fg:x="18914" fg:w="2"/><text x="94.8295%" y="1134.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::byte_str::ByteStr&gt; (2 samples, 0.01%)</title><rect x="94.5795%" y="1140" width="0.0100%" height="15" fill="rgb(252,154,5)" fg:x="18914" fg:w="2"/><text x="94.8295%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (2 samples, 0.01%)</title><rect x="94.5795%" y="1156" width="0.0100%" height="15" fill="rgb(221,79,52)" fg:x="18914" fg:w="2"/><text x="94.8295%" y="1166.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="94.5795%" y="1172" width="0.0100%" height="15" fill="rgb(229,220,36)" fg:x="18914" fg:w="2"/><text x="94.8295%" y="1182.50"></text></g><g><title>bytes::bytes::static_drop (2 samples, 0.01%)</title><rect x="94.5795%" y="1188" width="0.0100%" height="15" fill="rgb(211,17,16)" fg:x="18914" fg:w="2"/><text x="94.8295%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::Uri&gt; (8 samples, 0.04%)</title><rect x="94.5645%" y="1108" width="0.0400%" height="15" fill="rgb(222,55,31)" fg:x="18911" fg:w="8"/><text x="94.8145%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::uri::path::PathAndQuery&gt; (3 samples, 0.02%)</title><rect x="94.5895%" y="1124" width="0.0150%" height="15" fill="rgb(221,221,31)" fg:x="18916" fg:w="3"/><text x="94.8395%" y="1134.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::byte_str::ByteStr&gt; (3 samples, 0.02%)</title><rect x="94.5895%" y="1140" width="0.0150%" height="15" fill="rgb(227,168,26)" fg:x="18916" fg:w="3"/><text x="94.8395%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (3 samples, 0.02%)</title><rect x="94.5895%" y="1156" width="0.0150%" height="15" fill="rgb(224,139,9)" fg:x="18916" fg:w="3"/><text x="94.8395%" y="1166.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="94.5895%" y="1172" width="0.0150%" height="15" fill="rgb(254,172,0)" fg:x="18916" fg:w="3"/><text x="94.8395%" y="1182.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::recv_msg (29 samples, 0.15%)</title><rect x="94.4694%" y="1092" width="0.1450%" height="15" fill="rgb(235,203,1)" fg:x="18892" fg:w="29"/><text x="94.7194%" y="1102.50"></text></g><g><title>http::request::Request&lt;T&gt;::new (2 samples, 0.01%)</title><rect x="94.6045%" y="1108" width="0.0100%" height="15" fill="rgb(216,205,24)" fg:x="18919" fg:w="2"/><text x="94.8545%" y="1118.50"></text></g><g><title>hyper::body::body::Body::empty (6 samples, 0.03%)</title><rect x="94.6195%" y="1092" width="0.0300%" height="15" fill="rgb(233,24,6)" fg:x="18922" fg:w="6"/><text x="94.8695%" y="1102.50"></text></g><g><title>hyper::body::body::Body::new (6 samples, 0.03%)</title><rect x="94.6195%" y="1108" width="0.0300%" height="15" fill="rgb(244,110,9)" fg:x="18922" fg:w="6"/><text x="94.8695%" y="1118.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="94.7045%" y="1108" width="0.0100%" height="15" fill="rgb(239,222,42)" fg:x="18939" fg:w="2"/><text x="94.9545%" y="1118.50"></text></g><g><title>hyper::proto::h1::Http1Transaction::should_read_first (3 samples, 0.02%)</title><rect x="94.7195%" y="1108" width="0.0150%" height="15" fill="rgb(218,145,13)" fg:x="18942" fg:w="3"/><text x="94.9695%" y="1118.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::is_server (2 samples, 0.01%)</title><rect x="94.7245%" y="1124" width="0.0100%" height="15" fill="rgb(207,69,11)" fg:x="18943" fg:w="2"/><text x="94.9745%" y="1134.50"></text></g><g><title>hyper::proto::h1::conn::State::busy (2 samples, 0.01%)</title><rect x="94.7345%" y="1108" width="0.0100%" height="15" fill="rgb(220,223,22)" fg:x="18945" fg:w="2"/><text x="94.9845%" y="1118.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read (260 samples, 1.30%)</title><rect x="93.4593%" y="1060" width="1.3001%" height="15" fill="rgb(245,102,5)" fg:x="18690" fg:w="260"/><text x="93.7093%" y="1070.50"></text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_read_head (69 samples, 0.35%)</title><rect x="94.4144%" y="1076" width="0.3450%" height="15" fill="rgb(211,148,2)" fg:x="18881" fg:w="69"/><text x="94.6644%" y="1086.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (22 samples, 0.11%)</title><rect x="94.6495%" y="1092" width="0.1100%" height="15" fill="rgb(241,13,44)" fg:x="18928" fg:w="22"/><text x="94.8995%" y="1102.50"></text></g><g><title>tracing_core::dispatcher::has_been_set (2 samples, 0.01%)</title><rect x="94.7495%" y="1108" width="0.0100%" height="15" fill="rgb(219,137,21)" fg:x="18948" fg:w="2"/><text x="94.9995%" y="1118.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.01%)</title><rect x="94.7495%" y="1124" width="0.0100%" height="15" fill="rgb(242,206,5)" fg:x="18948" fg:w="2"/><text x="94.9995%" y="1134.50"></text></g><g><title>&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::is_end_stream (2 samples, 0.01%)</title><rect x="94.8445%" y="1076" width="0.0100%" height="15" fill="rgb(217,114,22)" fg:x="18967" fg:w="2"/><text x="95.0945%" y="1086.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::is_end_stream (2 samples, 0.01%)</title><rect x="94.8445%" y="1092" width="0.0100%" height="15" fill="rgb(253,206,42)" fg:x="18967" fg:w="2"/><text x="95.0945%" y="1102.50"></text></g><g><title>&lt;http_body::combinators::map_err::MapErr&lt;B,F&gt; as http_body::Body&gt;::is_end_stream (2 samples, 0.01%)</title><rect x="94.8445%" y="1108" width="0.0100%" height="15" fill="rgb(236,102,18)" fg:x="18967" fg:w="2"/><text x="95.0945%" y="1118.50"></text></g><g><title>&lt;http_body::full::Full&lt;D&gt; as http_body::Body&gt;::is_end_stream (2 samples, 0.01%)</title><rect x="94.8445%" y="1124" width="0.0100%" height="15" fill="rgb(208,59,49)" fg:x="18967" fg:w="2"/><text x="95.0945%" y="1134.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (2 samples, 0.01%)</title><rect x="94.8445%" y="1140" width="0.0100%" height="15" fill="rgb(215,194,28)" fg:x="18967" fg:w="2"/><text x="95.0945%" y="1150.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (2 samples, 0.01%)</title><rect x="94.8445%" y="1156" width="0.0100%" height="15" fill="rgb(243,207,11)" fg:x="18967" fg:w="2"/><text x="95.0945%" y="1166.50"></text></g><g><title>&lt;http::response::Response&lt;B&gt; as http_body::Body&gt;::size_hint (2 samples, 0.01%)</title><rect x="94.8945%" y="1108" width="0.0100%" height="15" fill="rgb(254,179,35)" fg:x="18977" fg:w="2"/><text x="95.1445%" y="1118.50"></text></g><g><title>&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;D,E&gt; as http_body::Body&gt;::size_hint (2 samples, 0.01%)</title><rect x="94.8945%" y="1124" width="0.0100%" height="15" fill="rgb(235,97,3)" fg:x="18977" fg:w="2"/><text x="95.1445%" y="1134.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as http_body::Body&gt;::size_hint (2 samples, 0.01%)</title><rect x="94.8945%" y="1140" width="0.0100%" height="15" fill="rgb(215,155,33)" fg:x="18977" fg:w="2"/><text x="95.1445%" y="1150.50"></text></g><g><title>&lt;F as axum::handler::Handler&lt;(M,T1),S,B&gt;&gt;::call::_{{closure}} (17 samples, 0.09%)</title><rect x="95.1345%" y="1300" width="0.0850%" height="15" fill="rgb(223,128,12)" fg:x="19025" fg:w="17"/><text x="95.3845%" y="1310.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (19 samples, 0.10%)</title><rect x="95.1345%" y="1284" width="0.0950%" height="15" fill="rgb(208,157,18)" fg:x="19025" fg:w="19"/><text x="95.3845%" y="1294.50"></text></g><g><title>_ZN74_$LT$F$u20$as$u20$axum..handler..Handler$LT$$LP$M$C$T1$RP$$C$S$C$B$GT$$GT$4call28_$u7b$$u7b$closure$u7d$$u7d$17hb08400195c6c03dbE.llvm.7914098352864015154 (2 samples, 0.01%)</title><rect x="95.2195%" y="1300" width="0.0100%" height="15" fill="rgb(249,70,54)" fg:x="19042" fg:w="2"/><text x="95.4695%" y="1310.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project (3 samples, 0.02%)</title><rect x="95.2295%" y="1284" width="0.0150%" height="15" fill="rgb(244,118,24)" fg:x="19044" fg:w="3"/><text x="95.4795%" y="1294.50"></text></g><g><title>__GI___libc_free (9 samples, 0.05%)</title><rect x="95.2445%" y="1428" width="0.0450%" height="15" fill="rgb(211,54,0)" fg:x="19047" fg:w="9"/><text x="95.4945%" y="1438.50"></text></g><g><title>_int_free (8 samples, 0.04%)</title><rect x="95.2495%" y="1444" width="0.0400%" height="15" fill="rgb(245,137,45)" fg:x="19048" fg:w="8"/><text x="95.4995%" y="1454.50"></text></g><g><title>unlink_chunk (4 samples, 0.02%)</title><rect x="95.2695%" y="1460" width="0.0200%" height="15" fill="rgb(232,154,31)" fg:x="19052" fg:w="4"/><text x="95.5195%" y="1470.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.05%)</title><rect x="95.2445%" y="1380" width="0.0500%" height="15" fill="rgb(253,6,39)" fg:x="19047" fg:w="10"/><text x="95.4945%" y="1390.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.05%)</title><rect x="95.2445%" y="1396" width="0.0500%" height="15" fill="rgb(234,183,24)" fg:x="19047" fg:w="10"/><text x="95.4945%" y="1406.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.05%)</title><rect x="95.2445%" y="1412" width="0.0500%" height="15" fill="rgb(252,84,40)" fg:x="19047" fg:w="10"/><text x="95.4945%" y="1422.50"></text></g><g><title>&lt;futures_util::future::try_future::into_future::IntoFuture&lt;Fut&gt; as core::future::future::Future&gt;::poll (46 samples, 0.23%)</title><rect x="95.0745%" y="1204" width="0.2300%" height="15" fill="rgb(224,65,2)" fg:x="19013" fg:w="46"/><text x="95.3245%" y="1214.50"></text></g><g><title>&lt;F as futures_core::future::TryFuture&gt;::try_poll (46 samples, 0.23%)</title><rect x="95.0745%" y="1220" width="0.2300%" height="15" fill="rgb(229,38,24)" fg:x="19013" fg:w="46"/><text x="95.3245%" y="1230.50"></text></g><g><title>&lt;axum::handler::future::IntoServiceFuture&lt;F&gt; as core::future::future::Future&gt;::poll (46 samples, 0.23%)</title><rect x="95.0745%" y="1236" width="0.2300%" height="15" fill="rgb(218,131,50)" fg:x="19013" fg:w="46"/><text x="95.3245%" y="1246.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (46 samples, 0.23%)</title><rect x="95.0745%" y="1252" width="0.2300%" height="15" fill="rgb(233,106,18)" fg:x="19013" fg:w="46"/><text x="95.3245%" y="1262.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (46 samples, 0.23%)</title><rect x="95.0745%" y="1268" width="0.2300%" height="15" fill="rgb(220,216,11)" fg:x="19013" fg:w="46"/><text x="95.3245%" y="1278.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project_replace (12 samples, 0.06%)</title><rect x="95.2445%" y="1284" width="0.0600%" height="15" fill="rgb(251,100,45)" fg:x="19047" fg:w="12"/><text x="95.4945%" y="1294.50"></text></g><g><title>core::ptr::drop_in_place&lt;(pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt;&gt;,())&gt; (12 samples, 0.06%)</title><rect x="95.2445%" y="1300" width="0.0600%" height="15" fill="rgb(235,143,32)" fg:x="19047" fg:w="12"/><text x="95.4945%" y="1310.50"></text></g><g><title>core::ptr::drop_in_place&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt;&gt;&gt; (12 samples, 0.06%)</title><rect x="95.2445%" y="1316" width="0.0600%" height="15" fill="rgb(248,124,34)" fg:x="19047" fg:w="12"/><text x="95.4945%" y="1326.50"></text></g><g><title>&lt;pin_project_lite::__private::UnsafeDropInPlaceGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.06%)</title><rect x="95.2445%" y="1332" width="0.0600%" height="15" fill="rgb(225,221,4)" fg:x="19047" fg:w="12"/><text x="95.4945%" y="1342.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt;&gt; (12 samples, 0.06%)</title><rect x="95.2445%" y="1348" width="0.0600%" height="15" fill="rgb(242,27,43)" fg:x="19047" fg:w="12"/><text x="95.4945%" y="1358.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt; (12 samples, 0.06%)</title><rect x="95.2445%" y="1364" width="0.0600%" height="15" fill="rgb(227,54,8)" fg:x="19047" fg:w="12"/><text x="95.4945%" y="1374.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;rust_axum::read_users as axum::handler::Handler&lt;(axum_core::extract::private::ViaParts,rust_axum::DatabaseConnection),sqlx_core::pool::Pool&lt;sqlx_postgres::database::Postgres&gt;&gt;&gt;::call::{{closure}}&gt; (2 samples, 0.01%)</title><rect x="95.2945%" y="1380" width="0.0100%" height="15" fill="rgb(253,139,49)" fg:x="19057" fg:w="2"/><text x="95.5445%" y="1390.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (75 samples, 0.38%)</title><rect x="94.9395%" y="1124" width="0.3750%" height="15" fill="rgb(231,26,43)" fg:x="18986" fg:w="75"/><text x="95.1895%" y="1134.50"></text></g><g><title>&lt;tower::util::map_response::MapResponseFuture&lt;F,N&gt; as core::future::future::Future&gt;::poll (74 samples, 0.37%)</title><rect x="94.9445%" y="1140" width="0.3700%" height="15" fill="rgb(207,121,39)" fg:x="18987" fg:w="74"/><text x="95.1945%" y="1150.50"></text></g><g><title>&lt;futures_util::future::try_future::MapOk&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (64 samples, 0.32%)</title><rect x="94.9945%" y="1156" width="0.3200%" height="15" fill="rgb(223,101,35)" fg:x="18997" fg:w="64"/><text x="95.2445%" y="1166.50"></text></g><g><title>&lt;futures_util::future::future::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (64 samples, 0.32%)</title><rect x="94.9945%" y="1172" width="0.3200%" height="15" fill="rgb(232,87,23)" fg:x="18997" fg:w="64"/><text x="95.2445%" y="1182.50"></text></g><g><title>&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (64 samples, 0.32%)</title><rect x="94.9945%" y="1188" width="0.3200%" height="15" fill="rgb(225,180,29)" fg:x="18997" fg:w="64"/><text x="95.2445%" y="1198.50"></text></g><g><title>futures_util::future::future::map::_::&lt;impl futures_util::future::future::map::Map&lt;Fut,F&gt;&gt;::project (2 samples, 0.01%)</title><rect x="95.3045%" y="1204" width="0.0100%" height="15" fill="rgb(225,25,17)" fg:x="19059" fg:w="2"/><text x="95.5545%" y="1214.50"></text></g><g><title>&lt;tower::util::boxed_clone::BoxCloneService&lt;T,U,E&gt; as tower_service::Service&lt;T&gt;&gt;::poll_ready (4 samples, 0.02%)</title><rect x="95.3195%" y="1124" width="0.0200%" height="15" fill="rgb(223,8,52)" fg:x="19062" fg:w="4"/><text x="95.5695%" y="1134.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as tower_service::Service&lt;Request&gt;&gt;::poll_ready (4 samples, 0.02%)</title><rect x="95.3195%" y="1140" width="0.0200%" height="15" fill="rgb(246,42,21)" fg:x="19062" fg:w="4"/><text x="95.5695%" y="1150.50"></text></g><g><title>&lt;tower::util::map_future::MapFuture&lt;S,F&gt; as tower_service::Service&lt;R&gt;&gt;::poll_ready (4 samples, 0.02%)</title><rect x="95.3195%" y="1156" width="0.0200%" height="15" fill="rgb(205,64,43)" fg:x="19062" fg:w="4"/><text x="95.5695%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="95.3545%" y="1156" width="0.0200%" height="15" fill="rgb(221,160,13)" fg:x="19069" fg:w="4"/><text x="95.6045%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt; (4 samples, 0.02%)</title><rect x="95.3545%" y="1172" width="0.0200%" height="15" fill="rgb(239,58,35)" fg:x="19069" fg:w="4"/><text x="95.6045%" y="1182.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_response::MapResponseFuture&lt;axum::handler::future::IntoServiceFuture&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt;&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;&gt; (3 samples, 0.02%)</title><rect x="95.3595%" y="1188" width="0.0150%" height="15" fill="rgb(251,26,40)" fg:x="19070" fg:w="3"/><text x="95.6095%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::try_future::MapOk&lt;axum::handler::future::IntoServiceFuture&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt;&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;&gt; (3 samples, 0.02%)</title><rect x="95.3595%" y="1204" width="0.0150%" height="15" fill="rgb(247,0,4)" fg:x="19070" fg:w="3"/><text x="95.6095%" y="1214.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::Map&lt;futures_util::future::try_future::into_future::IntoFuture&lt;axum::handler::future::IntoServiceFuture&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt;&gt;&gt;,futures_util::fns::MapOkFn&lt;&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="95.3595%" y="1220" width="0.0150%" height="15" fill="rgb(218,130,10)" fg:x="19070" fg:w="3"/><text x="95.6095%" y="1230.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::future::map::Map&lt;futures_util::future::try_future::into_future::IntoFuture&lt;axum::handler::future::IntoServiceFuture&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt;&gt;&gt;,futures_util::fns::MapOkFn&lt;&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="95.3595%" y="1236" width="0.0150%" height="15" fill="rgb(239,32,7)" fg:x="19070" fg:w="3"/><text x="95.6095%" y="1246.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="95.3795%" y="1236" width="0.0100%" height="15" fill="rgb(210,192,24)" fg:x="19074" fg:w="2"/><text x="95.6295%" y="1246.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.03%)</title><rect x="95.3745%" y="1204" width="0.0250%" height="15" fill="rgb(226,212,17)" fg:x="19073" fg:w="5"/><text x="95.6245%" y="1214.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.03%)</title><rect x="95.3745%" y="1220" width="0.0250%" height="15" fill="rgb(219,201,28)" fg:x="19073" fg:w="5"/><text x="95.6245%" y="1230.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="95.3895%" y="1236" width="0.0100%" height="15" fill="rgb(235,207,41)" fg:x="19076" fg:w="2"/><text x="95.6395%" y="1246.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.03%)</title><rect x="95.3745%" y="1188" width="0.0300%" height="15" fill="rgb(241,95,54)" fg:x="19073" fg:w="6"/><text x="95.6245%" y="1198.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (14 samples, 0.07%)</title><rect x="95.3445%" y="1124" width="0.0700%" height="15" fill="rgb(248,12,23)" fg:x="19067" fg:w="14"/><text x="95.5945%" y="1134.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::oneshot::State&lt;tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;,http::request::Request&lt;hyper::body::body::Body&gt;&gt;&gt; (13 samples, 0.07%)</title><rect x="95.3495%" y="1140" width="0.0650%" height="15" fill="rgb(228,173,4)" fg:x="19068" fg:w="13"/><text x="95.5995%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;&gt; (8 samples, 0.04%)</title><rect x="95.3745%" y="1156" width="0.0400%" height="15" fill="rgb(254,99,5)" fg:x="19073" fg:w="8"/><text x="95.6245%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn tower::util::boxed_clone::CloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;&gt;+Error = core::convert::Infallible+Future = core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;+core::marker::Send&gt;&gt;+Response = http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;+core::marker::Send&gt;&gt; (8 samples, 0.04%)</title><rect x="95.3745%" y="1172" width="0.0400%" height="15" fill="rgb(212,184,17)" fg:x="19073" fg:w="8"/><text x="95.6245%" y="1182.50"></text></g><g><title>_ZN4core3ptr1377drop_in_place$LT$tower..util..map_future..MapFuture$LT$tower..util..map_response..MapResponse$LT$axum..handler..service..HandlerService$LT$rust_axum..read_users$C$$LP$axum_core..extract..private..ViaParts$C$rust_axum..DatabaseConnection$RP$$C$sqlx_core..pool..Pool$LT$sqlx_postgres..database..Postgres$GT$$C$hyper..body..body..Body$GT$$C$$LT$http..response..Response$LT$http_body..combinators..box_body..UnsyncBoxBody$LT$bytes..bytes..Bytes$C$axum_core..error..Error$GT$$GT$$u20$as$u20$axum_core..response..into_response..IntoResponse$GT$..into_response$GT$$C$tower..util..boxed_clone..BoxCloneService$LT$http..request..Request$LT$hyper..body..body..Body$GT$$C$http..response..Response$LT$http_body..combinators..box_body..UnsyncBoxBody$LT$bytes..bytes..Bytes$C$axum_core..error..Error$GT$$GT$$C$core..convert..Infallible$GT$..new$LT$tower..util..map_response..MapResponse$LT$axum..handler..service..HandlerService$LT$rust_axum..read_users$C$$LP$axum_core..extract..private..ViaParts$C$rust_axum..DatabaseConnection$RP$$C$sqlx_core..pool..Pool$LT$sqlx_postgres..database..Postgres$GT$$C$hyper..body..body..Body$GT$$C$$LT$http..response..Response$LT$http_body..combinators..box_body..UnsyncBoxBody$LT$bytes..bytes..Bytes$C$axum_core..error..Error$GT$$GT$$u20$as$u20$axum_core..response..into_response..IntoResponse$GT$..into_response$GT$$GT$..$u7b$$u7b$closure$u7d$$u7d$$GT$$GT$17h27a4ddacd353a13aE (2 samples, 0.01%)</title><rect x="95.4045%" y="1188" width="0.0100%" height="15" fill="rgb(252,174,1)" fg:x="19079" fg:w="2"/><text x="95.6545%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::map_response::MapResponse&lt;axum::handler::service::HandlerService&lt;rust_axum::read_users,(axum_core::extract::private::ViaParts,rust_axum::DatabaseConnection),sqlx_core::pool::Pool&lt;sqlx_postgres::database::Postgres&gt;,hyper::body::body::Body&gt;,&lt;http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; as axum_core::response::into_response::IntoResponse&gt;::into_response&gt;&gt; (2 samples, 0.01%)</title><rect x="95.4045%" y="1204" width="0.0100%" height="15" fill="rgb(241,118,51)" fg:x="19079" fg:w="2"/><text x="95.6545%" y="1214.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::handler::service::HandlerService&lt;rust_axum::read_users,(axum_core::extract::private::ViaParts,rust_axum::DatabaseConnection),sqlx_core::pool::Pool&lt;sqlx_postgres::database::Postgres&gt;,hyper::body::body::Body&gt;&gt; (2 samples, 0.01%)</title><rect x="95.4045%" y="1220" width="0.0100%" height="15" fill="rgb(227,94,47)" fg:x="19079" fg:w="2"/><text x="95.6545%" y="1230.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::Pool&lt;sqlx_postgres::database::Postgres&gt;&gt; (2 samples, 0.01%)</title><rect x="95.4045%" y="1236" width="0.0100%" height="15" fill="rgb(229,104,2)" fg:x="19079" fg:w="2"/><text x="95.6545%" y="1246.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;sqlx_core::pool::inner::PoolInner&lt;sqlx_postgres::database::Postgres&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="95.4045%" y="1252" width="0.0100%" height="15" fill="rgb(219,28,31)" fg:x="19079" fg:w="2"/><text x="95.6545%" y="1262.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="95.4045%" y="1268" width="0.0100%" height="15" fill="rgb(233,109,36)" fg:x="19079" fg:w="2"/><text x="95.6545%" y="1278.50"></text></g><g><title>&lt;tower::util::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (103 samples, 0.52%)</title><rect x="94.9045%" y="1108" width="0.5151%" height="15" fill="rgb(246,88,11)" fg:x="18979" fg:w="103"/><text x="95.1545%" y="1118.50"></text></g><g><title>axum::routing::route::set_allow_header (5 samples, 0.03%)</title><rect x="95.4195%" y="1108" width="0.0250%" height="15" fill="rgb(209,212,17)" fg:x="19082" fg:w="5"/><text x="95.6695%" y="1118.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (5 samples, 0.03%)</title><rect x="95.4195%" y="1124" width="0.0250%" height="15" fill="rgb(243,59,29)" fg:x="19082" fg:w="5"/><text x="95.6695%" y="1134.50"></text></g><g><title>core::mem::replace (5 samples, 0.03%)</title><rect x="95.4195%" y="1140" width="0.0250%" height="15" fill="rgb(244,205,48)" fg:x="19082" fg:w="5"/><text x="95.6695%" y="1150.50"></text></g><g><title>core::ptr::read (5 samples, 0.03%)</title><rect x="95.4195%" y="1156" width="0.0250%" height="15" fill="rgb(227,30,6)" fg:x="19082" fg:w="5"/><text x="95.6695%" y="1166.50"></text></g><g><title>http::header::map::Pos::resolve (2 samples, 0.01%)</title><rect x="95.4495%" y="1172" width="0.0100%" height="15" fill="rgb(220,205,48)" fg:x="19088" fg:w="2"/><text x="95.6995%" y="1182.50"></text></g><g><title>http::header::map::Pos::is_some (2 samples, 0.01%)</title><rect x="95.4495%" y="1188" width="0.0100%" height="15" fill="rgb(250,94,14)" fg:x="19088" fg:w="2"/><text x="95.6995%" y="1198.50"></text></g><g><title>http::header::map::Pos::is_none (2 samples, 0.01%)</title><rect x="95.4495%" y="1204" width="0.0100%" height="15" fill="rgb(216,119,42)" fg:x="19088" fg:w="2"/><text x="95.6995%" y="1214.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::contains_key (3 samples, 0.02%)</title><rect x="95.4495%" y="1124" width="0.0150%" height="15" fill="rgb(232,155,0)" fg:x="19088" fg:w="3"/><text x="95.6995%" y="1134.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::as_header_name::Sealed&gt;::find (3 samples, 0.02%)</title><rect x="95.4495%" y="1140" width="0.0150%" height="15" fill="rgb(212,24,32)" fg:x="19088" fg:w="3"/><text x="95.6995%" y="1150.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::find (3 samples, 0.02%)</title><rect x="95.4495%" y="1156" width="0.0150%" height="15" fill="rgb(216,69,20)" fg:x="19088" fg:w="3"/><text x="95.6995%" y="1166.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert_entry (2 samples, 0.01%)</title><rect x="95.4745%" y="1172" width="0.0100%" height="15" fill="rgb(229,73,31)" fg:x="19093" fg:w="2"/><text x="95.7245%" y="1182.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.01%)</title><rect x="95.4745%" y="1188" width="0.0100%" height="15" fill="rgb(224,219,20)" fg:x="19093" fg:w="2"/><text x="95.7245%" y="1198.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::reserve_one (3 samples, 0.02%)</title><rect x="95.4845%" y="1172" width="0.0150%" height="15" fill="rgb(215,146,41)" fg:x="19095" fg:w="3"/><text x="95.7345%" y="1182.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert (9 samples, 0.05%)</title><rect x="95.4645%" y="1124" width="0.0450%" height="15" fill="rgb(244,71,31)" fg:x="19091" fg:w="9"/><text x="95.7145%" y="1134.50"></text></g><g><title>&lt;http::header::name::HeaderName as http::header::map::into_header_name::Sealed&gt;::insert (9 samples, 0.05%)</title><rect x="95.4645%" y="1140" width="0.0450%" height="15" fill="rgb(224,24,11)" fg:x="19091" fg:w="9"/><text x="95.7145%" y="1150.50"></text></g><g><title>http::header::map::HeaderMap&lt;T&gt;::insert2 (9 samples, 0.05%)</title><rect x="95.4645%" y="1156" width="0.0450%" height="15" fill="rgb(229,76,15)" fg:x="19091" fg:w="9"/><text x="95.7145%" y="1166.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="95.5246%" y="1252" width="0.0100%" height="15" fill="rgb(209,93,2)" fg:x="19103" fg:w="2"/><text x="95.7746%" y="1262.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.01%)</title><rect x="95.5246%" y="1268" width="0.0100%" height="15" fill="rgb(216,200,50)" fg:x="19103" fg:w="2"/><text x="95.7746%" y="1278.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.01%)</title><rect x="95.5246%" y="1284" width="0.0100%" height="15" fill="rgb(211,67,34)" fg:x="19103" fg:w="2"/><text x="95.7746%" y="1294.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.01%)</title><rect x="95.5246%" y="1300" width="0.0100%" height="15" fill="rgb(225,87,47)" fg:x="19103" fg:w="2"/><text x="95.7746%" y="1310.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.01%)</title><rect x="95.5246%" y="1316" width="0.0100%" height="15" fill="rgb(217,185,16)" fg:x="19103" fg:w="2"/><text x="95.7746%" y="1326.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.01%)</title><rect x="95.5246%" y="1332" width="0.0100%" height="15" fill="rgb(205,0,0)" fg:x="19103" fg:w="2"/><text x="95.7746%" y="1342.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="95.5246%" y="1348" width="0.0100%" height="15" fill="rgb(207,116,45)" fg:x="19103" fg:w="2"/><text x="95.7746%" y="1358.50"></text></g><g><title>http::header::value::HeaderValue::from_str::_{{closure}} (7 samples, 0.04%)</title><rect x="95.5146%" y="1156" width="0.0350%" height="15" fill="rgb(221,156,26)" fg:x="19101" fg:w="7"/><text x="95.7646%" y="1166.50"></text></g><g><title>bytes::bytes::Bytes::copy_from_slice (6 samples, 0.03%)</title><rect x="95.5196%" y="1172" width="0.0300%" height="15" fill="rgb(213,140,4)" fg:x="19102" fg:w="6"/><text x="95.7696%" y="1182.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.03%)</title><rect x="95.5246%" y="1188" width="0.0250%" height="15" fill="rgb(231,224,15)" fg:x="19103" fg:w="5"/><text x="95.7746%" y="1198.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.03%)</title><rect x="95.5246%" y="1204" width="0.0250%" height="15" fill="rgb(244,76,20)" fg:x="19103" fg:w="5"/><text x="95.7746%" y="1214.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.03%)</title><rect x="95.5246%" y="1220" width="0.0250%" height="15" fill="rgb(238,117,7)" fg:x="19103" fg:w="5"/><text x="95.7746%" y="1230.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.03%)</title><rect x="95.5246%" y="1236" width="0.0250%" height="15" fill="rgb(235,1,10)" fg:x="19103" fg:w="5"/><text x="95.7746%" y="1246.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.02%)</title><rect x="95.5346%" y="1252" width="0.0150%" height="15" fill="rgb(216,165,6)" fg:x="19105" fg:w="3"/><text x="95.7846%" y="1262.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="95.5346%" y="1268" width="0.0150%" height="15" fill="rgb(246,91,35)" fg:x="19105" fg:w="3"/><text x="95.7846%" y="1278.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="95.5396%" y="1284" width="0.0100%" height="15" fill="rgb(228,96,24)" fg:x="19106" fg:w="2"/><text x="95.7896%" y="1294.50"></text></g><g><title>http::header::value::HeaderValue::from_str (9 samples, 0.05%)</title><rect x="95.5096%" y="1124" width="0.0450%" height="15" fill="rgb(254,217,53)" fg:x="19100" fg:w="9"/><text x="95.7596%" y="1134.50"></text></g><g><title>http::header::value::HeaderValue::try_from_generic (9 samples, 0.05%)</title><rect x="95.5096%" y="1140" width="0.0450%" height="15" fill="rgb(209,60,0)" fg:x="19100" fg:w="9"/><text x="95.7596%" y="1150.50"></text></g><g><title>&lt;axum::routing::route::RouteFuture&lt;B,E&gt; as core::future::future::Future&gt;::poll (140 samples, 0.70%)</title><rect x="94.8595%" y="1092" width="0.7001%" height="15" fill="rgb(250,93,26)" fg:x="18970" fg:w="140"/><text x="95.1095%" y="1102.50"></text></g><g><title>axum::routing::route::set_content_length (23 samples, 0.12%)</title><rect x="95.4445%" y="1108" width="0.1150%" height="15" fill="rgb(211,9,40)" fg:x="19087" fg:w="23"/><text x="95.6945%" y="1118.50"></text></g><g><title>&lt;core::task::poll::Poll&lt;core::result::Result&lt;T,E&gt;&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.01%)</title><rect x="95.5596%" y="1092" width="0.0100%" height="15" fill="rgb(242,57,20)" fg:x="19110" fg:w="2"/><text x="95.8096%" y="1102.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::RouteFutureKind&lt;hyper::body::body::Body,core::convert::Infallible&gt;&gt; (3 samples, 0.02%)</title><rect x="95.5746%" y="1140" width="0.0150%" height="15" fill="rgb(248,85,48)" fg:x="19113" fg:w="3"/><text x="95.8246%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::oneshot::Oneshot&lt;tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;,http::request::Request&lt;hyper::body::body::Body&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="95.5746%" y="1156" width="0.0150%" height="15" fill="rgb(212,117,2)" fg:x="19113" fg:w="3"/><text x="95.8246%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;tower::util::oneshot::State&lt;tower::util::boxed_clone::BoxCloneService&lt;http::request::Request&lt;hyper::body::body::Body&gt;,http::response::Response&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;,core::convert::Infallible&gt;,http::request::Request&lt;hyper::body::body::Body&gt;&gt;&gt; (3 samples, 0.02%)</title><rect x="95.5746%" y="1172" width="0.0150%" height="15" fill="rgb(243,19,3)" fg:x="19113" fg:w="3"/><text x="95.8246%" y="1182.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::poll_msg (147 samples, 0.74%)</title><rect x="94.8595%" y="1076" width="0.7351%" height="15" fill="rgb(232,217,24)" fg:x="18970" fg:w="147"/><text x="95.1095%" y="1086.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (5 samples, 0.03%)</title><rect x="95.5696%" y="1092" width="0.0250%" height="15" fill="rgb(224,175,40)" fg:x="19112" fg:w="5"/><text x="95.8196%" y="1102.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;axum::routing::route::RouteFuture&lt;hyper::body::body::Body,core::convert::Infallible&gt;&gt;&gt; (5 samples, 0.03%)</title><rect x="95.5696%" y="1108" width="0.0250%" height="15" fill="rgb(212,162,32)" fg:x="19112" fg:w="5"/><text x="95.8196%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;axum::routing::route::RouteFuture&lt;hyper::body::body::Body,core::convert::Infallible&gt;&gt; (4 samples, 0.02%)</title><rect x="95.5746%" y="1124" width="0.0200%" height="15" fill="rgb(215,9,4)" fg:x="19113" fg:w="4"/><text x="95.8246%" y="1134.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Server&lt;S,hyper::body::body::Body&gt; as hyper::proto::h1::dispatch::Dispatch&gt;::should_poll (6 samples, 0.03%)</title><rect x="95.5946%" y="1076" width="0.0300%" height="15" fill="rgb(242,42,7)" fg:x="19117" fg:w="6"/><text x="95.8446%" y="1086.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (6 samples, 0.03%)</title><rect x="95.5946%" y="1092" width="0.0300%" height="15" fill="rgb(242,184,45)" fg:x="19117" fg:w="6"/><text x="95.8446%" y="1102.50"></text></g><g><title>__GI___libc_free (6 samples, 0.03%)</title><rect x="95.6246%" y="1076" width="0.0300%" height="15" fill="rgb(228,111,51)" fg:x="19123" fg:w="6"/><text x="95.8746%" y="1086.50"></text></g><g><title>_int_free (5 samples, 0.03%)</title><rect x="95.6296%" y="1092" width="0.0250%" height="15" fill="rgb(236,147,17)" fg:x="19124" fg:w="5"/><text x="95.8796%" y="1102.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.02%)</title><rect x="95.6546%" y="1076" width="0.0150%" height="15" fill="rgb(210,75,22)" fg:x="19129" fg:w="3"/><text x="95.9046%" y="1086.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.02%)</title><rect x="95.6546%" y="1092" width="0.0150%" height="15" fill="rgb(217,159,45)" fg:x="19129" fg:w="3"/><text x="95.9046%" y="1102.50"></text></g><g><title>core::ptr::drop_in_place&lt;hyper::proto::h1::dispatch::OptGuard&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1076" width="0.0100%" height="15" fill="rgb(245,165,53)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1086.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::OptGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="95.6796%" y="1092" width="0.0100%" height="15" fill="rgb(251,190,50)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1102.50"></text></g><g><title>core::pin::Pin&lt;P&gt;::set (2 samples, 0.01%)</title><rect x="95.6796%" y="1108" width="0.0100%" height="15" fill="rgb(208,203,29)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1118.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1124" width="0.0100%" height="15" fill="rgb(207,209,35)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1134.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body::combinators::box_body::UnsyncBoxBody&lt;bytes::bytes::Bytes,axum_core::error::Error&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1140" width="0.0100%" height="15" fill="rgb(230,144,49)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn http_body::Body+Data = bytes::bytes::Bytes+Error = axum_core::error::Error+core::marker::Send&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1156" width="0.0100%" height="15" fill="rgb(229,31,6)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1166.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn http_body::Body+Data = bytes::bytes::Bytes+Error = axum_core::error::Error+core::marker::Send&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1172" width="0.0100%" height="15" fill="rgb(251,129,24)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1182.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body::combinators::map_err::MapErr&lt;http_body::full::Full&lt;bytes::bytes::Bytes&gt;,axum_core::error::Error::new&lt;core::convert::Infallible&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1188" width="0.0100%" height="15" fill="rgb(235,105,15)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;http_body::full::Full&lt;bytes::bytes::Bytes&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1204" width="0.0100%" height="15" fill="rgb(216,52,43)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1214.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;bytes::bytes::Bytes&gt;&gt; (2 samples, 0.01%)</title><rect x="95.6796%" y="1220" width="0.0100%" height="15" fill="rgb(238,144,41)" fg:x="19134" fg:w="2"/><text x="95.9296%" y="1230.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::can_buffer_body (6 samples, 0.03%)</title><rect x="95.6896%" y="1076" width="0.0300%" height="15" fill="rgb(243,63,9)" fg:x="19136" fg:w="6"/><text x="95.9396%" y="1086.50"></text></g><g><title>hyper::proto::h1::io::Buffered&lt;T,B&gt;::can_buffer (6 samples, 0.03%)</title><rect x="95.6896%" y="1092" width="0.0300%" height="15" fill="rgb(246,208,1)" fg:x="19136" fg:w="6"/><text x="95.9396%" y="1102.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::can_buffer (5 samples, 0.03%)</title><rect x="95.6946%" y="1108" width="0.0250%" height="15" fill="rgb(233,182,18)" fg:x="19137" fg:w="5"/><text x="95.9446%" y="1118.50"></text></g><g><title>&lt;hyper::proto::h1::io::WriteBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (5 samples, 0.03%)</title><rect x="95.6946%" y="1124" width="0.0250%" height="15" fill="rgb(242,224,8)" fg:x="19137" fg:w="5"/><text x="95.9446%" y="1134.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (5 samples, 0.03%)</title><rect x="95.6946%" y="1140" width="0.0250%" height="15" fill="rgb(243,54,37)" fg:x="19137" fg:w="5"/><text x="95.9446%" y="1150.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (5 samples, 0.03%)</title><rect x="95.6946%" y="1156" width="0.0250%" height="15" fill="rgb(233,192,12)" fg:x="19137" fg:w="5"/><text x="95.9446%" y="1166.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (5 samples, 0.03%)</title><rect x="95.6946%" y="1172" width="0.0250%" height="15" fill="rgb(251,192,53)" fg:x="19137" fg:w="5"/><text x="95.9446%" y="1182.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.03%)</title><rect x="95.6946%" y="1188" width="0.0250%" height="15" fill="rgb(246,141,26)" fg:x="19137" fg:w="5"/><text x="95.9446%" y="1198.50"></text></g><g><title>&lt;alloc::collections::vec_deque::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.03%)</title><rect x="95.6946%" y="1204" width="0.0250%" height="15" fill="rgb(239,195,19)" fg:x="19137" fg:w="5"/><text x="95.9446%" y="1214.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.02%)</title><rect x="95.7046%" y="1220" width="0.0150%" height="15" fill="rgb(241,16,39)" fg:x="19139" fg:w="3"/><text x="95.9546%" y="1230.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.02%)</title><rect x="95.7046%" y="1236" width="0.0150%" height="15" fill="rgb(223,13,53)" fg:x="19139" fg:w="3"/><text x="95.9546%" y="1246.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (3 samples, 0.02%)</title><rect x="95.7046%" y="1252" width="0.0150%" height="15" fill="rgb(214,227,0)" fg:x="19139" fg:w="3"/><text x="95.9546%" y="1262.50"></text></g><g><title>&lt;hyper::common::buf::BufList&lt;T&gt; as bytes::buf::buf_impl::Buf&gt;::remaining::_{{closure}} (3 samples, 0.02%)</title><rect x="95.7046%" y="1268" width="0.0150%" height="15" fill="rgb(228,103,26)" fg:x="19139" fg:w="3"/><text x="95.9546%" y="1278.50"></text></g><g><title>&lt;hyper::proto::h1::encode::EncodedBuf&lt;B&gt; as bytes::buf::buf_impl::Buf&gt;::remaining (3 samples, 0.02%)</title><rect x="95.7046%" y="1284" width="0.0150%" height="15" fill="rgb(254,177,53)" fg:x="19139" fg:w="3"/><text x="95.9546%" y="1294.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_body_and_end (8 samples, 0.04%)</title><rect x="95.7246%" y="1076" width="0.0400%" height="15" fill="rgb(208,201,34)" fg:x="19143" fg:w="8"/><text x="95.9746%" y="1086.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::encode_and_end (7 samples, 0.04%)</title><rect x="95.7296%" y="1092" width="0.0350%" height="15" fill="rgb(212,39,5)" fg:x="19144" fg:w="7"/><text x="95.9796%" y="1102.50"></text></g><g><title>hyper::proto::h1::io::WriteBuf&lt;B&gt;::buffer (2 samples, 0.01%)</title><rect x="95.7546%" y="1108" width="0.0100%" height="15" fill="rgb(246,117,3)" fg:x="19149" fg:w="2"/><text x="96.0046%" y="1118.50"></text></g><g><title>hyper::proto::h1::conn::State::wants_keep_alive (3 samples, 0.02%)</title><rect x="95.7996%" y="1108" width="0.0150%" height="15" fill="rgb(244,118,39)" fg:x="19158" fg:w="3"/><text x="96.0496%" y="1118.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.02%)</title><rect x="95.8546%" y="1140" width="0.0150%" height="15" fill="rgb(241,64,10)" fg:x="19169" fg:w="3"/><text x="96.1046%" y="1150.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="95.8546%" y="1156" width="0.0150%" height="15" fill="rgb(229,39,44)" fg:x="19169" fg:w="3"/><text x="96.1046%" y="1166.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="95.8546%" y="1172" width="0.0150%" height="15" fill="rgb(230,226,3)" fg:x="19169" fg:w="3"/><text x="96.1046%" y="1182.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="95.8546%" y="1188" width="0.0150%" height="15" fill="rgb(222,13,42)" fg:x="19169" fg:w="3"/><text x="96.1046%" y="1198.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="95.8546%" y="1204" width="0.0150%" height="15" fill="rgb(247,180,54)" fg:x="19169" fg:w="3"/><text x="96.1046%" y="1214.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;mut A&gt;::eq (2 samples, 0.01%)</title><rect x="95.8746%" y="1140" width="0.0100%" height="15" fill="rgb(205,96,16)" fg:x="19173" fg:w="2"/><text x="96.1246%" y="1150.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="95.8746%" y="1156" width="0.0100%" height="15" fill="rgb(205,100,21)" fg:x="19173" fg:w="2"/><text x="96.1246%" y="1166.50"></text></g><g><title>&lt;T as core::option::SpecOptionPartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="95.8746%" y="1172" width="0.0100%" height="15" fill="rgb(248,51,4)" fg:x="19173" fg:w="2"/><text x="96.1246%" y="1182.50"></text></g><g><title>http::extensions::Extensions::get (2 samples, 0.01%)</title><rect x="95.8846%" y="1140" width="0.0100%" height="15" fill="rgb(217,197,30)" fg:x="19175" fg:w="2"/><text x="96.1346%" y="1150.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (3 samples, 0.02%)</title><rect x="95.8946%" y="1156" width="0.0150%" height="15" fill="rgb(240,179,40)" fg:x="19177" fg:w="3"/><text x="96.1446%" y="1166.50"></text></g><g><title>&lt;http::header::map::Drain&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.02%)</title><rect x="95.9496%" y="1172" width="0.0200%" height="15" fill="rgb(212,185,35)" fg:x="19188" fg:w="4"/><text x="96.1996%" y="1182.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server::encode_headers_with_lower_case::LowercaseWriter as hyper::proto::h1::role::HeaderNameWriter&gt;::write_header_name (3 samples, 0.02%)</title><rect x="95.9746%" y="1172" width="0.0150%" height="15" fill="rgb(251,222,31)" fg:x="19193" fg:w="3"/><text x="96.2246%" y="1182.50"></text></g><g><title>hyper::proto::h1::role::extend (3 samples, 0.02%)</title><rect x="95.9746%" y="1188" width="0.0150%" height="15" fill="rgb(208,140,36)" fg:x="19193" fg:w="3"/><text x="96.2246%" y="1198.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.02%)</title><rect x="95.9746%" y="1204" width="0.0150%" height="15" fill="rgb(220,148,1)" fg:x="19193" fg:w="3"/><text x="96.2246%" y="1214.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="95.9746%" y="1220" width="0.0150%" height="15" fill="rgb(254,4,28)" fg:x="19193" fg:w="3"/><text x="96.2246%" y="1230.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="95.9746%" y="1236" width="0.0150%" height="15" fill="rgb(222,185,44)" fg:x="19193" fg:w="3"/><text x="96.2246%" y="1246.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="95.9746%" y="1252" width="0.0150%" height="15" fill="rgb(215,74,39)" fg:x="19193" fg:w="3"/><text x="96.2246%" y="1262.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="95.9746%" y="1268" width="0.0150%" height="15" fill="rgb(247,86,4)" fg:x="19193" fg:w="3"/><text x="96.2246%" y="1278.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server::encode_headers_with_lower_case::LowercaseWriter as hyper::proto::h1::role::HeaderNameWriter&gt;::write_header_name_with_colon (4 samples, 0.02%)</title><rect x="95.9896%" y="1172" width="0.0200%" height="15" fill="rgb(231,105,32)" fg:x="19196" fg:w="4"/><text x="96.2396%" y="1182.50"></text></g><g><title>hyper::proto::h1::role::extend (4 samples, 0.02%)</title><rect x="95.9896%" y="1188" width="0.0200%" height="15" fill="rgb(222,65,35)" fg:x="19196" fg:w="4"/><text x="96.2396%" y="1198.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.02%)</title><rect x="95.9896%" y="1204" width="0.0200%" height="15" fill="rgb(218,145,35)" fg:x="19196" fg:w="4"/><text x="96.2396%" y="1214.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.01%)</title><rect x="95.9996%" y="1220" width="0.0100%" height="15" fill="rgb(208,7,15)" fg:x="19198" fg:w="2"/><text x="96.2496%" y="1230.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.01%)</title><rect x="95.9996%" y="1236" width="0.0100%" height="15" fill="rgb(209,83,13)" fg:x="19198" fg:w="2"/><text x="96.2496%" y="1246.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="95.9996%" y="1252" width="0.0100%" height="15" fill="rgb(218,3,10)" fg:x="19198" fg:w="2"/><text x="96.2496%" y="1262.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="96.0096%" y="1236" width="0.0100%" height="15" fill="rgb(211,219,4)" fg:x="19200" fg:w="2"/><text x="96.2596%" y="1246.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.02%)</title><rect x="96.0096%" y="1172" width="0.0150%" height="15" fill="rgb(228,194,12)" fg:x="19200" fg:w="3"/><text x="96.2596%" y="1182.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.02%)</title><rect x="96.0096%" y="1188" width="0.0150%" height="15" fill="rgb(210,175,7)" fg:x="19200" fg:w="3"/><text x="96.2596%" y="1198.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.02%)</title><rect x="96.0096%" y="1204" width="0.0150%" height="15" fill="rgb(243,132,6)" fg:x="19200" fg:w="3"/><text x="96.2596%" y="1214.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="96.0096%" y="1220" width="0.0150%" height="15" fill="rgb(207,72,18)" fg:x="19200" fg:w="3"/><text x="96.2596%" y="1230.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::map::Drain&lt;http::header::value::HeaderValue&gt;&gt; (2 samples, 0.01%)</title><rect x="96.0246%" y="1172" width="0.0100%" height="15" fill="rgb(236,1,18)" fg:x="19203" fg:w="2"/><text x="96.2746%" y="1182.50"></text></g><g><title>&lt;http::header::map::Drain&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="96.0246%" y="1188" width="0.0100%" height="15" fill="rgb(227,0,18)" fg:x="19203" fg:w="2"/><text x="96.2746%" y="1198.50"></text></g><g><title>core::ptr::drop_in_place&lt;http::header::value::HeaderValue&gt; (6 samples, 0.03%)</title><rect x="96.0346%" y="1172" width="0.0300%" height="15" fill="rgb(247,37,5)" fg:x="19205" fg:w="6"/><text x="96.2846%" y="1182.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes::Bytes&gt; (6 samples, 0.03%)</title><rect x="96.0346%" y="1188" width="0.0300%" height="15" fill="rgb(237,179,24)" fg:x="19205" fg:w="6"/><text x="96.2846%" y="1198.50"></text></g><g><title>&lt;bytes::bytes::Bytes as core::ops::drop::Drop&gt;::drop (6 samples, 0.03%)</title><rect x="96.0346%" y="1204" width="0.0300%" height="15" fill="rgb(226,53,20)" fg:x="19205" fg:w="6"/><text x="96.2846%" y="1214.50"></text></g><g><title>bytes::bytes::promotable_even_drop (5 samples, 0.03%)</title><rect x="96.0396%" y="1220" width="0.0250%" height="15" fill="rgb(247,75,7)" fg:x="19206" fg:w="5"/><text x="96.2896%" y="1230.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="96.0546%" y="1236" width="0.0100%" height="15" fill="rgb(233,96,12)" fg:x="19209" fg:w="2"/><text x="96.3046%" y="1246.50"></text></g><g><title>hyper::common::date::extend (2 samples, 0.01%)</title><rect x="96.0646%" y="1172" width="0.0100%" height="15" fill="rgb(224,125,0)" fg:x="19211" fg:w="2"/><text x="96.3146%" y="1182.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="96.0846%" y="1252" width="0.0100%" height="15" fill="rgb(224,92,25)" fg:x="19215" fg:w="2"/><text x="96.3346%" y="1262.50"></text></g><g><title>&lt;hyper::proto::h1::role::Server as hyper::proto::h1::Http1Transaction&gt;::encode (55 samples, 0.28%)</title><rect x="95.8246%" y="1124" width="0.2750%" height="15" fill="rgb(224,42,24)" fg:x="19163" fg:w="55"/><text x="96.0746%" y="1134.50"></text></g><g><title>hyper::proto::h1::role::Server::encode_headers_with_lower_case (41 samples, 0.21%)</title><rect x="95.8946%" y="1140" width="0.2050%" height="15" fill="rgb(234,132,49)" fg:x="19177" fg:w="41"/><text x="96.1446%" y="1150.50"></text></g><g><title>hyper::proto::h1::role::Server::encode_headers (38 samples, 0.19%)</title><rect x="95.9096%" y="1156" width="0.1900%" height="15" fill="rgb(248,100,35)" fg:x="19180" fg:w="38"/><text x="96.1596%" y="1166.50"></text></g><g><title>hyper::proto::h1::role::extend (5 samples, 0.03%)</title><rect x="96.0746%" y="1172" width="0.0250%" height="15" fill="rgb(239,94,40)" fg:x="19213" fg:w="5"/><text x="96.3246%" y="1182.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.03%)</title><rect x="96.0746%" y="1188" width="0.0250%" height="15" fill="rgb(235,139,28)" fg:x="19213" fg:w="5"/><text x="96.3246%" y="1198.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.02%)</title><rect x="96.0796%" y="1204" width="0.0200%" height="15" fill="rgb(217,144,7)" fg:x="19214" fg:w="4"/><text x="96.3296%" y="1214.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.02%)</title><rect x="96.0796%" y="1220" width="0.0200%" height="15" fill="rgb(227,55,4)" fg:x="19214" fg:w="4"/><text x="96.3296%" y="1230.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="96.0846%" y="1236" width="0.0150%" height="15" fill="rgb(252,82,54)" fg:x="19215" fg:w="3"/><text x="96.3346%" y="1246.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::Span&gt; (2 samples, 0.01%)</title><rect x="96.1046%" y="1124" width="0.0100%" height="15" fill="rgb(245,172,4)" fg:x="19219" fg:w="2"/><text x="96.3546%" y="1134.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::encode_head (70 samples, 0.35%)</title><rect x="95.7746%" y="1092" width="0.3500%" height="15" fill="rgb(207,26,27)" fg:x="19153" fg:w="70"/><text x="96.0246%" y="1102.50"></text></g><g><title>hyper::proto::h1::role::encode_headers (62 samples, 0.31%)</title><rect x="95.8146%" y="1108" width="0.3100%" height="15" fill="rgb(252,98,18)" fg:x="19161" fg:w="62"/><text x="96.0646%" y="1118.50"></text></g><g><title>tracing::__macro_support::__disabled_span (2 samples, 0.01%)</title><rect x="96.1146%" y="1124" width="0.0100%" height="15" fill="rgb(244,8,26)" fg:x="19221" fg:w="2"/><text x="96.3646%" y="1134.50"></text></g><g><title>tracing::span::Span::new_disabled (2 samples, 0.01%)</title><rect x="96.1146%" y="1140" width="0.0100%" height="15" fill="rgb(237,173,45)" fg:x="19221" fg:w="2"/><text x="96.3646%" y="1150.50"></text></g><g><title>&lt;hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt; as core::future::future::Future&gt;::poll (628 samples, 3.14%)</title><rect x="93.0043%" y="996" width="3.1403%" height="15" fill="rgb(208,213,49)" fg:x="18599" fg:w="628"/><text x="93.2543%" y="1006.50">&lt;hy..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_catch (627 samples, 3.14%)</title><rect x="93.0093%" y="1012" width="3.1353%" height="15" fill="rgb(212,122,37)" fg:x="18600" fg:w="627"/><text x="93.2593%" y="1022.50">hyp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_inner (622 samples, 3.11%)</title><rect x="93.0343%" y="1028" width="3.1103%" height="15" fill="rgb(213,80,17)" fg:x="18605" fg:w="622"/><text x="93.2843%" y="1038.50">hyp..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_loop (578 samples, 2.89%)</title><rect x="93.2543%" y="1044" width="2.8903%" height="15" fill="rgb(206,210,43)" fg:x="18649" fg:w="578"/><text x="93.5043%" y="1054.50">hy..</text></g><g><title>hyper::proto::h1::dispatch::Dispatcher&lt;D,Bs,I,T&gt;::poll_write (277 samples, 1.39%)</title><rect x="94.7595%" y="1060" width="1.3851%" height="15" fill="rgb(229,214,3)" fg:x="18950" fg:w="277"/><text x="95.0095%" y="1070.50"></text></g><g><title>hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::write_head (76 samples, 0.38%)</title><rect x="95.7646%" y="1076" width="0.3800%" height="15" fill="rgb(235,213,29)" fg:x="19151" fg:w="76"/><text x="96.0146%" y="1086.50"></text></g><g><title>hyper::proto::h1::encode::Encoder::is_eof (4 samples, 0.02%)</title><rect x="96.1246%" y="1092" width="0.0200%" height="15" fill="rgb(248,135,26)" fg:x="19223" fg:w="4"/><text x="96.3746%" y="1102.50"></text></g><g><title>&lt;hyper::server::conn::ProtoServer&lt;T,B,S,E&gt; as core::future::future::Future&gt;::poll (629 samples, 3.15%)</title><rect x="93.0043%" y="980" width="3.1453%" height="15" fill="rgb(242,188,12)" fg:x="18599" fg:w="629"/><text x="93.2543%" y="990.50">&lt;hy..</text></g><g><title>&lt;hyper::server::conn::upgrades::UpgradeableConnection&lt;I,S,E&gt; as core::future::future::Future&gt;::poll (662 samples, 3.31%)</title><rect x="92.8693%" y="964" width="3.3103%" height="15" fill="rgb(245,38,12)" fg:x="18572" fg:w="662"/><text x="93.1193%" y="974.50">&lt;hy..</text></g><g><title>core::option::Option&lt;T&gt;::as_mut (6 samples, 0.03%)</title><rect x="96.1496%" y="980" width="0.0300%" height="15" fill="rgb(218,42,13)" fg:x="19228" fg:w="6"/><text x="96.3996%" y="990.50"></text></g><g><title>&lt;hyper::server::server::new_svc::NewSvcTask&lt;I,N,S,E,W&gt; as core::future::future::Future&gt;::poll (679 samples, 3.40%)</title><rect x="92.8193%" y="948" width="3.3953%" height="15" fill="rgb(238,132,49)" fg:x="18562" fg:w="679"/><text x="93.0693%" y="958.50">&lt;hy..</text></g><g><title>core::task::poll::Poll&lt;T&gt;::map (7 samples, 0.04%)</title><rect x="96.1796%" y="964" width="0.0350%" height="15" fill="rgb(209,196,19)" fg:x="19234" fg:w="7"/><text x="96.4296%" y="974.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.01%)</title><rect x="96.2596%" y="1012" width="0.0100%" height="15" fill="rgb(244,131,22)" fg:x="19250" fg:w="2"/><text x="96.5096%" y="1022.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.01%)</title><rect x="96.2596%" y="1028" width="0.0100%" height="15" fill="rgb(223,18,34)" fg:x="19250" fg:w="2"/><text x="96.5096%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (12 samples, 0.06%)</title><rect x="96.2146%" y="948" width="0.0600%" height="15" fill="rgb(252,124,54)" fg:x="19241" fg:w="12"/><text x="96.4646%" y="958.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (12 samples, 0.06%)</title><rect x="96.2146%" y="964" width="0.0600%" height="15" fill="rgb(229,106,42)" fg:x="19241" fg:w="12"/><text x="96.4646%" y="974.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (3 samples, 0.02%)</title><rect x="96.2596%" y="980" width="0.0150%" height="15" fill="rgb(221,129,1)" fg:x="19250" fg:w="3"/><text x="96.5096%" y="990.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (3 samples, 0.02%)</title><rect x="96.2596%" y="996" width="0.0150%" height="15" fill="rgb(229,74,15)" fg:x="19250" fg:w="3"/><text x="96.5096%" y="1006.50"></text></g><g><title>_ZN9sqlx_core4pool10connection24PoolConnection$LT$DB$GT$14return_to_pool28_$u7b$$u7b$closure$u7d$$u7d$17h463437dcc54b2e26E.llvm.9728720789901659972 (2 samples, 0.01%)</title><rect x="96.2896%" y="964" width="0.0100%" height="15" fill="rgb(210,206,50)" fg:x="19256" fg:w="2"/><text x="96.5396%" y="974.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::connection::Floating&lt;sqlx_postgres::database::Postgres,sqlx_core::pool::connection::Live&lt;sqlx_postgres::database::Postgres&gt;&gt;::return_to_pool::{{closure}}&gt; (3 samples, 0.02%)</title><rect x="96.3096%" y="964" width="0.0150%" height="15" fill="rgb(251,114,31)" fg:x="19260" fg:w="3"/><text x="96.5596%" y="974.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_write::_{{closure}} (80 samples, 0.40%)</title><rect x="96.4646%" y="1124" width="0.4000%" height="15" fill="rgb(215,225,28)" fg:x="19291" fg:w="80"/><text x="96.7146%" y="1134.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write (80 samples, 0.40%)</title><rect x="96.4646%" y="1140" width="0.4000%" height="15" fill="rgb(237,109,14)" fg:x="19291" fg:w="80"/><text x="96.7146%" y="1150.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (78 samples, 0.39%)</title><rect x="96.4746%" y="1156" width="0.3900%" height="15" fill="rgb(230,13,37)" fg:x="19293" fg:w="78"/><text x="96.7246%" y="1166.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (78 samples, 0.39%)</title><rect x="96.4746%" y="1172" width="0.3900%" height="15" fill="rgb(231,40,28)" fg:x="19293" fg:w="78"/><text x="96.7246%" y="1182.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Write&gt;::write::_{{closure}} (78 samples, 0.39%)</title><rect x="96.4746%" y="1188" width="0.3900%" height="15" fill="rgb(231,202,18)" fg:x="19293" fg:w="78"/><text x="96.7246%" y="1198.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Write&gt;::write (78 samples, 0.39%)</title><rect x="96.4746%" y="1204" width="0.3900%" height="15" fill="rgb(225,33,18)" fg:x="19293" fg:w="78"/><text x="96.7246%" y="1214.50"></text></g><g><title>std::sys_common::net::TcpStream::write (74 samples, 0.37%)</title><rect x="96.4946%" y="1220" width="0.3700%" height="15" fill="rgb(223,64,47)" fg:x="19297" fg:w="74"/><text x="96.7446%" y="1230.50"></text></g><g><title>__libc_send (74 samples, 0.37%)</title><rect x="96.4946%" y="1236" width="0.3700%" height="15" fill="rgb(234,114,13)" fg:x="19297" fg:w="74"/><text x="96.7446%" y="1246.50"></text></g><g><title>__libc_send (71 samples, 0.36%)</title><rect x="96.5097%" y="1252" width="0.3550%" height="15" fill="rgb(248,56,40)" fg:x="19300" fg:w="71"/><text x="96.7597%" y="1262.50"></text></g><g><title>[unknown] (71 samples, 0.36%)</title><rect x="96.5097%" y="1268" width="0.3550%" height="15" fill="rgb(221,194,21)" fg:x="19300" fg:w="71"/><text x="96.7597%" y="1278.50"></text></g><g><title>[unknown] (70 samples, 0.35%)</title><rect x="96.5147%" y="1284" width="0.3500%" height="15" fill="rgb(242,108,46)" fg:x="19301" fg:w="70"/><text x="96.7647%" y="1294.50"></text></g><g><title>[unknown] (67 samples, 0.34%)</title><rect x="96.5297%" y="1300" width="0.3350%" height="15" fill="rgb(220,106,10)" fg:x="19304" fg:w="67"/><text x="96.7797%" y="1310.50"></text></g><g><title>[unknown] (66 samples, 0.33%)</title><rect x="96.5347%" y="1316" width="0.3300%" height="15" fill="rgb(211,88,4)" fg:x="19305" fg:w="66"/><text x="96.7847%" y="1326.50"></text></g><g><title>[unknown] (61 samples, 0.31%)</title><rect x="96.5597%" y="1332" width="0.3050%" height="15" fill="rgb(214,95,34)" fg:x="19310" fg:w="61"/><text x="96.8097%" y="1342.50"></text></g><g><title>[unknown] (57 samples, 0.29%)</title><rect x="96.5797%" y="1348" width="0.2850%" height="15" fill="rgb(250,160,33)" fg:x="19314" fg:w="57"/><text x="96.8297%" y="1358.50"></text></g><g><title>[unknown] (53 samples, 0.27%)</title><rect x="96.5997%" y="1364" width="0.2650%" height="15" fill="rgb(225,29,10)" fg:x="19318" fg:w="53"/><text x="96.8497%" y="1374.50"></text></g><g><title>[unknown] (44 samples, 0.22%)</title><rect x="96.6447%" y="1380" width="0.2200%" height="15" fill="rgb(224,28,30)" fg:x="19327" fg:w="44"/><text x="96.8947%" y="1390.50"></text></g><g><title>[unknown] (36 samples, 0.18%)</title><rect x="96.6847%" y="1396" width="0.1800%" height="15" fill="rgb(231,77,4)" fg:x="19335" fg:w="36"/><text x="96.9347%" y="1406.50"></text></g><g><title>[unknown] (35 samples, 0.18%)</title><rect x="96.6897%" y="1412" width="0.1750%" height="15" fill="rgb(209,63,21)" fg:x="19336" fg:w="35"/><text x="96.9397%" y="1422.50"></text></g><g><title>[unknown] (23 samples, 0.12%)</title><rect x="96.7497%" y="1428" width="0.1150%" height="15" fill="rgb(226,22,11)" fg:x="19348" fg:w="23"/><text x="96.9997%" y="1438.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="96.8247%" y="1444" width="0.0400%" height="15" fill="rgb(216,82,30)" fg:x="19363" fg:w="8"/><text x="97.0747%" y="1454.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::flush::_{{closure}} (93 samples, 0.47%)</title><rect x="96.4146%" y="1028" width="0.4650%" height="15" fill="rgb(246,227,38)" fg:x="19281" fg:w="93"/><text x="96.6646%" y="1038.50"></text></g><g><title>&lt;sqlx_core::net::socket::Write&lt;S&gt; as core::future::future::Future&gt;::poll (92 samples, 0.46%)</title><rect x="96.4196%" y="1044" width="0.4600%" height="15" fill="rgb(251,203,53)" fg:x="19282" fg:w="92"/><text x="96.6696%" y="1054.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::try_write (92 samples, 0.46%)</title><rect x="96.4196%" y="1060" width="0.4600%" height="15" fill="rgb(254,101,1)" fg:x="19282" fg:w="92"/><text x="96.6696%" y="1070.50"></text></g><g><title>sqlx_core::rt::rt_tokio::socket::&lt;impl sqlx_core::net::socket::Socket for tokio::net::tcp::stream::TcpStream&gt;::try_write (91 samples, 0.46%)</title><rect x="96.4246%" y="1076" width="0.4550%" height="15" fill="rgb(241,180,5)" fg:x="19283" fg:w="91"/><text x="96.6746%" y="1086.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_write (88 samples, 0.44%)</title><rect x="96.4396%" y="1092" width="0.4400%" height="15" fill="rgb(218,168,4)" fg:x="19286" fg:w="88"/><text x="96.6896%" y="1102.50"></text></g><g><title>tokio::runtime::io::registration::Registration::try_io (83 samples, 0.42%)</title><rect x="96.4646%" y="1108" width="0.4150%" height="15" fill="rgb(224,223,32)" fg:x="19291" fg:w="83"/><text x="96.7146%" y="1118.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::ready_event (3 samples, 0.02%)</title><rect x="96.8647%" y="1124" width="0.0150%" height="15" fill="rgb(236,106,22)" fg:x="19371" fg:w="3"/><text x="97.1147%" y="1134.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.02%)</title><rect x="96.8647%" y="1140" width="0.0150%" height="15" fill="rgb(206,121,5)" fg:x="19371" fg:w="3"/><text x="97.1147%" y="1150.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="96.8647%" y="1156" width="0.0150%" height="15" fill="rgb(233,87,28)" fg:x="19371" fg:w="3"/><text x="97.1147%" y="1166.50"></text></g><g><title>sqlx_postgres::connection::PgConnection::handle_ready_for_query (3 samples, 0.02%)</title><rect x="96.8797%" y="1028" width="0.0150%" height="15" fill="rgb(236,137,17)" fg:x="19374" fg:w="3"/><text x="97.1297%" y="1038.50"></text></g><g><title>sqlx_core::io::decode::Decode::decode (3 samples, 0.02%)</title><rect x="96.8797%" y="1044" width="0.0150%" height="15" fill="rgb(209,183,38)" fg:x="19374" fg:w="3"/><text x="97.1297%" y="1054.50"></text></g><g><title>&lt;sqlx_postgres::message::ready_for_query::ReadyForQuery as sqlx_core::io::decode::Decode&gt;::decode_with (3 samples, 0.02%)</title><rect x="96.8797%" y="1060" width="0.0150%" height="15" fill="rgb(206,162,44)" fg:x="19374" fg:w="3"/><text x="97.1297%" y="1070.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::poll_read_ready (5 samples, 0.03%)</title><rect x="96.9597%" y="1140" width="0.0250%" height="15" fill="rgb(237,70,39)" fg:x="19390" fg:w="5"/><text x="97.2097%" y="1150.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::poll_read_ready (5 samples, 0.03%)</title><rect x="96.9597%" y="1156" width="0.0250%" height="15" fill="rgb(212,176,5)" fg:x="19390" fg:w="5"/><text x="97.2097%" y="1166.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_read_ready (3 samples, 0.02%)</title><rect x="96.9697%" y="1172" width="0.0150%" height="15" fill="rgb(232,95,16)" fg:x="19392" fg:w="3"/><text x="97.2197%" y="1182.50"></text></g><g><title>tokio::runtime::io::registration::Registration::poll_ready (3 samples, 0.02%)</title><rect x="96.9697%" y="1188" width="0.0150%" height="15" fill="rgb(219,115,35)" fg:x="19392" fg:w="3"/><text x="97.2197%" y="1198.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (2 samples, 0.01%)</title><rect x="96.9747%" y="1204" width="0.0100%" height="15" fill="rgb(251,67,27)" fg:x="19393" fg:w="2"/><text x="97.2247%" y="1214.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.03%)</title><rect x="97.0047%" y="1204" width="0.0300%" height="15" fill="rgb(222,95,40)" fg:x="19399" fg:w="6"/><text x="97.2547%" y="1214.50"></text></g><g><title>std::io::error::repr_bitpacked::Repr::data (2 samples, 0.01%)</title><rect x="97.0347%" y="1220" width="0.0100%" height="15" fill="rgb(250,35,16)" fg:x="19405" fg:w="2"/><text x="97.2847%" y="1230.50"></text></g><g><title>std::io::error::repr_bitpacked::decode_repr (2 samples, 0.01%)</title><rect x="97.0347%" y="1236" width="0.0100%" height="15" fill="rgb(224,86,44)" fg:x="19405" fg:w="2"/><text x="97.2847%" y="1246.50"></text></g><g><title>std::io::error::Error::kind (6 samples, 0.03%)</title><rect x="97.0347%" y="1204" width="0.0300%" height="15" fill="rgb(237,53,53)" fg:x="19405" fg:w="6"/><text x="97.2847%" y="1214.50"></text></g><g><title>std::sys::unix::decode_error_kind (4 samples, 0.02%)</title><rect x="97.0447%" y="1220" width="0.0200%" height="15" fill="rgb(208,171,33)" fg:x="19407" fg:w="4"/><text x="97.2947%" y="1230.50"></text></g><g><title>[unknown] (86 samples, 0.43%)</title><rect x="97.0847%" y="1380" width="0.4300%" height="15" fill="rgb(222,64,27)" fg:x="19415" fg:w="86"/><text x="97.3347%" y="1390.50"></text></g><g><title>[unknown] (85 samples, 0.43%)</title><rect x="97.0897%" y="1396" width="0.4250%" height="15" fill="rgb(221,121,35)" fg:x="19416" fg:w="85"/><text x="97.3397%" y="1406.50"></text></g><g><title>[unknown] (84 samples, 0.42%)</title><rect x="97.0947%" y="1412" width="0.4200%" height="15" fill="rgb(228,137,42)" fg:x="19417" fg:w="84"/><text x="97.3447%" y="1422.50"></text></g><g><title>[unknown] (84 samples, 0.42%)</title><rect x="97.0947%" y="1428" width="0.4200%" height="15" fill="rgb(227,54,21)" fg:x="19417" fg:w="84"/><text x="97.3447%" y="1438.50"></text></g><g><title>[unknown] (76 samples, 0.38%)</title><rect x="97.1347%" y="1444" width="0.3800%" height="15" fill="rgb(240,168,33)" fg:x="19425" fg:w="76"/><text x="97.3847%" y="1454.50"></text></g><g><title>[unknown] (75 samples, 0.38%)</title><rect x="97.1397%" y="1460" width="0.3750%" height="15" fill="rgb(243,159,6)" fg:x="19426" fg:w="75"/><text x="97.3897%" y="1470.50"></text></g><g><title>[unknown] (69 samples, 0.35%)</title><rect x="97.1697%" y="1476" width="0.3450%" height="15" fill="rgb(205,211,41)" fg:x="19432" fg:w="69"/><text x="97.4197%" y="1486.50"></text></g><g><title>[unknown] (55 samples, 0.28%)</title><rect x="97.2397%" y="1492" width="0.2750%" height="15" fill="rgb(253,30,1)" fg:x="19446" fg:w="55"/><text x="97.4897%" y="1502.50"></text></g><g><title>[unknown] (28 samples, 0.14%)</title><rect x="97.3747%" y="1508" width="0.1400%" height="15" fill="rgb(226,80,18)" fg:x="19473" fg:w="28"/><text x="97.6247%" y="1518.50"></text></g><g><title>[unknown] (26 samples, 0.13%)</title><rect x="97.3847%" y="1524" width="0.1300%" height="15" fill="rgb(253,156,46)" fg:x="19475" fg:w="26"/><text x="97.6347%" y="1534.50"></text></g><g><title>[unknown] (19 samples, 0.10%)</title><rect x="97.4197%" y="1540" width="0.0950%" height="15" fill="rgb(248,87,27)" fg:x="19482" fg:w="19"/><text x="97.6697%" y="1550.50"></text></g><g><title>[unknown] (18 samples, 0.09%)</title><rect x="97.4247%" y="1556" width="0.0900%" height="15" fill="rgb(227,122,2)" fg:x="19483" fg:w="18"/><text x="97.6747%" y="1566.50"></text></g><g><title>[unknown] (17 samples, 0.09%)</title><rect x="97.4297%" y="1572" width="0.0850%" height="15" fill="rgb(229,94,39)" fg:x="19484" fg:w="17"/><text x="97.6797%" y="1582.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="97.4797%" y="1588" width="0.0350%" height="15" fill="rgb(225,173,31)" fg:x="19494" fg:w="7"/><text x="97.7297%" y="1598.50"></text></g><g><title>__libc_recv (89 samples, 0.45%)</title><rect x="97.0747%" y="1348" width="0.4450%" height="15" fill="rgb(239,176,30)" fg:x="19413" fg:w="89"/><text x="97.3247%" y="1358.50"></text></g><g><title>__libc_recv (88 samples, 0.44%)</title><rect x="97.0797%" y="1364" width="0.4400%" height="15" fill="rgb(212,104,21)" fg:x="19414" fg:w="88"/><text x="97.3297%" y="1374.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (96 samples, 0.48%)</title><rect x="97.0647%" y="1220" width="0.4800%" height="15" fill="rgb(240,209,40)" fg:x="19411" fg:w="96"/><text x="97.3147%" y="1230.50"></text></g><g><title>mio::io_source::IoSource&lt;T&gt;::do_io (95 samples, 0.48%)</title><rect x="97.0697%" y="1236" width="0.4750%" height="15" fill="rgb(234,195,5)" fg:x="19412" fg:w="95"/><text x="97.3197%" y="1246.50"></text></g><g><title>mio::sys::unix::IoSourceState::do_io (95 samples, 0.48%)</title><rect x="97.0697%" y="1252" width="0.4750%" height="15" fill="rgb(238,213,1)" fg:x="19412" fg:w="95"/><text x="97.3197%" y="1262.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read::_{{closure}} (95 samples, 0.48%)</title><rect x="97.0697%" y="1268" width="0.4750%" height="15" fill="rgb(235,182,54)" fg:x="19412" fg:w="95"/><text x="97.3197%" y="1278.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (95 samples, 0.48%)</title><rect x="97.0697%" y="1284" width="0.4750%" height="15" fill="rgb(229,50,46)" fg:x="19412" fg:w="95"/><text x="97.3197%" y="1294.50"></text></g><g><title>std::sys_common::net::TcpStream::read (94 samples, 0.47%)</title><rect x="97.0747%" y="1300" width="0.4700%" height="15" fill="rgb(219,145,13)" fg:x="19413" fg:w="94"/><text x="97.3247%" y="1310.50"></text></g><g><title>std::sys::unix::net::Socket::read (94 samples, 0.47%)</title><rect x="97.0747%" y="1316" width="0.4700%" height="15" fill="rgb(220,226,10)" fg:x="19413" fg:w="94"/><text x="97.3247%" y="1326.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (94 samples, 0.47%)</title><rect x="97.0747%" y="1332" width="0.4700%" height="15" fill="rgb(248,47,30)" fg:x="19413" fg:w="94"/><text x="97.3247%" y="1342.50"></text></g><g><title>std::sys::unix::cvt (5 samples, 0.03%)</title><rect x="97.5198%" y="1348" width="0.0250%" height="15" fill="rgb(231,209,44)" fg:x="19502" fg:w="5"/><text x="97.7698%" y="1358.50"></text></g><g><title>std::io::error::Error::last_os_error (5 samples, 0.03%)</title><rect x="97.5198%" y="1364" width="0.0250%" height="15" fill="rgb(209,80,30)" fg:x="19502" fg:w="5"/><text x="97.7698%" y="1374.50"></text></g><g><title>std::sys::unix::os::errno (5 samples, 0.03%)</title><rect x="97.5198%" y="1380" width="0.0250%" height="15" fill="rgb(232,9,14)" fg:x="19502" fg:w="5"/><text x="97.7698%" y="1390.50"></text></g><g><title>__GI___errno_location (5 samples, 0.03%)</title><rect x="97.5198%" y="1396" width="0.0250%" height="15" fill="rgb(243,91,43)" fg:x="19502" fg:w="5"/><text x="97.7698%" y="1406.50"></text></g><g><title>&lt;&amp;mut T as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.01%)</title><rect x="97.5448%" y="1220" width="0.0100%" height="15" fill="rgb(231,90,52)" fg:x="19507" fg:w="2"/><text x="97.7948%" y="1230.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as bytes::buf::buf_mut::BufMut&gt;::chunk_mut (2 samples, 0.01%)</title><rect x="97.5448%" y="1236" width="0.0100%" height="15" fill="rgb(253,192,44)" fg:x="19507" fg:w="2"/><text x="97.7948%" y="1246.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_read_buf::_{{closure}} (99 samples, 0.50%)</title><rect x="97.0647%" y="1204" width="0.4950%" height="15" fill="rgb(241,66,31)" fg:x="19411" fg:w="99"/><text x="97.3147%" y="1214.50"></text></g><g><title>tokio::runtime::io::registration::Registration::clear_readiness (3 samples, 0.02%)</title><rect x="97.5598%" y="1204" width="0.0150%" height="15" fill="rgb(235,81,37)" fg:x="19510" fg:w="3"/><text x="97.8098%" y="1214.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::clear_readiness (3 samples, 0.02%)</title><rect x="97.5598%" y="1220" width="0.0150%" height="15" fill="rgb(223,221,9)" fg:x="19510" fg:w="3"/><text x="97.8098%" y="1230.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="97.5798%" y="1220" width="0.0100%" height="15" fill="rgb(242,180,7)" fg:x="19514" fg:w="2"/><text x="97.8298%" y="1230.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::ready_event (2 samples, 0.01%)</title><rect x="97.5798%" y="1236" width="0.0100%" height="15" fill="rgb(243,78,19)" fg:x="19514" fg:w="2"/><text x="97.8298%" y="1246.50"></text></g><g><title>&lt;sqlx_core::net::socket::Read&lt;S,B&gt; as core::future::future::Future&gt;::poll (128 samples, 0.64%)</title><rect x="96.9547%" y="1124" width="0.6401%" height="15" fill="rgb(233,23,17)" fg:x="19389" fg:w="128"/><text x="97.2047%" y="1134.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;S&gt; as sqlx_core::net::socket::Socket&gt;::try_read (122 samples, 0.61%)</title><rect x="96.9847%" y="1140" width="0.6101%" height="15" fill="rgb(252,122,45)" fg:x="19395" fg:w="122"/><text x="97.2347%" y="1150.50"></text></g><g><title>sqlx_core::rt::rt_tokio::socket::&lt;impl sqlx_core::net::socket::Socket for tokio::net::tcp::stream::TcpStream&gt;::try_read (122 samples, 0.61%)</title><rect x="96.9847%" y="1156" width="0.6101%" height="15" fill="rgb(247,108,20)" fg:x="19395" fg:w="122"/><text x="97.2347%" y="1166.50"></text></g><g><title>tokio::net::tcp::stream::TcpStream::try_read_buf (119 samples, 0.60%)</title><rect x="96.9997%" y="1172" width="0.5951%" height="15" fill="rgb(235,84,21)" fg:x="19398" fg:w="119"/><text x="97.2497%" y="1182.50"></text></g><g><title>tokio::runtime::io::registration::Registration::try_io (119 samples, 0.60%)</title><rect x="96.9997%" y="1188" width="0.5951%" height="15" fill="rgb(247,129,10)" fg:x="19398" fg:w="119"/><text x="97.2497%" y="1198.50"></text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::ready_event (4 samples, 0.02%)</title><rect x="97.5748%" y="1204" width="0.0200%" height="15" fill="rgb(208,173,14)" fg:x="19513" fg:w="4"/><text x="97.8248%" y="1214.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (24 samples, 0.12%)</title><rect x="97.5948%" y="1172" width="0.1200%" height="15" fill="rgb(236,31,38)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1182.50"></text></g><g><title>bytes::bytes_mut::release_shared (24 samples, 0.12%)</title><rect x="97.5948%" y="1188" width="0.1200%" height="15" fill="rgb(232,65,17)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1198.50"></text></g><g><title>core::mem::drop (24 samples, 0.12%)</title><rect x="97.5948%" y="1204" width="0.1200%" height="15" fill="rgb(224,45,49)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1214.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;bytes::bytes_mut::Shared&gt;&gt; (24 samples, 0.12%)</title><rect x="97.5948%" y="1220" width="0.1200%" height="15" fill="rgb(225,2,53)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1230.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::Shared&gt; (24 samples, 0.12%)</title><rect x="97.5948%" y="1236" width="0.1200%" height="15" fill="rgb(248,210,53)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1246.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (24 samples, 0.12%)</title><rect x="97.5948%" y="1252" width="0.1200%" height="15" fill="rgb(211,1,30)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1262.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (24 samples, 0.12%)</title><rect x="97.5948%" y="1268" width="0.1200%" height="15" fill="rgb(224,96,15)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1278.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.12%)</title><rect x="97.5948%" y="1284" width="0.1200%" height="15" fill="rgb(252,45,11)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1294.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (24 samples, 0.12%)</title><rect x="97.5948%" y="1300" width="0.1200%" height="15" fill="rgb(220,125,38)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1310.50"></text></g><g><title>alloc::alloc::dealloc (24 samples, 0.12%)</title><rect x="97.5948%" y="1316" width="0.1200%" height="15" fill="rgb(243,161,33)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1326.50"></text></g><g><title>__GI___libc_free (24 samples, 0.12%)</title><rect x="97.5948%" y="1332" width="0.1200%" height="15" fill="rgb(248,197,34)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1342.50"></text></g><g><title>_int_free (24 samples, 0.12%)</title><rect x="97.5948%" y="1348" width="0.1200%" height="15" fill="rgb(228,165,23)" fg:x="19517" fg:w="24"/><text x="97.8448%" y="1358.50"></text></g><g><title>malloc_consolidate (22 samples, 0.11%)</title><rect x="97.6048%" y="1364" width="0.1100%" height="15" fill="rgb(236,94,38)" fg:x="19519" fg:w="22"/><text x="97.8548%" y="1374.50"></text></g><g><title>unlink_chunk (7 samples, 0.04%)</title><rect x="97.6798%" y="1380" width="0.0350%" height="15" fill="rgb(220,13,23)" fg:x="19534" fg:w="7"/><text x="97.9298%" y="1390.50"></text></g><g><title>sqlx_core::net::socket::buffered::ReadBuffer::advance (26 samples, 0.13%)</title><rect x="97.5948%" y="1124" width="0.1300%" height="15" fill="rgb(234,26,39)" fg:x="19517" fg:w="26"/><text x="97.8448%" y="1134.50"></text></g><g><title>bytes::bytes_mut::BytesMut::unsplit (26 samples, 0.13%)</title><rect x="97.5948%" y="1140" width="0.1300%" height="15" fill="rgb(205,117,44)" fg:x="19517" fg:w="26"/><text x="97.8448%" y="1150.50"></text></g><g><title>core::ptr::drop_in_place&lt;bytes::bytes_mut::BytesMut&gt; (26 samples, 0.13%)</title><rect x="97.5948%" y="1156" width="0.1300%" height="15" fill="rgb(250,42,2)" fg:x="19517" fg:w="26"/><text x="97.8448%" y="1166.50"></text></g><g><title>bytes::bytes_mut::BytesMut::unsplit (2 samples, 0.01%)</title><rect x="97.7148%" y="1172" width="0.0100%" height="15" fill="rgb(223,83,14)" fg:x="19541" fg:w="2"/><text x="97.9648%" y="1182.50"></text></g><g><title>__GI___libc_free (2 samples, 0.01%)</title><rect x="97.7148%" y="1188" width="0.0100%" height="15" fill="rgb(241,147,50)" fg:x="19541" fg:w="2"/><text x="97.9648%" y="1198.50"></text></g><g><title>_int_free (2 samples, 0.01%)</title><rect x="97.7148%" y="1204" width="0.0100%" height="15" fill="rgb(218,90,6)" fg:x="19541" fg:w="2"/><text x="97.9648%" y="1214.50"></text></g><g><title>sqlx_postgres::connection::PgConnection::wait_until_ready::_{{closure}} (269 samples, 1.35%)</title><rect x="96.3846%" y="1012" width="1.3451%" height="15" fill="rgb(210,191,5)" fg:x="19275" fg:w="269"/><text x="96.6346%" y="1022.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv::_{{closure}} (167 samples, 0.84%)</title><rect x="96.8947%" y="1028" width="0.8351%" height="15" fill="rgb(225,139,19)" fg:x="19377" fg:w="167"/><text x="97.1447%" y="1038.50"></text></g><g><title>sqlx_postgres::connection::stream::PgStream::recv_unchecked::_{{closure}} (164 samples, 0.82%)</title><rect x="96.9097%" y="1044" width="0.8201%" height="15" fill="rgb(210,1,33)" fg:x="19380" fg:w="164"/><text x="97.1597%" y="1054.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read::_{{closure}} (163 samples, 0.82%)</title><rect x="96.9147%" y="1060" width="0.8151%" height="15" fill="rgb(213,50,3)" fg:x="19381" fg:w="163"/><text x="97.1647%" y="1070.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read_with::_{{closure}} (159 samples, 0.80%)</title><rect x="96.9347%" y="1076" width="0.7951%" height="15" fill="rgb(234,227,4)" fg:x="19385" fg:w="159"/><text x="97.1847%" y="1086.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::read_buffered::_{{closure}} (157 samples, 0.79%)</title><rect x="96.9447%" y="1092" width="0.7851%" height="15" fill="rgb(246,63,5)" fg:x="19387" fg:w="157"/><text x="97.1947%" y="1102.50"></text></g><g><title>sqlx_core::net::socket::buffered::ReadBuffer::read::_{{closure}} (156 samples, 0.78%)</title><rect x="96.9497%" y="1108" width="0.7801%" height="15" fill="rgb(245,136,27)" fg:x="19388" fg:w="156"/><text x="97.1997%" y="1118.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (279 samples, 1.40%)</title><rect x="96.3446%" y="980" width="1.3951%" height="15" fill="rgb(247,199,27)" fg:x="19267" fg:w="279"/><text x="96.5946%" y="990.50"></text></g><g><title>&lt;sqlx_postgres::connection::PgConnection as sqlx_core::connection::Connection&gt;::ping::_{{closure}} (279 samples, 1.40%)</title><rect x="96.3446%" y="996" width="1.3951%" height="15" fill="rgb(252,158,49)" fg:x="19267" fg:w="279"/><text x="96.5946%" y="1006.50"></text></g><g><title>sqlx_postgres::connection::executor::&lt;impl sqlx_postgres::connection::PgConnection&gt;::write_sync (2 samples, 0.01%)</title><rect x="97.7298%" y="1012" width="0.0100%" height="15" fill="rgb(254,73,1)" fg:x="19544" fg:w="2"/><text x="97.9798%" y="1022.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write (2 samples, 0.01%)</title><rect x="97.7298%" y="1028" width="0.0100%" height="15" fill="rgb(248,93,19)" fg:x="19544" fg:w="2"/><text x="97.9798%" y="1038.50"></text></g><g><title>sqlx_core::net::socket::buffered::BufferedSocket&lt;S&gt;::write_with (2 samples, 0.01%)</title><rect x="97.7298%" y="1044" width="0.0100%" height="15" fill="rgb(206,67,5)" fg:x="19544" fg:w="2"/><text x="97.9798%" y="1054.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.01%)</title><rect x="97.7448%" y="1092" width="0.0100%" height="15" fill="rgb(209,210,4)" fg:x="19547" fg:w="2"/><text x="97.9948%" y="1102.50"></text></g><g><title>&lt;sqlx_postgres::connection::PgConnection as sqlx_core::connection::Connection&gt;::ping (4 samples, 0.02%)</title><rect x="97.7398%" y="980" width="0.0200%" height="15" fill="rgb(214,185,36)" fg:x="19546" fg:w="4"/><text x="97.9898%" y="990.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::pin (3 samples, 0.02%)</title><rect x="97.7448%" y="996" width="0.0150%" height="15" fill="rgb(233,191,26)" fg:x="19547" fg:w="3"/><text x="97.9948%" y="1006.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (3 samples, 0.02%)</title><rect x="97.7448%" y="1012" width="0.0150%" height="15" fill="rgb(248,94,17)" fg:x="19547" fg:w="3"/><text x="97.9948%" y="1022.50"></text></g><g><title>alloc::alloc::exchange_malloc (3 samples, 0.02%)</title><rect x="97.7448%" y="1028" width="0.0150%" height="15" fill="rgb(250,64,4)" fg:x="19547" fg:w="3"/><text x="97.9948%" y="1038.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.02%)</title><rect x="97.7448%" y="1044" width="0.0150%" height="15" fill="rgb(218,41,53)" fg:x="19547" fg:w="3"/><text x="97.9948%" y="1054.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.02%)</title><rect x="97.7448%" y="1060" width="0.0150%" height="15" fill="rgb(251,176,28)" fg:x="19547" fg:w="3"/><text x="97.9948%" y="1070.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.02%)</title><rect x="97.7448%" y="1076" width="0.0150%" height="15" fill="rgb(247,22,9)" fg:x="19547" fg:w="3"/><text x="97.9948%" y="1086.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="97.7598%" y="980" width="0.0100%" height="15" fill="rgb(218,201,14)" fg:x="19550" fg:w="2"/><text x="98.0098%" y="990.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.02%)</title><rect x="97.7698%" y="1012" width="0.0150%" height="15" fill="rgb(218,94,10)" fg:x="19552" fg:w="3"/><text x="98.0198%" y="1022.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.02%)</title><rect x="97.7698%" y="1028" width="0.0150%" height="15" fill="rgb(222,183,52)" fg:x="19552" fg:w="3"/><text x="98.0198%" y="1038.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.02%)</title><rect x="97.7698%" y="1044" width="0.0150%" height="15" fill="rgb(242,140,25)" fg:x="19552" fg:w="3"/><text x="98.0198%" y="1054.50"></text></g><g><title>__rust_dealloc (2 samples, 0.01%)</title><rect x="97.7748%" y="1060" width="0.0100%" height="15" fill="rgb(235,197,38)" fg:x="19553" fg:w="2"/><text x="98.0248%" y="1070.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt;&gt; (4 samples, 0.02%)</title><rect x="97.7698%" y="980" width="0.0200%" height="15" fill="rgb(237,136,15)" fg:x="19552" fg:w="4"/><text x="98.0198%" y="990.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dyn core::future::future::Future+Output = core::result::Result&lt;(),sqlx_core::error::Error&gt;+core::marker::Send&gt;&gt; (4 samples, 0.02%)</title><rect x="97.7698%" y="996" width="0.0200%" height="15" fill="rgb(223,44,49)" fg:x="19552" fg:w="4"/><text x="98.0198%" y="1006.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push (7 samples, 0.04%)</title><rect x="97.8048%" y="1012" width="0.0350%" height="15" fill="rgb(227,71,15)" fg:x="19559" fg:w="7"/><text x="98.0548%" y="1022.50"></text></g><g><title>crossbeam_queue::array_queue::ArrayQueue&lt;T&gt;::push_or_else (7 samples, 0.04%)</title><rect x="97.8048%" y="1028" width="0.0350%" height="15" fill="rgb(225,153,20)" fg:x="19559" fg:w="7"/><text x="98.0548%" y="1038.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="97.8448%" y="1044" width="0.0100%" height="15" fill="rgb(210,190,26)" fg:x="19567" fg:w="2"/><text x="98.0948%" y="1054.50"></text></g><g><title>sqlx_core::pool::connection::Floating&lt;DB,sqlx_core::pool::connection::Live&lt;DB&gt;&gt;::into_idle (5 samples, 0.03%)</title><rect x="97.8398%" y="1012" width="0.0250%" height="15" fill="rgb(223,147,5)" fg:x="19566" fg:w="5"/><text x="98.0898%" y="1022.50"></text></g><g><title>sqlx_core::pool::connection::Live&lt;DB&gt;::into_idle (4 samples, 0.02%)</title><rect x="97.8448%" y="1028" width="0.0200%" height="15" fill="rgb(207,14,23)" fg:x="19567" fg:w="4"/><text x="98.0948%" y="1038.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.01%)</title><rect x="97.8548%" y="1044" width="0.0100%" height="15" fill="rgb(211,195,53)" fg:x="19569" fg:w="2"/><text x="98.1048%" y="1054.50"></text></g><g><title>__GI___clock_gettime (2 samples, 0.01%)</title><rect x="97.8548%" y="1060" width="0.0100%" height="15" fill="rgb(237,75,46)" fg:x="19569" fg:w="2"/><text x="98.1048%" y="1070.50"></text></g><g><title>sqlx_core::pool::inner::DecrementSizeGuard&lt;DB&gt;::cancel (2 samples, 0.01%)</title><rect x="97.8648%" y="1028" width="0.0100%" height="15" fill="rgb(254,55,14)" fg:x="19571" fg:w="2"/><text x="98.1148%" y="1038.50"></text></g><g><title>core::ptr::drop_in_place&lt;sqlx_core::pool::inner::DecrementSizeGuard&lt;sqlx_postgres::database::Postgres&gt;&gt; (2 samples, 0.01%)</title><rect x="97.8648%" y="1044" width="0.0100%" height="15" fill="rgb(230,185,30)" fg:x="19571" fg:w="2"/><text x="98.1148%" y="1054.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;sqlx_core::pool::inner::PoolInner&lt;sqlx_postgres::database::Postgres&gt;&gt;&gt; (2 samples, 0.01%)</title><rect x="97.8648%" y="1060" width="0.0100%" height="15" fill="rgb(220,14,11)" fg:x="19571" fg:w="2"/><text x="98.1148%" y="1070.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.01%)</title><rect x="97.8648%" y="1076" width="0.0100%" height="15" fill="rgb(215,169,44)" fg:x="19571" fg:w="2"/><text x="98.1148%" y="1086.50"></text></g><g><title>tokio::sync::batch_semaphore::Waiter::assign_permits (5 samples, 0.03%)</title><rect x="97.8798%" y="1044" width="0.0250%" height="15" fill="rgb(253,203,20)" fg:x="19574" fg:w="5"/><text x="98.1298%" y="1054.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="97.9448%" y="1284" width="0.0100%" height="15" fill="rgb(229,225,17)" fg:x="19587" fg:w="2"/><text x="98.1948%" y="1294.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (7 samples, 0.04%)</title><rect x="97.9248%" y="1124" width="0.0350%" height="15" fill="rgb(236,76,26)" fg:x="19583" fg:w="7"/><text x="98.1748%" y="1134.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task (6 samples, 0.03%)</title><rect x="97.9298%" y="1140" width="0.0300%" height="15" fill="rgb(234,15,30)" fg:x="19584" fg:w="6"/><text x="98.1798%" y="1150.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current (6 samples, 0.03%)</title><rect x="97.9298%" y="1156" width="0.0300%" height="15" fill="rgb(211,113,48)" fg:x="19584" fg:w="6"/><text x="98.1798%" y="1166.50"></text></g><g><title>tokio::runtime::context::with_scheduler (6 samples, 0.03%)</title><rect x="97.9298%" y="1172" width="0.0300%" height="15" fill="rgb(221,31,36)" fg:x="19584" fg:w="6"/><text x="98.1798%" y="1182.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.02%)</title><rect x="97.9398%" y="1188" width="0.0200%" height="15" fill="rgb(215,118,52)" fg:x="19586" fg:w="4"/><text x="98.1898%" y="1198.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.02%)</title><rect x="97.9398%" y="1204" width="0.0200%" height="15" fill="rgb(241,151,27)" fg:x="19586" fg:w="4"/><text x="98.1898%" y="1214.50"></text></g><g><title>tokio::runtime::context::with_scheduler::_{{closure}} (3 samples, 0.02%)</title><rect x="97.9448%" y="1220" width="0.0150%" height="15" fill="rgb(253,51,3)" fg:x="19587" fg:w="3"/><text x="98.1948%" y="1230.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (3 samples, 0.02%)</title><rect x="97.9448%" y="1236" width="0.0150%" height="15" fill="rgb(216,201,24)" fg:x="19587" fg:w="3"/><text x="98.1948%" y="1246.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::with_current::_{{closure}} (3 samples, 0.02%)</title><rect x="97.9448%" y="1252" width="0.0150%" height="15" fill="rgb(231,107,4)" fg:x="19587" fg:w="3"/><text x="98.1948%" y="1262.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_task::_{{closure}} (3 samples, 0.02%)</title><rect x="97.9448%" y="1268" width="0.0150%" height="15" fill="rgb(243,97,54)" fg:x="19587" fg:w="3"/><text x="98.1948%" y="1278.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::schedule (8 samples, 0.04%)</title><rect x="97.9248%" y="1108" width="0.0400%" height="15" fill="rgb(221,32,51)" fg:x="19583" fg:w="8"/><text x="98.1748%" y="1118.50"></text></g><g><title>tokio::sync::batch_semaphore::Semaphore::add_permits_locked (24 samples, 0.12%)</title><rect x="97.8748%" y="1028" width="0.1200%" height="15" fill="rgb(218,171,35)" fg:x="19573" fg:w="24"/><text x="98.1248%" y="1038.50"></text></g><g><title>tokio::util::wake_list::WakeList::wake_all (17 samples, 0.09%)</title><rect x="97.9098%" y="1044" width="0.0850%" height="15" fill="rgb(214,20,53)" fg:x="19580" fg:w="17"/><text x="98.1598%" y="1054.50"></text></g><g><title>core::task::wake::Waker::wake (16 samples, 0.08%)</title><rect x="97.9148%" y="1060" width="0.0800%" height="15" fill="rgb(239,9,52)" fg:x="19581" fg:w="16"/><text x="98.1648%" y="1070.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (16 samples, 0.08%)</title><rect x="97.9148%" y="1076" width="0.0800%" height="15" fill="rgb(215,114,45)" fg:x="19581" fg:w="16"/><text x="98.1648%" y="1086.50"></text></g><g><title>tokio::runtime::task::harness::&lt;impl tokio::runtime::task::raw::RawTask&gt;::wake_by_val (14 samples, 0.07%)</title><rect x="97.9248%" y="1092" width="0.0700%" height="15" fill="rgb(208,118,9)" fg:x="19583" fg:w="14"/><text x="98.1748%" y="1102.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_notified_by_val (6 samples, 0.03%)</title><rect x="97.9648%" y="1108" width="0.0300%" height="15" fill="rgb(235,7,39)" fg:x="19591" fg:w="6"/><text x="98.2148%" y="1118.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (6 samples, 0.03%)</title><rect x="97.9648%" y="1124" width="0.0300%" height="15" fill="rgb(243,225,15)" fg:x="19591" fg:w="6"/><text x="98.2148%" y="1134.50"></text></g><g><title>tokio::runtime::task::state::State::load (2 samples, 0.01%)</title><rect x="97.9848%" y="1140" width="0.0100%" height="15" fill="rgb(225,216,18)" fg:x="19595" fg:w="2"/><text x="98.2348%" y="1150.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (2 samples, 0.01%)</title><rect x="97.9848%" y="1156" width="0.0100%" height="15" fill="rgb(233,36,38)" fg:x="19595" fg:w="2"/><text x="98.2348%" y="1166.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.01%)</title><rect x="97.9848%" y="1172" width="0.0100%" height="15" fill="rgb(239,88,23)" fg:x="19595" fg:w="2"/><text x="98.2348%" y="1182.50"></text></g><g><title>sqlx_core::pool::connection::Floating&lt;DB,sqlx_core::pool::connection::Live&lt;DB&gt;&gt;::release (42 samples, 0.21%)</title><rect x="97.7898%" y="980" width="0.2100%" height="15" fill="rgb(219,181,35)" fg:x="19556" fg:w="42"/><text x="98.0398%" y="990.50"></text></g><g><title>sqlx_core::pool::inner::PoolInner&lt;DB&gt;::release (40 samples, 0.20%)</title><rect x="97.7998%" y="996" width="0.2000%" height="15" fill="rgb(215,18,46)" fg:x="19558" fg:w="40"/><text x="98.0498%" y="1006.50"></text></g><g><title>sqlx_core::pool::inner::DecrementSizeGuard&lt;DB&gt;::release_permit (27 samples, 0.14%)</title><rect x="97.8648%" y="1012" width="0.1350%" height="15" fill="rgb(241,38,11)" fg:x="19571" fg:w="27"/><text x="98.1148%" y="1022.50"></text></g><g><title>sqlx_core::pool::connection::PoolConnection&lt;DB&gt;::return_to_pool::_{{closure}} (346 samples, 1.73%)</title><rect x="96.2746%" y="948" width="1.7302%" height="15" fill="rgb(248,169,45)" fg:x="19253" fg:w="346"/><text x="96.5246%" y="958.50"></text></g><g><title>sqlx_core::pool::connection::Floating&lt;DB,sqlx_core::pool::connection::Live&lt;DB&gt;&gt;::return_to_pool::_{{closure}} (336 samples, 1.68%)</title><rect x="96.3246%" y="964" width="1.6802%" height="15" fill="rgb(239,50,49)" fg:x="19263" fg:w="336"/><text x="96.5746%" y="974.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (1,049 samples, 5.25%)</title><rect x="92.7843%" y="916" width="5.2455%" height="15" fill="rgb(231,96,31)" fg:x="18555" fg:w="1049"/><text x="93.0343%" y="926.50">tokio:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (1,043 samples, 5.22%)</title><rect x="92.8143%" y="932" width="5.2155%" height="15" fill="rgb(224,193,37)" fg:x="18561" fg:w="1043"/><text x="93.0643%" y="942.50">tokio:..</text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (5 samples, 0.03%)</title><rect x="98.0048%" y="948" width="0.0250%" height="15" fill="rgb(227,153,50)" fg:x="19599" fg:w="5"/><text x="98.2548%" y="958.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.02%)</title><rect x="98.0348%" y="948" width="0.0150%" height="15" fill="rgb(249,228,3)" fg:x="19605" fg:w="3"/><text x="98.2848%" y="958.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::TaskIdGuard&gt; (4 samples, 0.02%)</title><rect x="98.0498%" y="948" width="0.0200%" height="15" fill="rgb(219,164,43)" fg:x="19608" fg:w="4"/><text x="98.2998%" y="958.50"></text></g><g><title>&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (4 samples, 0.02%)</title><rect x="98.0498%" y="964" width="0.0200%" height="15" fill="rgb(216,45,41)" fg:x="19608" fg:w="4"/><text x="98.2998%" y="974.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (2 samples, 0.01%)</title><rect x="98.0598%" y="980" width="0.0100%" height="15" fill="rgb(210,226,51)" fg:x="19610" fg:w="2"/><text x="98.3098%" y="990.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.01%)</title><rect x="98.0598%" y="996" width="0.0100%" height="15" fill="rgb(209,117,49)" fg:x="19610" fg:w="2"/><text x="98.3098%" y="1006.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.04%)</title><rect x="98.0698%" y="980" width="0.0350%" height="15" fill="rgb(206,196,24)" fg:x="19612" fg:w="7"/><text x="98.3198%" y="990.50"></text></g><g><title>__memmove_avx_unaligned (2 samples, 0.01%)</title><rect x="98.1048%" y="980" width="0.0100%" height="15" fill="rgb(253,218,3)" fg:x="19619" fg:w="2"/><text x="98.3548%" y="990.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (10 samples, 0.05%)</title><rect x="98.0698%" y="948" width="0.0500%" height="15" fill="rgb(252,166,2)" fg:x="19612" fg:w="10"/><text x="98.3198%" y="958.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage::_{{closure}} (10 samples, 0.05%)</title><rect x="98.0698%" y="964" width="0.0500%" height="15" fill="rgb(236,218,26)" fg:x="19612" fg:w="10"/><text x="98.3198%" y="974.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (1,069 samples, 5.35%)</title><rect x="92.7843%" y="900" width="5.3455%" height="15" fill="rgb(254,84,19)" fg:x="18555" fg:w="1069"/><text x="93.0343%" y="910.50">tokio::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::drop_future_or_output (20 samples, 0.10%)</title><rect x="98.0298%" y="916" width="0.1000%" height="15" fill="rgb(219,137,29)" fg:x="19604" fg:w="20"/><text x="98.2798%" y="926.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (20 samples, 0.10%)</title><rect x="98.0298%" y="932" width="0.1000%" height="15" fill="rgb(227,47,52)" fg:x="19604" fg:w="20"/><text x="98.2798%" y="942.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (2 samples, 0.01%)</title><rect x="98.1198%" y="948" width="0.0100%" height="15" fill="rgb(229,167,24)" fg:x="19622" fg:w="2"/><text x="98.3698%" y="958.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="98.1348%" y="932" width="0.0100%" height="15" fill="rgb(233,164,1)" fg:x="19625" fg:w="2"/><text x="98.3848%" y="942.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2 samples, 0.01%)</title><rect x="98.1548%" y="932" width="0.0100%" height="15" fill="rgb(218,88,48)" fg:x="19629" fg:w="2"/><text x="98.4048%" y="942.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage::_{{closure}} (2 samples, 0.01%)</title><rect x="98.1548%" y="948" width="0.0100%" height="15" fill="rgb(226,214,24)" fg:x="19629" fg:w="2"/><text x="98.4048%" y="958.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.01%)</title><rect x="98.1548%" y="964" width="0.0100%" height="15" fill="rgb(233,29,12)" fg:x="19629" fg:w="2"/><text x="98.4048%" y="974.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (1,086 samples, 5.43%)</title><rect x="92.7393%" y="804" width="5.4305%" height="15" fill="rgb(219,120,34)" fg:x="18546" fg:w="1086"/><text x="92.9893%" y="814.50">tokio::..</text></g><g><title>std::panic::catch_unwind (1,078 samples, 5.39%)</title><rect x="92.7793%" y="820" width="5.3905%" height="15" fill="rgb(226,78,44)" fg:x="18554" fg:w="1078"/><text x="93.0293%" y="830.50">std::pa..</text></g><g><title>std::panicking::try (1,078 samples, 5.39%)</title><rect x="92.7793%" y="836" width="5.3905%" height="15" fill="rgb(240,15,48)" fg:x="18554" fg:w="1078"/><text x="93.0293%" y="846.50">std::pa..</text></g><g><title>std::panicking::try::do_call (1,078 samples, 5.39%)</title><rect x="92.7793%" y="852" width="5.3905%" height="15" fill="rgb(253,176,7)" fg:x="18554" fg:w="1078"/><text x="93.0293%" y="862.50">std::pa..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (1,078 samples, 5.39%)</title><rect x="92.7793%" y="868" width="5.3905%" height="15" fill="rgb(206,166,28)" fg:x="18554" fg:w="1078"/><text x="93.0293%" y="878.50">&lt;core::..</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (1,077 samples, 5.39%)</title><rect x="92.7843%" y="884" width="5.3855%" height="15" fill="rgb(241,53,51)" fg:x="18555" fg:w="1077"/><text x="93.0343%" y="894.50">tokio::..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::store_output (8 samples, 0.04%)</title><rect x="98.1298%" y="900" width="0.0400%" height="15" fill="rgb(249,112,30)" fg:x="19624" fg:w="8"/><text x="98.3798%" y="910.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (8 samples, 0.04%)</title><rect x="98.1298%" y="916" width="0.0400%" height="15" fill="rgb(217,85,30)" fg:x="19624" fg:w="8"/><text x="98.3798%" y="926.50"></text></g><g><title>tokio::runtime::task::state::State::load (5 samples, 0.03%)</title><rect x="98.1998%" y="836" width="0.0250%" height="15" fill="rgb(233,49,7)" fg:x="19638" fg:w="5"/><text x="98.4498%" y="846.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (5 samples, 0.03%)</title><rect x="98.1998%" y="852" width="0.0250%" height="15" fill="rgb(234,109,9)" fg:x="19638" fg:w="5"/><text x="98.4498%" y="862.50"></text></g><g><title>core::sync::atomic::atomic_load (5 samples, 0.03%)</title><rect x="98.1998%" y="868" width="0.0250%" height="15" fill="rgb(253,95,22)" fg:x="19638" fg:w="5"/><text x="98.4498%" y="878.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle (14 samples, 0.07%)</title><rect x="98.1698%" y="804" width="0.0700%" height="15" fill="rgb(233,176,25)" fg:x="19632" fg:w="14"/><text x="98.4198%" y="814.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (9 samples, 0.05%)</title><rect x="98.1948%" y="820" width="0.0450%" height="15" fill="rgb(236,33,39)" fg:x="19637" fg:w="9"/><text x="98.4448%" y="830.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_idle::_{{closure}} (3 samples, 0.02%)</title><rect x="98.2248%" y="836" width="0.0150%" height="15" fill="rgb(223,226,42)" fg:x="19643" fg:w="3"/><text x="98.4748%" y="846.50"></text></g><g><title>tokio::runtime::task::state::State::load (3 samples, 0.02%)</title><rect x="98.2698%" y="836" width="0.0150%" height="15" fill="rgb(216,99,33)" fg:x="19652" fg:w="3"/><text x="98.5198%" y="846.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.02%)</title><rect x="98.2698%" y="852" width="0.0150%" height="15" fill="rgb(235,84,23)" fg:x="19652" fg:w="3"/><text x="98.5198%" y="862.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.02%)</title><rect x="98.2698%" y="868" width="0.0150%" height="15" fill="rgb(232,2,27)" fg:x="19652" fg:w="3"/><text x="98.5198%" y="878.50"></text></g><g><title>tokio::runtime::task::state::State::transition_to_running (10 samples, 0.05%)</title><rect x="98.2398%" y="804" width="0.0500%" height="15" fill="rgb(241,23,22)" fg:x="19646" fg:w="10"/><text x="98.4898%" y="814.50"></text></g><g><title>tokio::runtime::task::state::State::fetch_update_action (6 samples, 0.03%)</title><rect x="98.2598%" y="820" width="0.0300%" height="15" fill="rgb(211,73,27)" fg:x="19650" fg:w="6"/><text x="98.5098%" y="830.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (1,268 samples, 6.34%)</title><rect x="91.9642%" y="772" width="6.3406%" height="15" fill="rgb(235,109,49)" fg:x="18391" fg:w="1268"/><text x="92.2142%" y="782.50">tokio::r..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (1,124 samples, 5.62%)</title><rect x="92.6843%" y="788" width="5.6206%" height="15" fill="rgb(230,99,29)" fg:x="18535" fg:w="1124"/><text x="92.9343%" y="798.50">tokio::..</text></g><g><title>tokio::runtime::task::waker::waker_ref (3 samples, 0.02%)</title><rect x="98.2898%" y="804" width="0.0150%" height="15" fill="rgb(245,199,7)" fg:x="19656" fg:w="3"/><text x="98.5398%" y="814.50"></text></g><g><title>tokio::runtime::task::waker::raw_waker (3 samples, 0.02%)</title><rect x="98.2898%" y="820" width="0.0150%" height="15" fill="rgb(217,179,10)" fg:x="19656" fg:w="3"/><text x="98.5398%" y="830.50"></text></g><g><title>tokio::runtime::coop::budget (1,295 samples, 6.48%)</title><rect x="91.8342%" y="692" width="6.4756%" height="15" fill="rgb(254,99,47)" fg:x="18365" fg:w="1295"/><text x="92.0842%" y="702.50">tokio::r..</text></g><g><title>tokio::runtime::coop::with_budget (1,295 samples, 6.48%)</title><rect x="91.8342%" y="708" width="6.4756%" height="15" fill="rgb(251,121,7)" fg:x="18365" fg:w="1295"/><text x="92.0842%" y="718.50">tokio::r..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task::_{{closure}} (1,294 samples, 6.47%)</title><rect x="91.8392%" y="724" width="6.4706%" height="15" fill="rgb(250,177,26)" fg:x="18366" fg:w="1294"/><text x="92.0892%" y="734.50">tokio::r..</text></g><g><title>tokio::runtime::task::LocalNotified&lt;S&gt;::run (1,275 samples, 6.38%)</title><rect x="91.9342%" y="740" width="6.3756%" height="15" fill="rgb(232,88,15)" fg:x="18385" fg:w="1275"/><text x="92.1842%" y="750.50">tokio::r..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (1,275 samples, 6.38%)</title><rect x="91.9342%" y="756" width="6.3756%" height="15" fill="rgb(251,54,54)" fg:x="18385" fg:w="1275"/><text x="92.1842%" y="766.50">tokio::r..</text></g><g><title>&lt;parking_lot_core::thread_parker::imp::UnparkHandle as parking_lot_core::thread_parker::UnparkHandleT&gt;::unpark (102 samples, 0.51%)</title><rect x="98.3498%" y="740" width="0.5101%" height="15" fill="rgb(208,177,15)" fg:x="19668" fg:w="102"/><text x="98.5998%" y="750.50"></text></g><g><title>syscall (102 samples, 0.51%)</title><rect x="98.3498%" y="756" width="0.5101%" height="15" fill="rgb(205,97,32)" fg:x="19668" fg:w="102"/><text x="98.5998%" y="766.50"></text></g><g><title>[unknown] (102 samples, 0.51%)</title><rect x="98.3498%" y="772" width="0.5101%" height="15" fill="rgb(217,192,13)" fg:x="19668" fg:w="102"/><text x="98.5998%" y="782.50"></text></g><g><title>[unknown] (95 samples, 0.48%)</title><rect x="98.3848%" y="788" width="0.4750%" height="15" fill="rgb(215,163,41)" fg:x="19675" fg:w="95"/><text x="98.6348%" y="798.50"></text></g><g><title>[unknown] (93 samples, 0.47%)</title><rect x="98.3948%" y="804" width="0.4650%" height="15" fill="rgb(246,83,29)" fg:x="19677" fg:w="93"/><text x="98.6448%" y="814.50"></text></g><g><title>[unknown] (90 samples, 0.45%)</title><rect x="98.4098%" y="820" width="0.4500%" height="15" fill="rgb(219,2,45)" fg:x="19680" fg:w="90"/><text x="98.6598%" y="830.50"></text></g><g><title>[unknown] (86 samples, 0.43%)</title><rect x="98.4298%" y="836" width="0.4300%" height="15" fill="rgb(242,215,33)" fg:x="19684" fg:w="86"/><text x="98.6798%" y="846.50"></text></g><g><title>[unknown] (66 samples, 0.33%)</title><rect x="98.5299%" y="852" width="0.3300%" height="15" fill="rgb(217,1,6)" fg:x="19704" fg:w="66"/><text x="98.7799%" y="862.50"></text></g><g><title>[unknown] (48 samples, 0.24%)</title><rect x="98.6199%" y="868" width="0.2400%" height="15" fill="rgb(207,85,52)" fg:x="19722" fg:w="48"/><text x="98.8699%" y="878.50"></text></g><g><title>[unknown] (41 samples, 0.21%)</title><rect x="98.6549%" y="884" width="0.2050%" height="15" fill="rgb(231,171,19)" fg:x="19729" fg:w="41"/><text x="98.9049%" y="894.50"></text></g><g><title>[unknown] (20 samples, 0.10%)</title><rect x="98.7599%" y="900" width="0.1000%" height="15" fill="rgb(207,128,4)" fg:x="19750" fg:w="20"/><text x="99.0099%" y="910.50"></text></g><g><title>[unknown] (14 samples, 0.07%)</title><rect x="98.7899%" y="916" width="0.0700%" height="15" fill="rgb(219,208,4)" fg:x="19756" fg:w="14"/><text x="99.0399%" y="926.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="98.8499%" y="932" width="0.0100%" height="15" fill="rgb(235,161,42)" fg:x="19768" fg:w="2"/><text x="99.0999%" y="942.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::gen_u32 (2 samples, 0.01%)</title><rect x="98.8749%" y="756" width="0.0100%" height="15" fill="rgb(247,218,18)" fg:x="19773" fg:w="2"/><text x="99.1249%" y="766.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (6 samples, 0.03%)</title><rect x="98.8849%" y="756" width="0.0300%" height="15" fill="rgb(232,114,51)" fg:x="19775" fg:w="6"/><text x="99.1349%" y="766.50"></text></g><g><title>__GI___clock_gettime (6 samples, 0.03%)</title><rect x="98.8849%" y="772" width="0.0300%" height="15" fill="rgb(222,95,3)" fg:x="19775" fg:w="6"/><text x="99.1349%" y="782.50"></text></g><g><title>[[vdso]] (3 samples, 0.02%)</title><rect x="98.8999%" y="788" width="0.0150%" height="15" fill="rgb(240,65,29)" fg:x="19778" fg:w="3"/><text x="99.1499%" y="798.50"></text></g><g><title>[[vdso]] (3 samples, 0.02%)</title><rect x="98.8999%" y="804" width="0.0150%" height="15" fill="rgb(249,209,20)" fg:x="19778" fg:w="3"/><text x="99.1499%" y="814.50"></text></g><g><title>parking_lot_core::parking_lot::FairTimeout::should_timeout (11 samples, 0.06%)</title><rect x="98.8649%" y="740" width="0.0550%" height="15" fill="rgb(241,48,37)" fg:x="19771" fg:w="11"/><text x="99.1149%" y="750.50"></text></g><g><title>parking_lot_core::parking_lot::hash (3 samples, 0.02%)</title><rect x="98.9349%" y="756" width="0.0150%" height="15" fill="rgb(230,140,42)" fg:x="19785" fg:w="3"/><text x="99.1849%" y="766.50"></text></g><g><title>parking_lot_core::parking_lot::lock_bucket_pair (12 samples, 0.06%)</title><rect x="98.9199%" y="740" width="0.0600%" height="15" fill="rgb(230,176,45)" fg:x="19782" fg:w="12"/><text x="99.1699%" y="750.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::lock (6 samples, 0.03%)</title><rect x="98.9499%" y="756" width="0.0300%" height="15" fill="rgb(245,112,21)" fg:x="19788" fg:w="6"/><text x="99.1999%" y="766.50"></text></g><g><title>parking_lot::condvar::Condvar::notify_one_slow (136 samples, 0.68%)</title><rect x="98.3098%" y="708" width="0.6801%" height="15" fill="rgb(207,183,35)" fg:x="19660" fg:w="136"/><text x="98.5598%" y="718.50"></text></g><g><title>parking_lot_core::parking_lot::unpark_requeue (135 samples, 0.68%)</title><rect x="98.3148%" y="724" width="0.6751%" height="15" fill="rgb(227,44,33)" fg:x="19661" fg:w="135"/><text x="98.5648%" y="734.50"></text></g><g><title>parking_lot_core::parking_lot::unlock_bucket_pair (2 samples, 0.01%)</title><rect x="98.9799%" y="740" width="0.0100%" height="15" fill="rgb(246,120,21)" fg:x="19794" fg:w="2"/><text x="99.2299%" y="750.50"></text></g><g><title>parking_lot_core::word_lock::WordLock::unlock (2 samples, 0.01%)</title><rect x="98.9799%" y="756" width="0.0100%" height="15" fill="rgb(235,57,52)" fg:x="19794" fg:w="2"/><text x="99.2299%" y="766.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.01%)</title><rect x="98.9899%" y="724" width="0.0100%" height="15" fill="rgb(238,84,10)" fg:x="19796" fg:w="2"/><text x="99.2399%" y="734.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (2 samples, 0.01%)</title><rect x="98.9899%" y="740" width="0.0100%" height="15" fill="rgb(251,200,32)" fg:x="19796" fg:w="2"/><text x="99.2399%" y="750.50"></text></g><g><title>tokio::runtime::driver::Handle::unpark (11 samples, 0.06%)</title><rect x="99.0399%" y="740" width="0.0550%" height="15" fill="rgb(247,159,13)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="750.50"></text></g><g><title>tokio::runtime::driver::IoHandle::unpark (11 samples, 0.06%)</title><rect x="99.0399%" y="756" width="0.0550%" height="15" fill="rgb(238,64,4)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="766.50"></text></g><g><title>tokio::runtime::io::driver::Handle::unpark (11 samples, 0.06%)</title><rect x="99.0399%" y="772" width="0.0550%" height="15" fill="rgb(221,131,51)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="782.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (11 samples, 0.06%)</title><rect x="99.0399%" y="788" width="0.0550%" height="15" fill="rgb(242,5,29)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="798.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Write&gt;::write (11 samples, 0.06%)</title><rect x="99.0399%" y="804" width="0.0550%" height="15" fill="rgb(214,130,32)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="814.50"></text></g><g><title>std::sys::unix::fs::File::write (11 samples, 0.06%)</title><rect x="99.0399%" y="820" width="0.0550%" height="15" fill="rgb(244,210,16)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="830.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (11 samples, 0.06%)</title><rect x="99.0399%" y="836" width="0.0550%" height="15" fill="rgb(234,48,26)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="846.50"></text></g><g><title>__GI___libc_write (11 samples, 0.06%)</title><rect x="99.0399%" y="852" width="0.0550%" height="15" fill="rgb(231,82,38)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="862.50"></text></g><g><title>__GI___libc_write (11 samples, 0.06%)</title><rect x="99.0399%" y="868" width="0.0550%" height="15" fill="rgb(254,128,41)" fg:x="19806" fg:w="11"/><text x="99.2899%" y="878.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="99.0449%" y="884" width="0.0500%" height="15" fill="rgb(212,73,49)" fg:x="19807" fg:w="10"/><text x="99.2949%" y="894.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="99.0449%" y="900" width="0.0500%" height="15" fill="rgb(205,62,54)" fg:x="19807" fg:w="10"/><text x="99.2949%" y="910.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="99.0449%" y="916" width="0.0500%" height="15" fill="rgb(228,0,8)" fg:x="19807" fg:w="10"/><text x="99.2949%" y="926.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="99.0449%" y="932" width="0.0500%" height="15" fill="rgb(251,28,17)" fg:x="19807" fg:w="10"/><text x="99.2949%" y="942.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="99.0449%" y="948" width="0.0500%" height="15" fill="rgb(238,105,27)" fg:x="19807" fg:w="10"/><text x="99.2949%" y="958.50"></text></g><g><title>[unknown] (10 samples, 0.05%)</title><rect x="99.0449%" y="964" width="0.0500%" height="15" fill="rgb(237,216,33)" fg:x="19807" fg:w="10"/><text x="99.2949%" y="974.50"></text></g><g><title>[unknown] (8 samples, 0.04%)</title><rect x="99.0549%" y="980" width="0.0400%" height="15" fill="rgb(229,228,25)" fg:x="19809" fg:w="8"/><text x="99.3049%" y="990.50"></text></g><g><title>[unknown] (7 samples, 0.04%)</title><rect x="99.0599%" y="996" width="0.0350%" height="15" fill="rgb(233,75,23)" fg:x="19810" fg:w="7"/><text x="99.3099%" y="1006.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.0749%" y="1012" width="0.0200%" height="15" fill="rgb(231,207,16)" fg:x="19813" fg:w="4"/><text x="99.3249%" y="1022.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.0799%" y="1028" width="0.0150%" height="15" fill="rgb(231,191,45)" fg:x="19814" fg:w="3"/><text x="99.3299%" y="1038.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.0849%" y="1044" width="0.0100%" height="15" fill="rgb(224,133,17)" fg:x="19815" fg:w="2"/><text x="99.3349%" y="1054.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.0849%" y="1060" width="0.0100%" height="15" fill="rgb(209,178,27)" fg:x="19815" fg:w="2"/><text x="99.3349%" y="1070.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.0849%" y="1076" width="0.0100%" height="15" fill="rgb(218,37,11)" fg:x="19815" fg:w="2"/><text x="99.3349%" y="1086.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.0849%" y="1092" width="0.0100%" height="15" fill="rgb(251,226,25)" fg:x="19815" fg:w="2"/><text x="99.3349%" y="1102.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.0849%" y="1108" width="0.0100%" height="15" fill="rgb(209,222,27)" fg:x="19815" fg:w="2"/><text x="99.3349%" y="1118.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (22 samples, 0.11%)</title><rect x="98.9899%" y="708" width="0.1100%" height="15" fill="rgb(238,22,21)" fg:x="19796" fg:w="22"/><text x="99.2399%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::unpark (20 samples, 0.10%)</title><rect x="98.9999%" y="724" width="0.1000%" height="15" fill="rgb(233,161,25)" fg:x="19798" fg:w="20"/><text x="99.2499%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run_task (1,475 samples, 7.38%)</title><rect x="91.8292%" y="676" width="7.3757%" height="15" fill="rgb(226,122,53)" fg:x="18364" fg:w="1475"/><text x="92.0792%" y="686.50">tokio::run..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_searching (179 samples, 0.90%)</title><rect x="98.3098%" y="692" width="0.8951%" height="15" fill="rgb(220,123,17)" fg:x="19660" fg:w="179"/><text x="98.5598%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::transition_worker_from_searching (21 samples, 0.11%)</title><rect x="99.0999%" y="708" width="0.1050%" height="15" fill="rgb(230,224,35)" fg:x="19818" fg:w="21"/><text x="99.3499%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::notify_parked_local (19 samples, 0.10%)</title><rect x="99.1099%" y="724" width="0.0950%" height="15" fill="rgb(246,83,8)" fg:x="19820" fg:w="19"/><text x="99.3599%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::worker_to_notify (16 samples, 0.08%)</title><rect x="99.1249%" y="740" width="0.0800%" height="15" fill="rgb(230,214,17)" fg:x="19823" fg:w="16"/><text x="99.3749%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::notify_should_wakeup (14 samples, 0.07%)</title><rect x="99.1349%" y="756" width="0.0700%" height="15" fill="rgb(222,97,18)" fg:x="19825" fg:w="14"/><text x="99.3849%" y="766.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (9 samples, 0.05%)</title><rect x="99.1599%" y="772" width="0.0450%" height="15" fill="rgb(206,79,1)" fg:x="19830" fg:w="9"/><text x="99.4099%" y="782.50"></text></g><g><title>core::sync::atomic::atomic_add (9 samples, 0.05%)</title><rect x="99.1599%" y="788" width="0.0450%" height="15" fill="rgb(214,121,34)" fg:x="19830" fg:w="9"/><text x="99.4099%" y="798.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::next_remote_task (2 samples, 0.01%)</title><rect x="99.2399%" y="692" width="0.0100%" height="15" fill="rgb(249,199,46)" fg:x="19846" fg:w="2"/><text x="99.4899%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task (5 samples, 0.03%)</title><rect x="99.2499%" y="692" width="0.0250%" height="15" fill="rgb(214,222,46)" fg:x="19848" fg:w="5"/><text x="99.4999%" y="702.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (5 samples, 0.03%)</title><rect x="99.2499%" y="708" width="0.0250%" height="15" fill="rgb(248,168,30)" fg:x="19848" fg:w="5"/><text x="99.4999%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_local_task::_{{closure}} (5 samples, 0.03%)</title><rect x="99.2499%" y="724" width="0.0250%" height="15" fill="rgb(226,14,28)" fg:x="19848" fg:w="5"/><text x="99.4999%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Local&lt;T&gt;::pop (5 samples, 0.03%)</title><rect x="99.2499%" y="740" width="0.0250%" height="15" fill="rgb(253,123,1)" fg:x="19848" fg:w="5"/><text x="99.4999%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (2 samples, 0.01%)</title><rect x="99.2649%" y="756" width="0.0100%" height="15" fill="rgb(225,24,42)" fg:x="19851" fg:w="2"/><text x="99.5149%" y="766.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::next_task (22 samples, 0.11%)</title><rect x="99.2049%" y="676" width="0.1100%" height="15" fill="rgb(216,161,37)" fg:x="19839" fg:w="22"/><text x="99.4549%" y="686.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::tune_global_queue_interval (8 samples, 0.04%)</title><rect x="99.2749%" y="692" width="0.0400%" height="15" fill="rgb(251,164,26)" fg:x="19853" fg:w="8"/><text x="99.5249%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::tuned_global_queue_interval (7 samples, 0.04%)</title><rect x="99.2799%" y="708" width="0.0350%" height="15" fill="rgb(219,177,3)" fg:x="19854" fg:w="7"/><text x="99.5299%" y="718.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.3049%" y="724" width="0.0100%" height="15" fill="rgb(222,65,0)" fg:x="19859" fg:w="2"/><text x="99.5549%" y="734.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.3049%" y="740" width="0.0100%" height="15" fill="rgb(223,69,54)" fg:x="19859" fg:w="2"/><text x="99.5549%" y="750.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::deref::Deref&gt;::deref (6 samples, 0.03%)</title><rect x="99.4399%" y="708" width="0.0300%" height="15" fill="rgb(235,30,27)" fg:x="19886" fg:w="6"/><text x="99.6899%" y="718.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::inner (6 samples, 0.03%)</title><rect x="99.4399%" y="724" width="0.0300%" height="15" fill="rgb(220,183,50)" fg:x="19886" fg:w="6"/><text x="99.6899%" y="734.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (6 samples, 0.03%)</title><rect x="99.4399%" y="740" width="0.0300%" height="15" fill="rgb(248,198,15)" fg:x="19886" fg:w="6"/><text x="99.6899%" y="750.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (6 samples, 0.03%)</title><rect x="99.4699%" y="708" width="0.0300%" height="15" fill="rgb(222,211,4)" fg:x="19892" fg:w="6"/><text x="99.7199%" y="718.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.03%)</title><rect x="99.4699%" y="724" width="0.0300%" height="15" fill="rgb(214,102,34)" fg:x="19892" fg:w="6"/><text x="99.7199%" y="734.50"></text></g><g><title>core::sync::atomic::AtomicU64::load (9 samples, 0.05%)</title><rect x="99.6200%" y="724" width="0.0450%" height="15" fill="rgb(245,92,5)" fg:x="19922" fg:w="9"/><text x="99.8700%" y="734.50"></text></g><g><title>core::sync::atomic::atomic_load (9 samples, 0.05%)</title><rect x="99.6200%" y="740" width="0.0450%" height="15" fill="rgb(252,72,51)" fg:x="19922" fg:w="9"/><text x="99.8700%" y="750.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::pack (2 samples, 0.01%)</title><rect x="99.6650%" y="724" width="0.0100%" height="15" fill="rgb(252,208,19)" fg:x="19931" fg:w="2"/><text x="99.9150%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (103 samples, 0.52%)</title><rect x="99.3599%" y="692" width="0.5151%" height="15" fill="rgb(211,69,7)" fg:x="19870" fg:w="103"/><text x="99.6099%" y="702.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into2 (74 samples, 0.37%)</title><rect x="99.5050%" y="708" width="0.3700%" height="15" fill="rgb(211,27,16)" fg:x="19899" fg:w="74"/><text x="99.7550%" y="718.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::queue::unpack (40 samples, 0.20%)</title><rect x="99.6750%" y="724" width="0.2000%" height="15" fill="rgb(219,216,14)" fg:x="19933" fg:w="40"/><text x="99.9250%" y="734.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::next_remote_task (2 samples, 0.01%)</title><rect x="99.8750%" y="692" width="0.0100%" height="15" fill="rgb(219,71,8)" fg:x="19973" fg:w="2"/><text x="100.1250%" y="702.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (2,839 samples, 14.20%)</title><rect x="85.6936%" y="308" width="14.1964%" height="15" fill="rgb(223,170,53)" fg:x="17137" fg:w="2839"/><text x="85.9436%" y="318.50">tokio::runtime::blocki..</text></g><g><title>tokio::runtime::blocking::pool::Task::run (2,815 samples, 14.08%)</title><rect x="85.8136%" y="324" width="14.0764%" height="15" fill="rgb(246,21,26)" fg:x="17161" fg:w="2815"/><text x="86.0636%" y="334.50">tokio::runtime::block..</text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (2,815 samples, 14.08%)</title><rect x="85.8136%" y="340" width="14.0764%" height="15" fill="rgb(248,20,46)" fg:x="17161" fg:w="2815"/><text x="86.0636%" y="350.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::raw::RawTask::poll (2,815 samples, 14.08%)</title><rect x="85.8136%" y="356" width="14.0764%" height="15" fill="rgb(252,94,11)" fg:x="17161" fg:w="2815"/><text x="86.0636%" y="366.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (2,813 samples, 14.07%)</title><rect x="85.8236%" y="372" width="14.0664%" height="15" fill="rgb(236,163,8)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="382.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (2,813 samples, 14.07%)</title><rect x="85.8236%" y="388" width="14.0664%" height="15" fill="rgb(217,221,45)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="398.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::harness::poll_future (2,813 samples, 14.07%)</title><rect x="85.8236%" y="404" width="14.0664%" height="15" fill="rgb(238,38,17)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="414.50">tokio::runtime::task:..</text></g><g><title>std::panic::catch_unwind (2,813 samples, 14.07%)</title><rect x="85.8236%" y="420" width="14.0664%" height="15" fill="rgb(242,210,23)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="430.50">std::panic::catch_unw..</text></g><g><title>std::panicking::try (2,813 samples, 14.07%)</title><rect x="85.8236%" y="436" width="14.0664%" height="15" fill="rgb(250,86,53)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="446.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,813 samples, 14.07%)</title><rect x="85.8236%" y="452" width="14.0664%" height="15" fill="rgb(223,168,25)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="462.50">std::panicking::try::..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,813 samples, 14.07%)</title><rect x="85.8236%" y="468" width="14.0664%" height="15" fill="rgb(251,189,4)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="478.50">&lt;core::panic::unwind_..</text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (2,813 samples, 14.07%)</title><rect x="85.8236%" y="484" width="14.0664%" height="15" fill="rgb(245,19,28)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="494.50">tokio::runtime::task:..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (2,813 samples, 14.07%)</title><rect x="85.8236%" y="500" width="14.0664%" height="15" fill="rgb(207,10,34)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="510.50">tokio::runtime::task:..</text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (2,813 samples, 14.07%)</title><rect x="85.8236%" y="516" width="14.0664%" height="15" fill="rgb(235,153,31)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="526.50">tokio::loom::std::uns..</text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (2,813 samples, 14.07%)</title><rect x="85.8236%" y="532" width="14.0664%" height="15" fill="rgb(228,72,37)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="542.50">tokio::runtime::task:..</text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (2,813 samples, 14.07%)</title><rect x="85.8236%" y="548" width="14.0664%" height="15" fill="rgb(215,15,16)" fg:x="17163" fg:w="2813"/><text x="86.0736%" y="558.50">&lt;tokio::runtime::bloc..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (2,802 samples, 14.01%)</title><rect x="85.8786%" y="564" width="14.0114%" height="15" fill="rgb(250,119,29)" fg:x="17174" fg:w="2802"/><text x="86.1286%" y="574.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (2,802 samples, 14.01%)</title><rect x="85.8786%" y="580" width="14.0114%" height="15" fill="rgb(214,59,1)" fg:x="17174" fg:w="2802"/><text x="86.1286%" y="590.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (2,802 samples, 14.01%)</title><rect x="85.8786%" y="596" width="14.0114%" height="15" fill="rgb(223,109,25)" fg:x="17174" fg:w="2802"/><text x="86.1286%" y="606.50">tokio::runtime::conte..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (2,795 samples, 13.98%)</title><rect x="85.9136%" y="612" width="13.9764%" height="15" fill="rgb(230,198,22)" fg:x="17181" fg:w="2795"/><text x="86.1636%" y="622.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (2,795 samples, 13.98%)</title><rect x="85.9136%" y="628" width="13.9764%" height="15" fill="rgb(245,184,46)" fg:x="17181" fg:w="2795"/><text x="86.1636%" y="638.50">tokio::runtime::conte..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (2,795 samples, 13.98%)</title><rect x="85.9136%" y="644" width="13.9764%" height="15" fill="rgb(253,73,16)" fg:x="17181" fg:w="2795"/><text x="86.1636%" y="654.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (2,795 samples, 13.98%)</title><rect x="85.9136%" y="660" width="13.9764%" height="15" fill="rgb(206,94,45)" fg:x="17181" fg:w="2795"/><text x="86.1636%" y="670.50">tokio::runtime::sched..</text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::steal_work (115 samples, 0.58%)</title><rect x="99.3149%" y="676" width="0.5751%" height="15" fill="rgb(236,83,27)" fg:x="19861" fg:w="115"/><text x="99.5649%" y="686.50"></text></g><g><title>std::panic::catch_unwind (2,840 samples, 14.20%)</title><rect x="85.6936%" y="196" width="14.2014%" height="15" fill="rgb(220,196,8)" fg:x="17137" fg:w="2840"/><text x="85.9436%" y="206.50">std::panic::catch_unwi..</text></g><g><title>std::panicking::try (2,840 samples, 14.20%)</title><rect x="85.6936%" y="212" width="14.2014%" height="15" fill="rgb(254,185,14)" fg:x="17137" fg:w="2840"/><text x="85.9436%" y="222.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,840 samples, 14.20%)</title><rect x="85.6936%" y="228" width="14.2014%" height="15" fill="rgb(226,50,22)" fg:x="17137" fg:w="2840"/><text x="85.9436%" y="238.50">std::panicking::try::d..</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (2,840 samples, 14.20%)</title><rect x="85.6936%" y="244" width="14.2014%" height="15" fill="rgb(253,147,0)" fg:x="17137" fg:w="2840"/><text x="85.9436%" y="254.50">&lt;core::panic::unwind_s..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (2,840 samples, 14.20%)</title><rect x="85.6936%" y="260" width="14.2014%" height="15" fill="rgb(252,46,33)" fg:x="17137" fg:w="2840"/><text x="85.9436%" y="270.50">std::thread::Builder::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,840 samples, 14.20%)</title><rect x="85.6936%" y="276" width="14.2014%" height="15" fill="rgb(242,22,54)" fg:x="17137" fg:w="2840"/><text x="85.9436%" y="286.50">std::sys_common::backt..</text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (2,840 samples, 14.20%)</title><rect x="85.6936%" y="292" width="14.2014%" height="15" fill="rgb(223,178,32)" fg:x="17137" fg:w="2840"/><text x="85.9436%" y="302.50">tokio::runtime::blocki..</text></g><g><title>__GI___prctl (2 samples, 0.01%)</title><rect x="99.8950%" y="228" width="0.0100%" height="15" fill="rgb(214,106,53)" fg:x="19977" fg:w="2"/><text x="100.1450%" y="238.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (3 samples, 0.02%)</title><rect x="99.8950%" y="196" width="0.0150%" height="15" fill="rgb(232,65,50)" fg:x="19977" fg:w="3"/><text x="100.1450%" y="206.50"></text></g><g><title>__pthread_setname_np (3 samples, 0.02%)</title><rect x="99.8950%" y="212" width="0.0150%" height="15" fill="rgb(231,110,28)" fg:x="19977" fg:w="3"/><text x="100.1450%" y="222.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.02%)</title><rect x="99.9150%" y="356" width="0.0200%" height="15" fill="rgb(216,71,40)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="366.50"></text></g><g><title>__GI___mmap64 (4 samples, 0.02%)</title><rect x="99.9150%" y="372" width="0.0200%" height="15" fill="rgb(229,89,53)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="382.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9150%" y="388" width="0.0200%" height="15" fill="rgb(210,124,14)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="398.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9150%" y="404" width="0.0200%" height="15" fill="rgb(236,213,6)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="414.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9150%" y="420" width="0.0200%" height="15" fill="rgb(228,41,5)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="430.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9150%" y="436" width="0.0200%" height="15" fill="rgb(221,167,25)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="446.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9150%" y="452" width="0.0200%" height="15" fill="rgb(228,144,37)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="462.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9150%" y="468" width="0.0200%" height="15" fill="rgb(227,189,38)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="478.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9150%" y="484" width="0.0200%" height="15" fill="rgb(218,8,2)" fg:x="19981" fg:w="4"/><text x="100.1650%" y="494.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9200%" y="500" width="0.0150%" height="15" fill="rgb(209,61,28)" fg:x="19982" fg:w="3"/><text x="100.1700%" y="510.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9200%" y="516" width="0.0150%" height="15" fill="rgb(233,140,39)" fg:x="19982" fg:w="3"/><text x="100.1700%" y="526.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9200%" y="532" width="0.0150%" height="15" fill="rgb(251,66,48)" fg:x="19982" fg:w="3"/><text x="100.1700%" y="542.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9200%" y="548" width="0.0150%" height="15" fill="rgb(210,44,45)" fg:x="19982" fg:w="3"/><text x="100.1700%" y="558.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.03%)</title><rect x="99.9100%" y="228" width="0.0300%" height="15" fill="rgb(214,136,46)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="238.50"></text></g><g><title>tcache_init (6 samples, 0.03%)</title><rect x="99.9100%" y="244" width="0.0300%" height="15" fill="rgb(207,130,50)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="254.50"></text></g><g><title>tcache_init (6 samples, 0.03%)</title><rect x="99.9100%" y="260" width="0.0300%" height="15" fill="rgb(228,102,49)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="270.50"></text></g><g><title>arena_get2 (6 samples, 0.03%)</title><rect x="99.9100%" y="276" width="0.0300%" height="15" fill="rgb(253,55,1)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="286.50"></text></g><g><title>arena_get2 (6 samples, 0.03%)</title><rect x="99.9100%" y="292" width="0.0300%" height="15" fill="rgb(238,222,9)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="302.50"></text></g><g><title>_int_new_arena (6 samples, 0.03%)</title><rect x="99.9100%" y="308" width="0.0300%" height="15" fill="rgb(246,99,6)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="318.50"></text></g><g><title>new_heap (6 samples, 0.03%)</title><rect x="99.9100%" y="324" width="0.0300%" height="15" fill="rgb(219,110,26)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="334.50"></text></g><g><title>alloc_new_heap (6 samples, 0.03%)</title><rect x="99.9100%" y="340" width="0.0300%" height="15" fill="rgb(239,160,33)" fg:x="19980" fg:w="6"/><text x="100.1600%" y="350.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,853 samples, 14.27%)</title><rect x="85.6936%" y="132" width="14.2664%" height="15" fill="rgb(220,202,23)" fg:x="17137" fg:w="2853"/><text x="85.9436%" y="142.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (2,853 samples, 14.27%)</title><rect x="85.6936%" y="148" width="14.2664%" height="15" fill="rgb(208,80,26)" fg:x="17137" fg:w="2853"/><text x="85.9436%" y="158.50">&lt;alloc::boxed::Box&lt;F,A..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (2,853 samples, 14.27%)</title><rect x="85.6936%" y="164" width="14.2664%" height="15" fill="rgb(243,85,7)" fg:x="17137" fg:w="2853"/><text x="85.9436%" y="174.50">core::ops::function::F..</text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (2,853 samples, 14.27%)</title><rect x="85.6936%" y="180" width="14.2664%" height="15" fill="rgb(228,77,47)" fg:x="17137" fg:w="2853"/><text x="85.9436%" y="190.50">std::thread::Builder::..</text></g><g><title>std::sys::unix::thread::guard::current (10 samples, 0.05%)</title><rect x="99.9100%" y="196" width="0.0500%" height="15" fill="rgb(212,226,8)" fg:x="19980" fg:w="10"/><text x="100.1600%" y="206.50"></text></g><g><title>__pthread_getattr_np (10 samples, 0.05%)</title><rect x="99.9100%" y="212" width="0.0500%" height="15" fill="rgb(241,120,54)" fg:x="19980" fg:w="10"/><text x="100.1600%" y="222.50"></text></g><g><title>__GI___pthread_getaffinity_np (4 samples, 0.02%)</title><rect x="99.9400%" y="228" width="0.0200%" height="15" fill="rgb(226,80,16)" fg:x="19986" fg:w="4"/><text x="100.1900%" y="238.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9400%" y="244" width="0.0200%" height="15" fill="rgb(240,76,13)" fg:x="19986" fg:w="4"/><text x="100.1900%" y="254.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9400%" y="260" width="0.0200%" height="15" fill="rgb(252,74,8)" fg:x="19986" fg:w="4"/><text x="100.1900%" y="270.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9400%" y="276" width="0.0200%" height="15" fill="rgb(244,155,2)" fg:x="19986" fg:w="4"/><text x="100.1900%" y="286.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9400%" y="292" width="0.0200%" height="15" fill="rgb(215,81,35)" fg:x="19986" fg:w="4"/><text x="100.1900%" y="302.50"></text></g><g><title>[unknown] (4 samples, 0.02%)</title><rect x="99.9400%" y="308" width="0.0200%" height="15" fill="rgb(206,55,2)" fg:x="19986" fg:w="4"/><text x="100.1900%" y="318.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9500%" y="324" width="0.0100%" height="15" fill="rgb(231,2,34)" fg:x="19988" fg:w="2"/><text x="100.2000%" y="334.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.02%)</title><rect x="99.9600%" y="196" width="0.0150%" height="15" fill="rgb(242,176,48)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="206.50"></text></g><g><title>__GI___mmap64 (3 samples, 0.02%)</title><rect x="99.9600%" y="212" width="0.0150%" height="15" fill="rgb(249,31,36)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="222.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9600%" y="228" width="0.0150%" height="15" fill="rgb(205,18,17)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="238.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9600%" y="244" width="0.0150%" height="15" fill="rgb(254,130,5)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="254.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9600%" y="260" width="0.0150%" height="15" fill="rgb(229,42,45)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="270.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9600%" y="276" width="0.0150%" height="15" fill="rgb(245,95,25)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="286.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9600%" y="292" width="0.0150%" height="15" fill="rgb(249,193,38)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="302.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9600%" y="308" width="0.0150%" height="15" fill="rgb(241,140,43)" fg:x="19990" fg:w="3"/><text x="100.2100%" y="318.50"></text></g><g><title>__clone3 (2,862 samples, 14.31%)</title><rect x="85.6736%" y="84" width="14.3114%" height="15" fill="rgb(245,78,48)" fg:x="17133" fg:w="2862"/><text x="85.9236%" y="94.50">__clone3</text></g><g><title>start_thread (2,862 samples, 14.31%)</title><rect x="85.6736%" y="100" width="14.3114%" height="15" fill="rgb(214,92,39)" fg:x="17133" fg:w="2862"/><text x="85.9236%" y="110.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2,858 samples, 14.29%)</title><rect x="85.6936%" y="116" width="14.2914%" height="15" fill="rgb(211,189,14)" fg:x="17137" fg:w="2858"/><text x="85.9436%" y="126.50">std::sys::unix::thread..</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (5 samples, 0.03%)</title><rect x="99.9600%" y="132" width="0.0250%" height="15" fill="rgb(218,7,24)" fg:x="19990" fg:w="5"/><text x="100.2100%" y="142.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (5 samples, 0.03%)</title><rect x="99.9600%" y="148" width="0.0250%" height="15" fill="rgb(224,200,49)" fg:x="19990" fg:w="5"/><text x="100.2100%" y="158.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (5 samples, 0.03%)</title><rect x="99.9600%" y="164" width="0.0250%" height="15" fill="rgb(218,210,14)" fg:x="19990" fg:w="5"/><text x="100.2100%" y="174.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (5 samples, 0.03%)</title><rect x="99.9600%" y="180" width="0.0250%" height="15" fill="rgb(234,142,31)" fg:x="19990" fg:w="5"/><text x="100.2100%" y="190.50"></text></g><g><title>__GI___mprotect (2 samples, 0.01%)</title><rect x="99.9750%" y="196" width="0.0100%" height="15" fill="rgb(227,165,2)" fg:x="19993" fg:w="2"/><text x="100.2250%" y="206.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9750%" y="212" width="0.0100%" height="15" fill="rgb(232,44,46)" fg:x="19993" fg:w="2"/><text x="100.2250%" y="222.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9750%" y="228" width="0.0100%" height="15" fill="rgb(236,149,47)" fg:x="19993" fg:w="2"/><text x="100.2250%" y="238.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9750%" y="244" width="0.0100%" height="15" fill="rgb(227,45,31)" fg:x="19993" fg:w="2"/><text x="100.2250%" y="254.50"></text></g><g><title>[unknown] (2 samples, 0.01%)</title><rect x="99.9750%" y="260" width="0.0100%" height="15" fill="rgb(240,176,51)" fg:x="19993" fg:w="2"/><text x="100.2250%" y="270.50"></text></g><g><title>all (19,998 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(249,146,41)" fg:x="0" fg:w="19998"/><text x="0.2500%" y="62.50"></text></g><g><title>tokio-runtime-w (19,893 samples, 99.47%)</title><rect x="0.5251%" y="68" width="99.4749%" height="15" fill="rgb(213,208,4)" fg:x="105" fg:w="19893"/><text x="0.7751%" y="78.50">tokio-runtime-w</text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (3 samples, 0.02%)</title><rect x="99.9850%" y="84" width="0.0150%" height="15" fill="rgb(245,84,36)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="94.50"></text></g><g><title>parking_lot_core::parking_lot::park (3 samples, 0.02%)</title><rect x="99.9850%" y="100" width="0.0150%" height="15" fill="rgb(254,84,18)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="110.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (3 samples, 0.02%)</title><rect x="99.9850%" y="116" width="0.0150%" height="15" fill="rgb(225,38,54)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="126.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (3 samples, 0.02%)</title><rect x="99.9850%" y="132" width="0.0150%" height="15" fill="rgb(246,50,30)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="142.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (3 samples, 0.02%)</title><rect x="99.9850%" y="148" width="0.0150%" height="15" fill="rgb(246,148,9)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="158.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (3 samples, 0.02%)</title><rect x="99.9850%" y="164" width="0.0150%" height="15" fill="rgb(223,75,4)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="174.50"></text></g><g><title>syscall (3 samples, 0.02%)</title><rect x="99.9850%" y="180" width="0.0150%" height="15" fill="rgb(239,148,41)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="190.50"></text></g><g><title>[unknown] (3 samples, 0.02%)</title><rect x="99.9850%" y="196" width="0.0150%" height="15" fill="rgb(205,195,3)" fg:x="19995" fg:w="3"/><text x="100.2350%" y="206.50"></text></g></svg></svg>